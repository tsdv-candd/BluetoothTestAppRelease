<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NationalInstruments.Analysis.Enterprise</name>
    </assembly>
    <members>
        <member name="T:NationalInstruments.Analysis.AnalysisErrorCode">
            <summary>
            Specifies the types of error codes that can be returned from the Analysis library.
            </summary>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <lastupdated>9/16/2008 11:00:04 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.OutOfMemory">
            <summary>
            Specified operation does not have enough memory available.
            </summary>
            <lastupdated>5/27/2003 12:54:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesNotEqual">
            <summary>
            Specified input sequences are not the same size.
            </summary>
            <lastupdated>5/27/2003 12:55:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesMustBeGTZero">
            <summary>
            Specified samples must be greater than zero.
            </summary>
            <lastupdated>5/27/2003 12:55:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesMustBeGEZero">
            <summary>
            Specified samples must be greater than or equal to zero.
            </summary>
            <lastupdated>5/27/2003 12:55:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesMustBeGEOne">
            <summary>
            Specified samples must be greater than or equal to one.
            </summary>
            <lastupdated>5/27/2003 12:54:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesMustBeGETwo">
            <summary>
            Specified samples must be greater than or equal to two.
            </summary>
            <lastupdated>5/27/2003 12:55:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesMustBeGEThree">
            <summary>
            Specified samples must be greater than or equal to three.
            </summary>
            <lastupdated>5/27/2003 12:55:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ArraySizeIncorrect">
            <summary>
            Specified array size is incorrect.
            </summary>
            <lastupdated>5/27/2003 12:50:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ArraySizeNotPowerOfTwo">
            <summary>
            Specified array size is not a power of 2.
            </summary>
            <lastupdated>5/27/2003 12:50:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MaximumTransformSizeExceeded">
            <summary>
            Maximum transform size has been exceeded.
            </summary>
            <lastupdated>5/27/2003 12:53:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DutyCycleIncorrect">
            <summary>
            Specified duty cycle value is incorrect.
            </summary>
            <lastupdated>5/27/2003 12:51:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NumberOfCyclesIncorrect">
            <summary>
            Number of cycles is incorrect.
            </summary>
            <lastupdated>5/27/2003 12:54:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.WidthIncorrect">
            <summary>
            Specified width is incorrect.
            </summary>
            <lastupdated>5/27/2003 12:55:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DelayWidthIncorrect">
            <summary>
            Sum of delay and width must be less than number of samples.
            </summary>
            <lastupdated>5/27/2003 12:51:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DTMustBeGEZero">
            <summary>
            Dt value must be greater than or equal to zero.
            </summary>
            <lastupdated>5/27/2003 12:51:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DTMustBeGTZero">
            <summary>
            Dt value must be greater than zero.
            </summary>
            <lastupdated>5/27/2003 12:51:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.IndexCannotBeLTSamples">
            <summary>
            Index cannot be less than the number of samples.
            </summary>
            <lastupdated>5/27/2003 12:52:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.IndexLengthIncorrect">
            <summary>
            Index length is incorrect.
            </summary>
            <lastupdated>5/27/2003 12:52:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.UpperMustBeGELower">
            <summary>
            Upper value must be greater than or equal to the lower value.
            </summary>
            <lastupdated>5/27/2003 12:55:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NyquistConditionError">
            <summary>
            Specified cutoff frequency must be greater than zero and less than half the sampling rate.
            </summary>
            <lastupdated>5/27/2003 12:54:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.OrderMustBeGTZero">
            <summary>
            Order must be greater than zero.
            </summary>
            <lastupdated>5/27/2003 12:54:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidDecimatingFactor">
            <summary>
            Specified decimating factor is invalid.
            </summary>
            <lastupdated>5/27/2003 12:52:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidBandSpecification">
            <summary>
            Specified band is incorrect.
            </summary>
            <lastupdated>5/27/2003 12:52:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.RippleMustBeGTZero">
            <summary>
            Specified ripple must be greater than zero.
            </summary>
            <lastupdated>5/27/2003 12:54:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.AttenuationMustBeGTZero">
            <summary>
            Specified attenuation must be greater than zero.
            </summary>
            <lastupdated>5/27/2003 12:50:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.WidthMustBeGTZero">
            <summary>
            Specified width must be greater than zero.
            </summary>
            <lastupdated>5/27/2003 12:55:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FinalValueMustBeGTZero">
            <summary>
            Specified final value must be greater than zero.
            </summary>
            <lastupdated>5/27/2003 12:51:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.AttenuationMustBeGTRipple">
            <summary>
            Specified attenuation must be greater than the ripple amplitude.
            </summary>
            <lastupdated>5/27/2003 12:50:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.StepSizeIncorrect">
            <summary>
            Specified step size is incorrect.
            </summary>
            <lastupdated>5/27/2003 12:55:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.LeakageCoefficientIncorrect">
            <summary>
            Specified leakage coefficient is invalid.
            </summary>
            <lastupdated>5/27/2003 12:52:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.EquiRippleDesignIncorrect">
            <summary>
            Specified EquiRipple filter design is incorrect.
            </summary>
            <lastupdated>5/27/2003 12:51:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FilterRankIncorrect">
            <summary>
            Specified filter rank is incorrect.
            </summary>
            <lastupdated>5/27/2003 12:51:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NumberOfCoefficientMustBeOdd">
            <summary>
            Number of coefficients must be odd.
            </summary>
            <lastupdated>5/27/2003 12:54:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NumberOfCoefficientMustBeEven">
            <summary>
            Number of coefficients must be even.
            </summary>
            <lastupdated>5/27/2003 12:54:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.StandardDeviationMustBeGTZero">
            <summary>
            Specified standard deviation must be greater than zero.
            </summary>
            <lastupdated>5/27/2003 12:55:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MixedSignsInArray">
            <summary>
            Specified matrix contains mixed signs.
            </summary>
            <lastupdated>5/27/2003 12:54:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SizeMustBeGTOrder">
            <summary>
            Specified array size must be greater than the order.
            </summary>
            <lastupdated>5/27/2003 12:55:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.IntervalsMustBeGTZero">
            <summary>
            The number of intervals must be greater than zero.
            </summary>
            <lastupdated>5/27/2003 12:52:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MatrixMultiplicationFailed">
            <summary>
            Matrix multiplication failed.
            </summary>
            <lastupdated>5/27/2003 12:53:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NotSquareMatrix">
            <summary>
            Specified matrix is not a square matrix.
            </summary>
            <lastupdated>5/27/2003 12:54:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MatrixCannotBeSingular">
            <summary>
            Specified matrix cannot be singular. A singular matrix is a matrix that has no 
            inverse.
            </summary>
            <lastupdated>5/27/2003 12:53:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.LevelsOutOfRange">
            <summary>
            Specified levels are out of range.
            </summary>
            <lastupdated>5/27/2003 12:52:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FactorOutOfRange">
            <summary>
            Level of factor is outside the allowable range.
            </summary>
            <lastupdated>5/27/2003 12:51:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ObservationMissingInLevel">
            <summary>
            Specified level has a missing observation.
            </summary>
            <lastupdated>5/27/2003 12:54:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DataPointsTotalInvalid">
            <summary>
            The total number of data points is invalid.
            </summary>
            <lastupdated>5/27/2003 12:51:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.Overflow">
            <summary>
            Specified operation resulted in an overflow error.
            </summary>
            <lastupdated>5/27/2003 12:54:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DataUnbalanced">
            <summary>
            Data is unbalanced.
            </summary>
            <lastupdated>5/27/2003 12:51:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FixedEffectModelRequired">
            <summary>
            Random Effect model was requested when the Fixed Effect model is required.
            </summary>
            <lastupdated>5/27/2003 12:51:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InputValuesMustBeDistinct">
            <summary>
            The specified input values must be distinct.
            </summary>
            <lastupdated>5/27/2003 12:55:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.PoleAtRequestedValue">
            <summary>
            Interpolating method has a pole at the requested value.
            </summary>
            <lastupdated>5/27/2003 12:54:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FirstColumnNotAllOnes">
            <summary>
            The first column in the specified matrix cannot be all ones.
            </summary>
            <lastupdated>5/27/2003 12:51:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidDegreesOfFreedom">
            <summary>
            Specified degrees if freedom is invalid.
            </summary>
            <lastupdated>5/27/2003 12:52:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.IncorrectProbability">
            <summary>
            Specified probability must be between 0 and 1.
            </summary>
            <lastupdated>5/27/2003 12:52:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidProbability">
            <summary>
            Specified probability is invalid.
            </summary>
            <lastupdated>5/27/2003 12:52:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.CategoriesInvalid">
            <summary>
            Specified categories are invalid.
            </summary>
            <lastupdated>5/27/2003 12:51:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ContingencyTableInvalid">
            <summary>
            Invalid number of categories or samples.
            </summary>
            <lastupdated>5/27/2003 12:51:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidBetaFunctionParameter">
            <summary>
            The specified beta method parameter is incorrect.
            </summary>
            <lastupdated>5/27/2003 12:52:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidDimension">
            <summary>
            Specified dimension is invalid.
            </summary>
            <lastupdated>5/27/2003 12:52:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NegativeNumber">
            <summary>
            Negative number error.
            </summary>
            <lastupdated>5/27/2003 12:54:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DivideByZero">
            <summary>
             A divide by zero error has occurred.
            </summary>
            <lastupdated>5/27/2003 12:51:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidSelection">
            <summary>
            Specified selection is invalid.
            </summary>
            <lastupdated>5/27/2003 12:52:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MaxIterationsExceeded">
            <summary>
            Maximum iterations have been exceeded.
            </summary>
            <lastupdated>5/27/2003 12:53:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidPolynomial">
            <summary>
            Specified polynomial is invalid.
            </summary>
            <lastupdated>5/27/2003 12:52:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InternalMemoryStateInvalid">
            <summary>
            The internal memory state is invalid.
            </summary>
            <lastupdated>5/27/2003 12:52:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ZeroVector">
            <summary>
            Specified vector cannot have all zero elements.
            </summary>
            <lastupdated>5/27/2003 12:55:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidIirFilterInfo">
            <summary>
            Specified IIR filter information is invalid.
            </summary>
            <lastupdated>5/27/2003 12:52:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FundamentalFrequencyOrSamplingRateInvalid">
            <summary>
            Specified fundamental frequency or sampling rate is invalid.
            </summary>
            <lastupdated>5/27/2003 12:51:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MatrixContainsInvalidDouble">
            <summary>
            The input arguments have at least one element that is either infinity, not a number (NaN), double maximum, or double minimum.
            </summary>
            <lastupdated>9/13/2005 10:51:03 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesMustBeGEFour">
            <summary>
            The specified samples must be greater than or equal to four.
            </summary>
            <lastupdated>9/13/2005 10:52:54 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MatricesMustHaveSameSize">
            <summary>
            The matrices must have the same size.
            </summary>
            <lastupdated>9/13/2005 10:50:22 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InputNotPositiveDefinite">
            <summary>
            The input to the Cholesky Decomposition was not positive definite.
            </summary>
            <lastupdated>9/13/2005 10:50:03 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.CannotComputeMatrixLogarithm">
            <summary>
            The logarithm of the input matrix cannot be computed.
            </summary>
            <lastupdated>9/13/2005 10:48:48 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.EigenValuesTooClose">
            <summary>
            The eigenvalues cannot be reordered because some eigenvalues are too close.
            </summary>
            <lastupdated>9/13/2005 10:48:56 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ReorderingChangedEigenValues">
            <summary>
            Reordering eigenvalues changed some complex eigenvalues.
            </summary>
            <lastupdated>9/13/2005 10:52:13 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.FilterBufferOverflow">
            <summary>
            The filter buffer has overflowed.
            </summary>
            <lastupdated>9/29/2005 10:10:28 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ResamplePointCannotBeCalculated">
            <summary>
            The resample point cannot be calculated with the signal behind that of input.
            </summary>
            <lastupdated>9/13/2005 10:52:35 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.BaseMustBeLTTop">
            <summary>
            Base must be less than top.
            </summary>
            <lastupdated>9/13/2005 10:48:42 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ShiftRangeInvalid">
            <summary>
            The specified shift range is invalid. The number of shifts must be less than the length of the shifted array.
            </summary>
            <lastupdated>5/27/2003 12:55:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NoFeasibleSolution">
            <summary>
            Feasible solution not found for the given input.
            </summary>
            <lastupdated>10/13/2009 2:48:32 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.OrderMustBeGEZero">
            <summary>
            Order must be greater than or equal to zero.
            </summary>
            <lastupdated>5/27/2003 12:54:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NumberIsNegativeOrZero">
            <summary>
            Curve-fitting error. The number is negative or zero.
            </summary>
            <lastupdated>9/13/2005 10:51:57 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NumberIsZero">
            <summary>
            Curve-fitting error. The number is zero.
            </summary>
            <lastupdated>9/13/2005 10:52:03 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NotEnoughCrossPoints">
            <summary>The waveform did not cross the mid reference level enough times to perform this measurement. Check the signal length, reference levels, and reference level units.</summary>
            <lastupdated>3/25/2008 12:26:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.AmplitudeZero">
            <summary>The amplitude of the waveform is zero and cannot be used to create a histogram.</summary>
            <lastupdated>3/25/2008 12:21:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NotEnoughEdges">
            <summary>The waveform did not have enough edges to perform this measurement. An edge is defined as a crossing of both the low and high reference levels. Check the signal length, reference levels, and reference level units.</summary>
            <lastupdated>3/25/2008 12:26:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MemoryFull">
            <summary>Insufficient memory available for waveform measurement.</summary>
            <lastupdated>3/25/2008 12:26:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.WaveformSizeZero">
            <summary>The input waveform size is zero.</summary>
            <lastupdated>3/25/2008 12:26:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.IncorrectReferenceLevels">
            <summary>Reference levels are inconsistent. The low reference level must be less than or equal to the mid reference level, which must be less than or equal to the high reference level.</summary>
            <lastupdated>3/25/2008 12:23:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.IncorrectReferenceLevelUnit">
            <summary>The reference level units parameter is not a valid ReferenceLevelUnit.</summary>
            <lastupdated>3/27/2008 9:43:51 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.DeltaTimeLEZero">
            <summary>The waveform sampling interval, defined as the dt parameter, is less than or equal to zero.</summary>
            <lastupdated>3/25/2008 12:22:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InvalidPercentageMethod">
            <summary>The percent method parameter value is not a valid measurement method.</summary>
            <lastupdated>9/16/2008 12:45:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.HistogramSizeZero">
            <summary>The histogram size parameter value is less than or equal to zero.</summary>
            <lastupdated>3/25/2008 12:23:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.UndefinedResult">
            <summary>The result is not a number (NaN) or infinite.</summary>
            <lastupdated>3/25/2008 12:26:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.WaveformPeriodTooShort">
            <summary>The period of the waveform is too short to perform the measurement.</summary>
            <lastupdated>3/25/2008 12:26:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.EdgeNumberLEZero">
            <summary>The edge number, pulse number, or cycle parameter value is less than or equal to zero.</summary>
            <lastupdated>3/25/2008 12:22:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InfiniteSlewRate">
            <summary>The slew rate is infinite due to a zero  rise or fall time.</summary>
            <lastupdated>3/25/2008 12:26:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InternalLibraryError">
            <summary>
            An internal library error has occurred.
            </summary>
            <lastupdated>5/27/2003 12:52:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.MatrixIsRankDeficient">
            <summary>
            Specified matrix rank is deficient. The rank of a matrix is the maximum number of independent rows or columns. 
            A matrix of order <format type="italics">n</format> is rank deficient if it has a rank of less than <format type="italics">n</format>.
            </summary>
            <lastupdated>5/27/2003 12:53:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SamplesGTZeroWarning">
            <summary>
            A warning that the number of samples must be greater than zero.
            </summary>
            <lastupdated>9/13/2005 2:50:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.SingularMatrixWarning">
            <summary>
            A warning that the input matrix is singular.
            </summary>
            <lastupdated>9/13/2005 2:51:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.NotSameSizeWarning">
            <summary>
            A warning that the input matrices or vectors do not have the same size.
            </summary>
            <lastupdated>9/13/2005 2:50:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ReorderNotPerformedWarning">
            <summary>
            A warning that the reorder procedure could not be performed.
            </summary>
            <lastupdated>9/13/2005 2:50:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.InaccurateComputationWarning">
            <summary>
            A warning that the computation result might be inaccurate.
            </summary>
            <lastupdated>9/13/2005 2:50:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.ArraySizeIncorrectWarning">
            <summary>
            A warning that the array size is incorrect.
            </summary>
            <lastupdated>9/13/2005 2:47:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.StandardDeviationInvalidWarning">
            <summary>
            A warning that the input standard deviation is invalid.
            </summary>
            <lastupdated>9/13/2005 2:51:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.AnalysisErrorCode.EmptyPolynomialWarning">
            <summary>
            A warning that the input polynomial is empty.
            </summary>
            <lastupdated>9/13/2005 2:49:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.AnalysisWarning">
            <summary>
            Represents a warning, or positive error code, received from the internal Analysis library.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            When this API makes calls into the underlying Analysis library, warnings might occasionally occur due to invalid configuration states, invalid parameters, 
            and other factors.  When this happens, the errors are exposed through this class. 
            </remarks>
            <lastupdated>3/6/2006 9:49:10 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.Analysis.AnalysisWarning.Warning">
            <summary>
            Occurs when an analysis method generates a warning.
            </summary>
            <remarks>
            Use this event to check for any warnings that may occur after invoking a method from the Analysis library.
            </remarks>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 9:50:30 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.AnalysisWarning.SynchronizingObject">
            <summary>
            Gets or sets the object that marshals calls to event handlers and callbacks. </summary>
            <value>
            The <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> that represents the object that marshals calls to event handlers and callbacks. 
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            When the value of this property is <see langword="null"/>, calls to event handlers and callbacks are raised in the default manner. 
            As a result, calls might occur in a thread other than the main thread. To avoid this behavior, set this property to an 
            object that implements the <see cref="T:System.ComponentModel.ISynchronizeInvoke"/> interface object. 
            	<note type="note">
            		
            			<see cref="P:NationalInstruments.Analysis.AnalysisWarning.SynchronizingObject"/> has been superseded by
            <see cref="P:NationalInstruments.Analysis.AnalysisWarning.SynchronizeCallbacks"/> in .NET Framework 2.0 and later. 
            For more information, refer to <see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
            </note>
            </remarks>
            <lastupdated>9/16/2008 10:58:02 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.AnalysisWarning.SynchronizeCallbacks">
            <summary>
            Specifies how events and callback delegates are invoked.
            </summary>
            <value>
            	<see langword="true"/> if events and callbacks are invoked through the 
            <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)"/> or
            <see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)"/> methods; otherwise, events
            and callbacks are invoked directly.  The default value is <see langword="true"/>.
            </value>
            <remarks>
            In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
            Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
            from these callbacks and event handlers. For more information, refer to 
            <see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
            </remarks>
            <lastupdated>3/20/2006 5:56:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.AnalysisWarningEventArgs">
            <summary>
            Provides data for the <see cref="E:NationalInstruments.Analysis.AnalysisWarning.Warning"/> event.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This event occurs when the underlying Analysis library generates a warning.
            </remarks>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <lastupdated>9/16/2008 10:58:40 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.AnalysisWarningEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Analysis.AnalysisWarningEventArgs"/> class.
            </summary>
            <param name="errorCode">
            The positive error code of the analysis warning that has occurred.
            </param>
            <param name="message">
            The explanation of the warning that has occurred.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 9:50:38 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.AnalysisWarningEventArgs.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 9:51:51 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.AnalysisWarningEventArgs.Message">
            <summary>
            Gets the explanation for the analysis warning that has occurred.
            </summary>
            <value>
            The explanation of the analysis warning.
            </value>
            <lastupdated>9/29/2005 10:11:11 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.AnalysisWarningEventArgs.ErrorCode">
            <summary>
            Gets the positive error code for the analysis warning that has occurred.
            </summary>
            <value>
            The positive value of the error code.
            </value>
            <lastupdated>9/29/2005 10:11:02 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.AnalysisWarningEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:NationalInstruments.Analysis.AnalysisWarning.Warning"/> event.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            An <see cref="T:NationalInstruments.Analysis.AnalysisWarningEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 9:51:58 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Angle">
            <summary>
            Represents an angular quantity.  Use <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> to
            convert angular quantities between degrees and radians.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            The value of an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> represents an
            angular quantity such as a phase angle or an angular position.
            </para>
            	<para>
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> is created either by calling 
            <see cref="M:NationalInstruments.Analysis.Conversion.Angle.FromDegrees(System.Double)"/> with the desired angle value in 
            degrees or <see cref="M:NationalInstruments.Analysis.Conversion.Angle.FromRadians(System.Double)"/> with the desired angle
            value in radians.
            </para>
            	<para>
            The value of an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> can be retrieved
            using the property <see cref="P:NationalInstruments.Analysis.Conversion.Angle.Degrees"/> to get the value in
            degrees or the property <see cref="P:NationalInstruments.Analysis.Conversion.Angle.Radians"/> to get the
            value in radians.
            </para>
            </remarks>
            <packages>
            	<package name="Professional"/>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>7/23/2004 10:56:58 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.#cctor">
            <exclude/>
            <lastupdated>5/12/2008 11:15:15 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.#ctor(System.Double,NationalInstruments.Analysis.Conversion.Angle.Units)">
            <exclude/>
            <lastupdated>5/9/2003 3:08:58 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>5/12/2003 4:28:29 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.FromDegrees(System.Double)">
            <summary>
            Returns an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> that represents the angle specified
            in degrees.
            </summary>
            <param name="degrees">
            The angular quantity in degrees.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> that represents an angle of 
            <paramref name="degrees"/>.
            </returns>
            <lastupdated>5/27/2003 11:57:12 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.FromRadians(System.Double)">
            <summary>
            Returns an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> that represents the angle specified
            in radians.
            </summary>
            <param name="radians">
            The angular quantity in radians.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> that represents an angle of
            <paramref name="radians"/>.
            </returns>
            <lastupdated>5/27/2003 11:57:16 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Plus">
            <summary>
            Returns this instance of <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </summary>
            <returns>
            This instance of <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </returns>
            <lastupdated>5/27/2003 11:58:19 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_UnaryPlus(NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Returns the specified instance of <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> (a unary plus).
            </summary>
            <param name="a">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <returns>
            	<paramref name="a"/>.
            </returns>
            <lastupdated>5/27/2003 11:57:45 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Negate">
            <summary>
            Returns an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> whose value is the negated value of
            this instance.  
            </summary>
            <returns>
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> whose value is the negated value of this
            instance.
            </returns>
            <lastupdated>5/27/2003 11:57:24 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_UnaryNegation(NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Returns an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> whose value is the 
            negative of the specified instance (a unary minus).
            </summary>
            <param name="a">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <returns>
            The negative of <paramref name="a"/>.
            </returns>
            <lastupdated>5/27/2003 11:57:36 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Add(NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Adds an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> to this instance and returns a new 
            <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> representing the sum.
            </summary>
            <param name="a">
            The <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> to add to this instance.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> that represents the value of this instance
            plus the value of <paramref name="a"/>.
            </returns>
            <lastupdated>5/27/2003 11:56:35 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_Addition(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Adds two <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> instances.
            </summary>
            <param name="a1">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <param name="a2">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> whose value is the sum of 
            <paramref name="a1"/> and <paramref name="a2"/>.
            </returns>
            <lastupdated>5/27/2003 11:57:49 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Subtract(NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Subtracts an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> from this instance and returns a new 
            <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> representing the difference.
            </summary>
            <param name="a">
            The <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> to subtract from this instance.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> that represents the value of this instance
            minus the value of <paramref name="a"/>.
            </returns>
            <lastupdated>5/27/2003 11:58:26 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_Subtraction(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Subtracts one <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> from another.
            </summary>
            <param name="a1">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <param name="a2">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> whose value is the result of 
            <paramref name="a1"/> minus <paramref name="a2"/>.
            </returns>
            <lastupdated>5/27/2003 11:57:41 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
            <remarks>
            Two <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> objects might have the same hash code even
            though they represent different angle values.
            </remarks>
            <lastupdated>5/27/2003 11:57:21 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Compare(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Compares two <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> values and returns an indication of
            their relative values.
            </summary>
            <param name="a1">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <param name="a2">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <returns>
            	<list type="table">
            		<listheader><term>Value</term><description>Condition</description></listheader>
            		<item>
            			<term>
            &lt;0
            </term>
            			<description>
            				<paramref name="a1"/> is less than <paramref name="a2"/>
            			</description>
            		</item>
            		<item>
            			<term>
            0
            </term>
            			<description>
            				<paramref name="a1"/> is equal to <paramref name="a2"/>
            			</description>
            		</item>
            		<item>
            			<term>
            &gt;0
            </term>
            			<description>
            				<paramref name="a1"/> is greater than <paramref name="a2"/>
            			</description>
            		</item>
            	</list>
            </returns>
            <lastupdated>5/27/2003 11:56:40 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_Equality(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Indicates if two <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> instances are equal.
            </summary>
            <param name="a1">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <param name="a2">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <returns>
            	<see langword="true"/> if the values of <paramref name="a1"/> and <paramref name="a2"/>
            are equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:34:33 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_Inequality(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Indicates if two <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> instances are not equal.
            </summary>
            <param name="a1">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <param name="a2">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <returns>
            	<see langword="true"/> if the values of <paramref name="a1"/> and <paramref name="a2"/>
            are not equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:29:17 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.CompareTo(System.Object)">
            <summary>
            Compares this instance with another <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </summary>
            <param name="obj">
            Object to compare with this instance, or <see langword="null"/>.
            </param>
            <returns>
            	<para>
            A 32-bit signed integer that indicates the relative order of the comparands. The return value has the following meanings:
            </para>
            	<list type="table">
            		<listheader><term>Value</term><description>Condition</description></listheader>
            		<item>
            			<term>
            Less than zero
            </term>
            			<description>
            The instance is less than <paramref name="obj"/>.
            </description>
            		</item>
            		<item>
            			<term>
            Zero
            </term>
            			<description>
            The instance is equal to <paramref name="obj"/>.
            </description>
            		</item>
            		<item>
            			<term>
            Greater than zero
            </term>
            			<description>
            				<para>The instance is greater than <paramref name="obj"/>.
            				</para>
            				<para>-or-</para>
            				<para><paramref name="obj"/> is <see langword="null"/>.</para>
            			</description>
            		</item>
            	</list>
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </exception>
            <lastupdated>7/23/2004 11:00:29 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Equals(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Returns a value indicating if two specified instances of 
            <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> are equal.
            </summary>
            <param name="a1">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <param name="a2">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="a1"/> and <paramref name="a2"/> are equal;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>9/13/2005 10:55:13 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Equals(NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Returns a value indicating if this instance is equal to the specified 
            <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </summary>
            <param name="a">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> to compare with this instance.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="a"/> represents the same angle 
            as this instance;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:28:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Equals(System.Object)">
            <summary>
            Returns a value indicating if this instance is equal to the specified object.
            </summary>
            <param name="obj">
            An object to compare with this instance.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an 
            <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> that represents the same angle as this instance;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:29:02 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_LessThan(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> is less than another.
            </summary>
            <param name="a1">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <param name="a2">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="a1"/> is less than 
            <paramref name="a2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:34:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_GreaterThan(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> is greater than another.
            </summary>
            <param name="a1">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <param name="a2">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="a1"/> is greater than 
            <paramref name="a2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:38:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_LessThanOrEqual(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> is less than or 
            equal to another.
            </summary>
            <param name="a1">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <param name="a2">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="a1"/> is less than or equal to
            <paramref name="a2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:34:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.op_GreaterThanOrEqual(NationalInstruments.Analysis.Conversion.Angle,NationalInstruments.Analysis.Conversion.Angle)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> is greater than or
            equal to another.
            </summary>
            <param name="a1">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <param name="a2">
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="a1"/> is greater than or equal
            to <paramref name="a2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:38:37 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Parse(System.String)">
            <summary>
            Converts the string representation of an angle to an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </summary>
            <param name="s">
            A string containing the angle to convert.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> representing the angle specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not an angle in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.
            				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "deg", "degrees"
            							</description>
            						</item>
            						<item>
            							<description>
            "", "rad", "radians"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 degrees", "3.1416 deg", "344.45e6", and "<entity value="ndash"/>123,456,789.0 rad".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 1:42:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of an angle in a specified culture-specific format to
            an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </summary>
            <param name="s">
            A string containing the angle to convert.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> representing the angle specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not an angle in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.
            				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "deg", "degrees"
            							</description>
            						</item>
            						<item>
            							<description>
            "", "rad", "radians"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 degrees", "3.1416 deg", "344.45e6", and "<entity value="ndash"/>123,456,789.0 rad".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 3:36:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of an angle with a specified style to
            an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </summary>
            <param name="s">
            A string containing the angle to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> representing the angle specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not an angle in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.
            				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "deg", "degrees"
            							</description>
            						</item>
            						<item>
            							<description>
            "", "rad", "radians"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 degrees", "3.1416 deg", "344.45e6", and "<entity value="ndash"/>123,456,789.0 rad".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 3:36:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of an angle with a specified style and culture-specific format to
            an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </summary>
            <param name="s">
            A string containing the angle to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> representing the angle specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not an angle in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.
            				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "deg", "degrees"
            							</description>
            						</item>
            						<item>
            							<description>
            "", "rad", "radians"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 degrees", "3.1416 deg", "344.45e6", and "<entity value="ndash"/>123,456,789.0 rad".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:06:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,NationalInstruments.Analysis.Conversion.Angle@)">
            <summary>
            Converts the string representation of an angle with a specified style and culture-specific format to
            an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/>.
            </summary>
            <param name="s">
            A string containing the angle to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <param name="result">
            Upon return, contains the <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> representing the angle specified in <paramref name="s"/>.
            If the return value is <see langword="false"/>, <paramref name="result"/> is an angle of 0 radians.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="s"/> is converted successfully.
            </returns>
            <remarks>
            	<para>
            This method is similar to the <see cref="M:NationalInstruments.Analysis.Conversion.Angle.Parse(System.String)"/> method, except this method does
            not throw an exception if it fails.
            </para>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.
            				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "deg", "degrees"
            							</description>
            						</item>
            						<item>
            							<description>
            "", "rad", "radians"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 degrees", "3.1416 deg", "344.45e6", and "<entity value="ndash"/>123,456,789.0 rad".
            </para>
            </remarks>
            <seealso cref="M:System.Double.TryParse(System.String,System.Double@)"/>
            <lastupdated>7/7/2004 4:11:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 11:58:31 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.ToString(System.String)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="format">
            	<para>The <see cref="T:System.String"/> specifying the format to use.  This can be any of the numeric format 
            strings defined for <see cref="T:System.Double"/>.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to use the default format.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 11:58:44 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="formatProvider">
            	<para>The <see cref="T:System.IFormatProvider"/> to use to format the value.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to obtain the numeric format information from the
            current locale setting of the operating system.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 11:58:39 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="format">
            	<para>The <see cref="T:System.String"/> specifying the format to use.  This can be any of the numeric format 
            strings defined for <see cref="T:System.Double"/>.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to use the default format.</para>
            </param>
            <param name="formatProvider">
            	<para>The <see cref="T:System.IFormatProvider"/> to use to format the value.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to obtain the numeric format information from the
            current locale setting of the operating system.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 11:58:47 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.Convert(NationalInstruments.Analysis.Conversion.Angle.Units)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:06 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.NoConvert(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:06 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.DegreesToRadians(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:06 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.RadiansToDegrees(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:06 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Angle.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Angle.Degrees">
            <summary>
            Gets the value of this angle in degrees.
            </summary>
            <value>
            The value of this <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> represented in 
            degrees.
            </value>
            <lastupdated>7/23/2004 10:58:16 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Angle.Radians">
            <summary>
            Gets the value of this angle in radians.
            </summary>
            <value>
            The value of this <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> represented in 
            radians.
            </value>
            <lastupdated>7/23/2004 10:58:30 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Angle.Zero">
            <summary>
            Represents an angle of zero.
            </summary>
            <value>
            The constant provides a convenient source for an <see cref="T:NationalInstruments.Analysis.Conversion.Angle"/> object with a value of zero.
            </value>
            <lastupdated>7/23/2004 10:59:13 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Angle.Units">
            <exclude/>
            <lastupdated>5/9/2003 3:08:13 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Angle.Units.Degrees">
            <exclude/>
            <lastupdated>5/9/2003 3:08:23 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Angle.Units.Radians">
            <exclude/>
            <lastupdated>5/9/2003 3:08:29 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Angle.ConvertDelegate">
            <exclude/>
            <lastupdated>5/12/2003 4:28:20 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.AnalysisException">
            <summary>
            Represents an error code received from the internal Analysis library.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            When this API makes calls into the underlying Analysis library, occasionally, errors occur due to invalid configuration states, invalid parameters, 
            and other factors.  When this happens, the errors are exposed through this exception class.  
            </remarks>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <lastupdated>9/16/2008 10:57:00 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.AnalysisException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Analysis.AnalysisException"/>  class.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 9:48:25 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.AnalysisException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Analysis.AnalysisException"/>  class using the
            given error message.
            </summary>
            <param name="message">
            Error message associated with this exception.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 9:48:29 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.AnalysisException.#ctor(System.String,NationalInstruments.Analysis.AnalysisErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Analysis.AnalysisException"/> class with the 
            given error message and Analysis library error code.
            </summary>
            <param name="message">
            Error message associated with this exception.
            </param>
            <param name="errorCode">
            Analysis library error code that caused this exception to be thrown.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 9:48:31 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.AnalysisException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Analysis.AnalysisException"/>  class using the
            given error message and inner exception.
            </summary>
            <param name="message">
            Error message associated with this exception.
            </param>
            <param name="inner">
            Inner exception that caused this exception to be thrown.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 9:48:34 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.AnalysisException.#ctor(System.String,System.Exception,NationalInstruments.Analysis.AnalysisErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Analysis.AnalysisException"/> class with the 
            given error message, inner exception, and Analysis library error code.
            </summary>
            <param name="message">
            Error message associated with this exception.
            </param>
            <param name="inner">
            Inner exception that caused this exception to be thrown.
            </param>
            <param name="errorCode">
            Analysis library error code that caused this exception to be thrown.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 9:48:36 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.AnalysisException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.Analysis.AnalysisException"/> object using serialized data.
            </summary>
            <param name="info">
            Object that holds the serialized object data.
            </param>
            <param name="context">
            Contextual information about the source or destination.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 9:48:27 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.AnalysisException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with information about the exception.
            </summary>
            <param name="info">
            Object that holds the serialized object data.
            </param>
            <param name="context">
            Contextual information about the source or destination.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 9:48:39 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.AnalysisException.ErrorCode">
            <summary>
            Gets a code that indicates what caused the exception.
            </summary>
            <remarks>
            Every time the API calls an Analysis library operation, it checks to see whether the status of the 
            operation indicates an error condition.  If an error condition exists, the 
            <see cref="T:NationalInstruments.Analysis.AnalysisException"/> is thrown, and this error code is set to
            be the error code of the operation in question.
            </remarks>
            <value>
            A value from the <see cref="T:NationalInstruments.Analysis.AnalysisErrorCode"/> enumeration.
            </value>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <lastupdated>9/16/2008 10:57:19 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Restricted.AnalysisLicenser">
            <exclude/>
            <lastupdated>6/18/2003 7:22:32 PM</lastupdated>
            <updatedby>Nandan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Restricted.AnalysisLicenser.#ctor">
            <exclude/>
            <lastupdated>6/18/2003 7:23:09 PM</lastupdated>
            <updatedby>Nandan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Constants">
            <summary>
            Provides frequently used mathematical and physical constants.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Measured and adopted constants are taken from CODATA Recommended Values 
            of the Fundamental Physical Constants: 1998.  Exact constants are given to the 
            the greatest precision allowed by the <see cref="T:System.Double"/> structure.
            </remarks>
            <packages>
            	<package name="Professional"/>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>7/10/2003 5:07:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.AvogadroConstant">
            <summary>
            Represents Avogadro's constant in mol<format type="superscript"><entity value="ndash"/>1</format>.
            </summary>
            <remarks>
            	<para>Returns the value 6.02214199e<format type="superscript">23</format>.</para>
            	<para>Source: CODATA Recommended Values of the Fundamental Physical Constants: 1998</para>
            </remarks>
            <lastupdated>5/27/2003 12:44:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.ElementaryCharge">
            <summary>
            Represents the elementary charge in C.
            </summary>
            <remarks>
            	<para>Returns the value 1.602176462e<format type="superscript"><entity value="ndash"/>19</format>.</para>
            	<para>Source: CODATA Recommended Values of the Fundamental Physical Constants: 1998</para>
            </remarks>
            <lastupdated>5/27/2003 12:45:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.E">
            <summary>
            Represents the base of the natural logarithm.
            </summary>
            <remarks>
            Returns the value 2.71828182845904523536. 
            </remarks>
            <lastupdated>5/27/2003 12:45:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.GravitationalConstant">
            <summary>
            Represents the Newtonian constant of gravitation, <format type="italics">G</format>,
            in m<format type="superscript">3</format> kg<format type="superscript"><entity value="ndash"/>1</format> s<format type="superscript"><entity value="ndash"/>2</format>.
            </summary>
            <remarks>
            	<para>Returns the value 6.6730e<format type="superscript"><entity value="ndash"/>11</format>.</para>
            	<para>Source: CODATA Recommended Values of the Fundamental Physical Constants: 1998</para>
            </remarks>
            <lastupdated>5/27/2003 12:45:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.HalfPI">
            <summary>
            Represents the value of Pi divided by 2.
            </summary>
            <remarks>
            Returns the value 1.57079632679489660.
            </remarks>
            <lastupdated>5/27/2003 12:45:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.LogOf10">
            <summary>
            Represents the natural log of 10.
            </summary>
            <remarks>
            Returns the value 2.3025850929940456840.
            </remarks>
            <lastupdated>5/27/2003 12:45:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.LogOf2">
            <summary>
            Represents the natural log of 2.
            </summary>
            <remarks>
            Returns the value 0.69314718055994531.
            </remarks>
            <lastupdated>5/27/2003 12:45:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.LogOfPI">
            <summary>
            Represents the natural log of Pi.
            </summary>
            <remarks>
            Returns the value 1.14472988584940020.
            </remarks>
            <lastupdated>5/27/2003 12:45:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.Log10OfE">
            <summary>
            Represents the base 10 logarithm of the base of the natural logarithm.
            </summary>
            <remarks>
            Returns the value 0.4342944819032518276511289189166050822944.
            </remarks>
            <lastupdated>5/27/2003 12:45:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.Log10OfPI">
            <summary>
            Represents the log to the base 10 of Pi.
            </summary>
            <remarks>
            Returns the value 0.49714987269413385435.
            </remarks>
            <lastupdated>5/27/2003 12:45:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.MolarGasConstant">
            <summary>
            Represents the molar gas constant, <format type="italics">R</format>,
            in J mol<format type="superscript"><entity value="ndash"/>1</format> 
            K<format type="superscript"><entity value="ndash"/>1</format>.
            </summary>
            <remarks>
            	<para>Returns the value 8.314472.</para>
            	<para>Source: CODATA Recommended Values of the Fundamental Physical Constants: 1998</para>
            </remarks>
            <lastupdated>5/27/2003 12:45:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.PI">
            <summary>
            Represents the value of Pi.
            </summary>
            <remarks>
            Returns the value 3.14159265358979320.
            </remarks>
            <lastupdated>5/27/2003 12:45:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.PlanckConstant">
            <summary>
            Represents Planck's constant, <format type="italics">h</format>, in J s.
            </summary>
            <remarks>
            	<para>Returns the value 6.62606876e<format type="superscript"><entity value="ndash"/>34</format>.</para>
            	<para>Source: CODATA Recommended Values of the Fundamental Physical Constants: 1998</para>
            </remarks>
            <lastupdated>5/27/2003 12:46:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.PlanckConstantOverTwoPI">
            <summary>
            Represents Planck's constant divided by two times Pi, <format type="italics">h</format>-bar, in J s.
            </summary>
            <remarks>
            	<para>Returns the value 1.054571596e<format type="superscript"><entity value="ndash"/>34</format>.</para>
            	<para>Source: CODATA Recommended Values of the Fundamental Physical Constants: 1998</para>
            </remarks>
            <lastupdated>5/27/2003 12:47:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.ReciprocalOfE">
            <summary>
            Represents the reciprocal of the base of the natural logarithm.
            </summary>
            <remarks>
            Returns the value 0.36787944117144232159552. 
            </remarks>
            <lastupdated>5/27/2003 12:47:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.ReciprocalOfPI">
            <summary>
            Represents the reciprocal of Pi. 
            </summary>
            <remarks>
            Returns the value 0.31830988618379067153.
            </remarks>
            <lastupdated>5/27/2003 12:47:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.RydbergConstant">
            <summary>
            Represents Rydberg's constant in m<format type="superscript"><entity value="ndash"/>1</format>.
            </summary>
            <remarks>
            	<para>Returns the value 10973731.568549.</para>
            	<para>Source: CODATA Recommended Values of the Fundamental Physical Constants: 1998</para>
            </remarks>
            <lastupdated>5/27/2003 12:47:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.SpeedOfLight">
            <summary>
            Represents the speed of light in vacuum in m s<format type="superscript"><entity value="ndash"/>1</format>.
            </summary>
            <remarks>
            	<para>Returns the value 299792458.</para>
            	<para>Source: CODATA Recommended Values of the Fundamental Physical Constants: 1998</para>
            </remarks>
            <lastupdated>5/27/2003 12:49:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.ThreeHalvesPI">
            <summary>
            Represents the value of Pi multiplied by 3/2.
            </summary>
            <remarks>
            Returns the value 4.71238898038468990.
            </remarks>
            <lastupdated>5/27/2003 12:49:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.TwoPI">
            <summary>
            Represents the value of Pi multiplied by 2.
            </summary>
            <remarks>
            Returns the value 6.28318530717958646.
            </remarks>
            <lastupdated>5/27/2003 12:49:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Constants.AccelerationOfGravity">
            <summary>
            Represents the adopted standard acceleration of gravity in m s<format type="superscript"><entity value="ndash"/>2</format>.
            </summary>
            <remarks>
            	<para>Returns the value 9.80665.</para>
            	<para>Source: CODATA Recommended Values of the Fundamental Physical Constants: 1998</para>
            </remarks>
            <lastupdated>5/27/2003 12:44:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Constants.#ctor">
            <exclude/>
            <lastupdated>5/8/2003 7:23:12 PM</lastupdated>
            <updatedby>Nandan</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Length">
            <summary>
            Represents a length.  Use <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> to convert lengths
            among meters, kilometers, feet, and miles.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> represents a
            length.
            </para>
            	<para>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> is created by calling 
            <see cref="M:NationalInstruments.Analysis.Conversion.Length.FromMeters(System.Double)"/>,  
            <see cref="M:NationalInstruments.Analysis.Conversion.Length.FromKilometers(System.Double)"/>,
            <see cref="M:NationalInstruments.Analysis.Conversion.Length.FromFeet(System.Double)"/>, 
            or <see cref="M:NationalInstruments.Analysis.Conversion.Length.FromMiles(System.Double)"/>.
            </para>
            	<para>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> can be retrieved
            using the properties <see cref="P:NationalInstruments.Analysis.Conversion.Length.Meters"/>, 
            <see cref="P:NationalInstruments.Analysis.Conversion.Length.Kilometers"/>, 
            <see cref="P:NationalInstruments.Analysis.Conversion.Length.Feet"/>, and 
            <see cref="P:NationalInstruments.Analysis.Conversion.Length.Miles"/>.
            </para>
            </remarks>
            <packages>
            	<package name="Professional"/>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>7/23/2004 11:47:08 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.#cctor">
            <exclude/>
            <lastupdated>5/12/2008 11:15:32 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.#ctor(System.Double,NationalInstruments.Analysis.Conversion.Length.Units)">
            <exclude/>
            <lastupdated>5/9/2003 3:10:02 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>5/12/2003 4:29:05 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.FromMeters(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> that represents the length specified
            in meters.
            </summary>
            <param name="meters">
            The length in meters.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> that represents an length of 
            <paramref name="meters"/>.
            </returns>
            <lastupdated>5/27/2003 12:01:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.FromFeet(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> that represents the length specified
            in feet.
            </summary>
            <param name="feet">
            The length in feet.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> that represents a length of
            <paramref name="feet"/>.
            </returns>
            <lastupdated>5/27/2003 12:00:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.FromMiles(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> that represents the length specified
            in miles.
            </summary>
            <param name="miles">
            The length in miles.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> that represents a length of
            <paramref name="miles"/>.
            </returns>
            <lastupdated>5/27/2003 12:01:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.FromKilometers(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> that represents the length specified
            in kilometers.
            </summary>
            <param name="kilometers">
            The length in kilometers.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> that represents a length of
            <paramref name="kilometers"/>.
            </returns>
            <lastupdated>5/27/2003 12:01:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Plus">
            <summary>
            Returns this instance of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </summary>
            <returns>
            This instance of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </returns>
            <lastupdated>5/27/2003 12:02:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.op_UnaryPlus(NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Returns the specified instance of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> (a unary plus).
            </summary>
            <param name="l">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <returns>
            	<paramref name="l"/>.
            </returns>
            <lastupdated>5/27/2003 12:01:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Negate">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> whose value is the negated value of
            this instance.  
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> whose value is the negated value of this
            instance.
            </returns>
            <lastupdated>5/27/2003 12:01:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.op_UnaryNegation(NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> whose value is the 
            negative of the specified instance (a unary minus).
            </summary>
            <param name="l">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <returns>
            The negative of <paramref name="l"/>.
            </returns>
            <lastupdated>5/27/2003 12:01:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Add(NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Adds a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> to this instance and returns a new 
            <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> representing the sum.
            </summary>
            <param name="l">
            The <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> to add to this instance.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> that represents the value of this instance
            plus the value of <paramref name="l"/>.
            </returns>
            <lastupdated>5/27/2003 11:59:59 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.op_Addition(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Adds two <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> instances.
            </summary>
            <param name="l1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <param name="l2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> whose value is the sum of 
            <paramref name="l1"/> and <paramref name="l2"/>.
            </returns>
            <lastupdated>5/27/2003 12:01:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Subtract(NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Subtracts a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> from this instance and returns a new 
            <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> representing the difference.
            </summary>
            <param name="l">
            The <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> to subtract from this instance.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> that represents the value of this instance
            minus the value of <paramref name="l"/>.
            </returns>
            <lastupdated>5/27/2003 12:02:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.op_Subtraction(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Subtracts one <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> from another.
            </summary>
            <param name="l1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <param name="l2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> whose value is the result of 
            <paramref name="l1"/> minus <paramref name="l2"/>.
            </returns>
            <lastupdated>5/27/2003 12:01:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
            <remarks>
            Two <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> objects might have the same hash code even
            though they represent different length values.
            </remarks>
            <lastupdated>5/27/2003 12:01:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Compare(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Compares two <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> values and returns an indication of
            their relative values.
            </summary>
            <param name="l1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <param name="l2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <returns>
            	<list type="table">
            		<listheader><term>Value</term><description>Condition</description></listheader>
            		<item>
            			<term>
            &lt;0
            </term>
            			<description>
            				<paramref name="l1"/> is less than <paramref name="l2"/>
            			</description>
            		</item>
            		<item>
            			<term>
            0
            </term>
            			<description>
            				<paramref name="l1"/> is equal to <paramref name="l2"/>
            			</description>
            		</item>
            		<item>
            			<term>
            &gt;0
            </term>
            			<description>
            				<paramref name="l1"/> is greater than <paramref name="l2"/>
            			</description>
            		</item>
            	</list>
            </returns>
            <lastupdated>5/27/2003 12:00:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.op_Equality(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Indicates if two <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> instances are equal.
            </summary>
            <param name="l1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <param name="l2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <returns>
            	<see langword="true"/> if the values of <paramref name="l1"/> and <paramref name="l2"/>
            are equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:39:37 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.op_Inequality(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Indicates if two <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> instances are not equal.
            </summary>
            <param name="l1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <param name="l2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <returns>
            	<see langword="true"/> if the values of <paramref name="l1"/> and <paramref name="l2"/>
            are not equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:38:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.CompareTo(System.Object)">
            <summary>
            Compares this instance with another instance of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </summary>
            <param name="obj">
            Object to compare with this instance, or <see langword="null"/>.
            </param>
            <returns>
            	<para>
            A 32-bit signed integer that indicates the relative order of the comparands. The return value has the following meanings:
            </para>
            	<list type="table">
            		<listheader><term>Value</term><description>Condition</description></listheader>
            		<item>
            			<term>
            Less than zero
            </term>
            			<description>
            The instance is less than <paramref name="obj"/>.
            </description>
            		</item>
            		<item>
            			<term>
            Zero
            </term>
            			<description>
            The instance is equal to <paramref name="obj"/>.
            </description>
            		</item>
            		<item>
            			<term>
            Greater than zero
            </term>
            			<description>
            				<para>The instance is greater than <paramref name="obj"/>.
            				</para>
            				<para>-or-</para>
            				<para><paramref name="obj"/> is <see langword="null"/>.</para>
            			</description>
            		</item>
            	</list>
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </exception>
            <lastupdated>5/27/2003 12:00:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Equals(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Returns a value indicating if two specified instances of 
            <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> are equal.
            </summary>
            <param name="l1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <param name="l2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="l1"/> and <paramref name="l2"/> are equal;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 11:49:33 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Equals(NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Returns a value indicating if this instance is equal to the specified 
            <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </summary>
            <param name="l">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> to compare with this instance.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="l"/> represents the same <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>
            as this instance;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 11:49:10 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Equals(System.Object)">
            <summary>
            Returns a value indicating if this instance is equal to the specified object.
            </summary>
            <param name="obj">
            An object to compare with this instance.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is a 
            <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> that represents the same Length as this instance;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 11:49:49 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.op_LessThan(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> is less than another.
            </summary>
            <param name="l1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <param name="l2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="l1"/> is less than 
            <paramref name="l2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:39:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.op_GreaterThan(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> is greater than another.
            </summary>
            <param name="l1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <param name="l2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="l1"/> is greater than 
            <paramref name="l2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:39:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.op_LessThanOrEqual(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> is less than or 
            equal to another.
            </summary>
            <param name="l1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <param name="l2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="l1"/> is less than or equal to
            <paramref name="l2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:39:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.op_GreaterThanOrEqual(NationalInstruments.Analysis.Conversion.Length,NationalInstruments.Analysis.Conversion.Length)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> is greater than or
            equal to another.
            </summary>
            <param name="l1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <param name="l2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="l1"/> is greater than or equal
            to <paramref name="l2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:40:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Parse(System.String)">
            <summary>
            Converts the string representation of a length to a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </summary>
            <param name="s">
            A string containing the length to convert.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> representing the length specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "ft", "feet"
            							</description>
            						</item>
            						<item>
            							<description>
            "m", "meters"
            							</description>
            						</item>
            						<item>
            							<description>
            "km", "kilometers"
            							</description>
            						</item>
            						<item>
            							<description>
            "mi", "miles"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 km", "3.1416 meters", "344.45e6 ft", and "<entity value="ndash"/>123,456,789.0 miles".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:16:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a length with a specified culture-specific format to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </summary>
            <param name="s">
            A string containing the length to convert.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> representing the length specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "ft", "feet"
            							</description>
            						</item>
            						<item>
            							<description>
            "m", "meters"
            							</description>
            						</item>
            						<item>
            							<description>
            "km", "kilometers"
            							</description>
            						</item>
            						<item>
            							<description>
            "mi", "miles"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 km", "3.1416 meters", "344.45e6 ft", and "<entity value="ndash"/>123,456,789.0 miles".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:16:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a length with a specified style to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </summary>
            <param name="s">
            A string containing the length to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> representing the length specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "ft", "feet"
            							</description>
            						</item>
            						<item>
            							<description>
            "m", "meters"
            							</description>
            						</item>
            						<item>
            							<description>
            "km", "kilometers"
            							</description>
            						</item>
            						<item>
            							<description>
            "mi", "miles"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 km", "3.1416 meters", "344.45e6 ft", and "<entity value="ndash"/>123,456,789.0 miles".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:17:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a length with a specified style and culture-specific format to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </summary>
            <param name="s">
            A string containing the length to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> representing the length specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "ft", "feet"
            							</description>
            						</item>
            						<item>
            							<description>
            "m", "meters"
            							</description>
            						</item>
            						<item>
            							<description>
            "km", "kilometers"
            							</description>
            						</item>
            						<item>
            							<description>
            "mi", "miles"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 km", "3.1416 meters", "344.45e6 ft", and "<entity value="ndash"/>123,456,789.0 miles".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:17:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,NationalInstruments.Analysis.Conversion.Length@)">
            <summary>
            Converts the string representation of a length with a specified style and culture-specific format to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Length"/>.
            </summary>
            <param name="s">
            A string containing the length to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <param name="result">
            Upon return, contains the <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> representing the length specified in <paramref name="s"/>.
            If the return value is <see langword="false"/>, <paramref name="result"/> is a length of 0 feet.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="s"/> is converted successfully.
            </returns>
            <remarks>
            	<para>
            This method is similar to the <see cref="M:NationalInstruments.Analysis.Conversion.Length.Parse(System.String)"/> method, except this method does
            not throw an exception if it fails.
            </para>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "ft", "feet"
            							</description>
            						</item>
            						<item>
            							<description>
            "m", "meters"
            							</description>
            						</item>
            						<item>
            							<description>
            "km", "kilometers"
            							</description>
            						</item>
            						<item>
            							<description>
            "mi", "miles"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 km", "3.1416 meters", "344.45e6 ft", and "<entity value="ndash"/>123,456,789.0 miles".
            </para>
            </remarks>
            <seealso cref="M:System.Double.TryParse(System.String,System.Double@)"/>
            <lastupdated>7/7/2004 4:21:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:02:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.ToString(System.String)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="format">
            	<para>The <see cref="T:System.String"/> specifying the format to use.  This can be any of the numeric format 
            strings defined for <see cref="T:System.Double"/>.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to use the default format.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:02:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="formatProvider">
            	<para>The <see cref="T:System.IFormatProvider"/> to use to format the value.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to obtain the numeric format information from the
            current locale setting of the operating system.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:02:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="format">
            	<para>The <see cref="T:System.String"/> specifying the format to use.  This can be any of the numeric format 
            strings defined for <see cref="T:System.Double"/>.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to use the default format.</para>
            </param>
            <param name="formatProvider">
            	<para>The <see cref="T:System.IFormatProvider"/> to use to format the value.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to obtain the numeric format information from the
            current locale setting of the operating system.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:02:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.Convert(NationalInstruments.Analysis.Conversion.Length.Units)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.NoConvert(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.MetersToFeet(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.KilometersToFeet(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.MilesToFeet(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.FeetToMeters(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.KilometersToMeters(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.MilesToMeters(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.FeetToKilometers(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.MetersToKilometers(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.MilesToKilometers(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.FeetToMiles(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.MetersToMiles(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.KilometersToMiles(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:09:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Length.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Length.Feet">
            <summary>
            Gets the value of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> in feet.
            </summary>
            <value>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> represented in 
            feet.
            </value>
            <lastupdated>7/23/2004 11:47:25 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Length.Meters">
            <summary>
            Gets the value of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> in meters.
            </summary>
            <value>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> represented in 
            meters.
            </value>
            <lastupdated>7/23/2004 11:47:50 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Length.Miles">
            <summary>
            Gets the value of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> in miles.
            </summary>
            <value>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> represented in 
            miles.
            </value>
            <lastupdated>7/23/2004 11:48:04 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Length.Kilometers">
            <summary>
            Gets the value of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> in kilometers.
            </summary>
            <value>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> represented in 
            kilometers.
            </value>
            <lastupdated>7/23/2004 11:47:38 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Length.Zero">
            <summary>
            Represents a length of zero.
            </summary>
            <value>
            The constant provides a convenient source for a
            <see cref="T:NationalInstruments.Analysis.Conversion.Length"/> object with a value of zero.
            </value>
            <lastupdated>7/23/2004 11:48:30 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Length.Units">
            <exclude/>
            <lastupdated>5/9/2003 3:09:18 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Length.Units.Feet">
            <exclude/>
            <lastupdated>5/9/2003 3:09:25 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Length.Units.Meters">
            <exclude/>
            <lastupdated>5/9/2003 3:09:48 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Length.Units.Kilometers">
            <exclude/>
            <lastupdated>5/9/2003 3:09:42 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Length.Units.Miles">
            <exclude/>
            <lastupdated>5/9/2003 3:09:53 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Length.ConvertDelegate">
            <exclude/>
            <lastupdated>5/12/2003 4:28:51 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Mass">
            <summary>
            Represents a mass.  Use <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> to convert masses between
            pounds and kilograms.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> represents a
            mass.
            </para>
            	<para>
            		<see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> is created either by calling 
            <see cref="M:NationalInstruments.Analysis.Conversion.Mass.FromKilograms(System.Double)"/> or
            <see cref="M:NationalInstruments.Analysis.Conversion.Mass.FromPounds(System.Double)"/>.
            </para>
            	<para>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> can be retrieved
            using the properties <see cref="P:NationalInstruments.Analysis.Conversion.Mass.Kilograms"/> and <see cref="P:NationalInstruments.Analysis.Conversion.Mass.Pounds"/>.
            </para>
            </remarks>
            <packages>
            	<package name="Professional"/>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>7/23/2004 11:56:20 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.#cctor">
            <exclude/>
            <lastupdated>5/12/2008 11:15:43 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.#ctor(System.Double,NationalInstruments.Analysis.Conversion.Mass.Units)">
            <exclude/>
            <lastupdated>5/9/2003 3:26:54 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>5/12/2003 4:29:30 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.FromKilograms(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> that represents the mass specified
            in kilograms.
            </summary>
            <param name="kilograms">
            The mass in kilograms.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> that represents a mass of 
            <paramref name="kilograms"/>.
            </returns>
            <lastupdated>5/27/2003 12:16:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.FromPounds(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> that represents the mass specified
            in pounds.
            </summary>
            <param name="pounds">
            The mass in pounds.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> that represents a mass of 
            <paramref name="pounds"/>.
            </returns>
            <lastupdated>5/27/2003 12:17:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Plus">
            <summary>
            Returns this instance of <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </summary>
            <returns>
            This instance of <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </returns>
            <lastupdated>5/27/2003 12:19:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_UnaryPlus(NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Returns the specified instance of <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> (a unary plus).
            </summary>
            <param name="m">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <returns>
            	<paramref name="m"/>.
            </returns>
            <lastupdated>5/27/2003 12:18:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Negate">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> whose value is the negated value of
            this instance.  
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> whose value is the negated value of this
            instance.
            </returns>
            <lastupdated>5/27/2003 12:18:40 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_UnaryNegation(NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> whose value is the 
            negative of the specified instance (a unary minus).
            </summary>
            <param name="m">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <returns>
            The negative of <paramref name="m"/>.
            </returns>
            <lastupdated>5/27/2003 12:18:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Add(NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Adds a <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> to this instance and returns a new 
            <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> representing the sum.
            </summary>
            <param name="m">
            The <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> to add to this instance.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> that represents the value of this instance
            plus the value of <paramref name="m"/>.
            </returns>
            <lastupdated>5/27/2003 12:16:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_Addition(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Adds two <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> instances.
            </summary>
            <param name="m1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <param name="m2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> whose value is the sum of 
            <paramref name="m1"/> and <paramref name="m2"/>.
            </returns>
            <lastupdated>5/27/2003 12:19:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Subtract(NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Subtracts a <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> from this instance and returns a new 
            <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> representing the difference.
            </summary>
            <param name="m">
            The <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> to subtract from this instance.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> that represents the value of this instance
            minus the value of <paramref name="m"/>.
            </returns>
            <lastupdated>5/27/2003 12:19:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_Subtraction(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Subtracts one <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> from another.
            </summary>
            <param name="m1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <param name="m2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> whose value is the result of 
            <paramref name="m1"/> minus <paramref name="m2"/>.
            </returns>
            <lastupdated>5/27/2003 12:18:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
            <remarks>
            Two <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> objects might have the same hash code even
            though they represent different mass values.
            </remarks>
            <lastupdated>5/27/2003 12:17:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Compare(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Compares two <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> values and returns an indication of
            their relative values.
            </summary>
            <param name="m1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <param name="m2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <returns>
            	<list type="table">
            		<listheader><term>Value</term><description>Condition</description></listheader>
            		<item>
            			<term>
            &lt;0
            </term>
            			<description>
            				<paramref name="m1"/> is less than <paramref name="m2"/>
            			</description>
            		</item>
            		<item>
            			<term>
            0
            </term>
            			<description>
            				<paramref name="m1"/> is equal to <paramref name="m2"/>
            			</description>
            		</item>
            		<item>
            			<term>
            &gt;0
            </term>
            			<description>
            				<paramref name="m1"/> is greater than <paramref name="m2"/>
            			</description>
            		</item>
            	</list>
            </returns>
            <lastupdated>5/27/2003 12:16:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_Equality(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Indicates if two <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> instances are equal.
            </summary>
            <param name="m1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <param name="m2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <returns>
            	<see langword="true"/> if the values of <paramref name="m1"/> and <paramref name="m2"/>
            are equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:40:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_Inequality(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Indicates if two <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> instances are not equal.
            </summary>
            <param name="m1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <param name="m2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <returns>
            	<see langword="true"/> if the values of <paramref name="m1"/> and <paramref name="m2"/>
            are not equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:07:37 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.CompareTo(System.Object)">
            <summary>
            Compares this instance with another instance of <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </summary>
            <param name="obj">
            Object to compare with this instance, or <see langword="null"/>.
            </param>
            <returns>
            	<para>
            A 32-bit signed integer that indicates the relative order of the comparands. The return value has the following meanings:
            </para>
            	<list type="table">
            		<listheader><term>Value</term><description>Condition</description></listheader>
            		<item>
            			<term>
            Less than zero
            </term>
            			<description>
            The instance is less than <paramref name="obj"/>.
            </description>
            		</item>
            		<item>
            			<term>
            Zero
            </term>
            			<description>
            The instance is equal to <paramref name="obj"/>.
            </description>
            		</item>
            		<item>
            			<term>
            Greater than zero
            </term>
            			<description>
            				<para>The instance is greater than <paramref name="obj"/>.
            				</para>
            				<para>-or-</para>
            				<para><paramref name="obj"/> is <see langword="null"/>.</para>
            			</description>
            		</item>
            	</list>
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not a <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </exception>
            <lastupdated>5/27/2003 12:16:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Equals(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Returns a value indicating if two specified instances of 
            <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> are equal.
            </summary>
            <param name="m1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <param name="m2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="m1"/> and <paramref name="m2"/> are equal;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:06:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Equals(NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Returns a value indicating if this instance is equal to the specified 
            <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </summary>
            <param name="m">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> to compare with this instance.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="m"/> represents the same Mass 
            as this instance;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:04:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Equals(System.Object)">
            <summary>
            Returns a value indicating if this instance is equal to the specified object.
            </summary>
            <param name="obj">
            An object to compare with this instance.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is a 
            <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> that represents the same Mass as this instance;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:07:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_LessThan(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> is less than another.
            </summary>
            <param name="m1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <param name="m2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="m1"/> is less than 
            <paramref name="m2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:40:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_GreaterThan(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> is greater than another.
            </summary>
            <param name="m1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <param name="m2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="m1"/> is greater than 
            <paramref name="m2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:41:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_LessThanOrEqual(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> is less than or 
            equal to another.
            </summary>
            <param name="m1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <param name="m2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="m1"/> is less than or equal to
            <paramref name="m2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:40:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.op_GreaterThanOrEqual(NationalInstruments.Analysis.Conversion.Mass,NationalInstruments.Analysis.Conversion.Mass)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> is greater than or
            equal to another.
            </summary>
            <param name="m1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <param name="m2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="m1"/> is greater than or equal
            to <paramref name="m2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:41:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Parse(System.String)">
            <summary>
            Converts the string representation of a mass to a <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </summary>
            <param name="s">
            A string containing the mass to convert.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> representing the mass specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.					</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "kg", "kilograms"
            							</description>
            						</item>
            						<item>
            							<description>
            "lb", "pounds"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 kg", "3.1416 pounds", "344.45e6 lb", and "<entity value="ndash"/>123,456,789.0 kilograms".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:22:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a mass with a specified culture-specific format to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </summary>
            <param name="s">
            A string containing the mass to convert.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> representing the mass specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.					</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "kg", "kilograms"
            							</description>
            						</item>
            						<item>
            							<description>
            "lb", "pounds"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 kg", "3.1416 pounds", "344.45e6 lb", and "<entity value="ndash"/>123,456,789.0 kilograms".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:24:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a mass with a specified style to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </summary>
            <param name="s">
            A string containing the mass to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> representing the mass specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.					</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "kg", "kilograms"
            							</description>
            						</item>
            						<item>
            							<description>
            "lb", "pounds"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 kg", "3.1416 pounds", "344.45e6 lb", and "<entity value="ndash"/>123,456,789.0 kilograms".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:24:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a mass with a specified style and culture-specific format to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </summary>
            <param name="s">
            A string containing the mass to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> representing the mass specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.					</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "kg", "kilograms"
            							</description>
            						</item>
            						<item>
            							<description>
            "lb", "pounds"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 kg", "3.1416 pounds", "344.45e6 lb", and "<entity value="ndash"/>123,456,789.0 kilograms".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:25:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,NationalInstruments.Analysis.Conversion.Mass@)">
            <summary>
            Converts the string representation of a mass with a specified style and culture-specific format to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/>.
            </summary>
            <param name="s">
            A string containing the mass to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <param name="result">
            Upon return, contains the <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> representing the mass specified in <paramref name="s"/>.
            If the return value is <see langword="false"/>, <paramref name="result"/> is a mass of 0 kilograms.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="s"/> is converted successfully.
            </returns>
            <remarks>
            	<para>
            This method is similar to the <see cref="M:NationalInstruments.Analysis.Conversion.Mass.Parse(System.String)"/> method, except this method does
            not throw an exception if it fails.
            </para>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.					</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "kg", "kilograms"
            							</description>
            						</item>
            						<item>
            							<description>
            "lb", "pounds"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 kg", "3.1416 pounds", "344.45e6 lb", and "<entity value="ndash"/>123,456,789.0 kilograms".
            </para>
            </remarks>
            <seealso cref="M:System.Double.TryParse(System.String,System.Double@)"/>
            <lastupdated>7/7/2004 4:29:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:19:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.ToString(System.String)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="format">
            	<para>The <see cref="T:System.String"/> specifying the format to use.  This can be any of the numeric format 
            strings defined for <see cref="T:System.Double"/>.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to use the default format.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:19:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="formatProvider">
            	<para>The <see cref="T:System.IFormatProvider"/> to use to format the value.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to obtain the numeric format information from the
            current locale setting of the operating system.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:19:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="format">
            	<para>The <see cref="T:System.String"/> specifying the format to use.  This can be any of the numeric format 
            strings defined for <see cref="T:System.Double"/>.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to use the default format.</para>
            </param>
            <param name="formatProvider">
            	<para>The <see cref="T:System.IFormatProvider"/> to use to format the value.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to obtain the numeric format information from the
            current locale setting of the operating system.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:19:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.Convert(NationalInstruments.Analysis.Conversion.Mass.Units)">
            <exclude/>
            <lastupdated>5/9/2003 3:24:03 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.NoConvert(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:24:03 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.KilogramsToPounds(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:24:03 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.PoundsToKilograms(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:24:03 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Mass.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Mass.Kilograms">
            <summary>
            Gets the value of <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> in kilograms.
            </summary>
            <value>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> represented in 
            kilograms.
            </value>
            <lastupdated>7/23/2004 11:56:40 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Mass.Pounds">
            <summary>
            Gets the value of <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> in pounds.
            </summary>
            <value>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> represented in 
            pounds.
            </value>
            <lastupdated>7/23/2004 11:56:54 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Mass.Zero">
            <summary>
            Represents a mass of zero.
            </summary>
            <value>
            The constant provides a convenient source for a
            <see cref="T:NationalInstruments.Analysis.Conversion.Mass"/> object with a value of zero.
            </value>
            <lastupdated>7/23/2004 12:02:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Mass.Units">
            <exclude/>
            <lastupdated>5/9/2003 3:20:23 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Mass.Units.Kilograms">
            <exclude/>
            <lastupdated>5/9/2003 3:20:28 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Mass.Units.Pounds">
            <exclude/>
            <lastupdated>5/9/2003 3:20:31 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Mass.ConvertDelegate">
            <exclude/>
            <lastupdated>5/12/2003 4:29:19 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Point2D">
            <summary>
            Represents a point in two-dimensional space.  Use <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>
            to convert coordinates between rectangular and polar representations.</summary>
            <threadsafety safety="unsafe"/>
            <remarks>Represents a point in two-dimensional space.
            </remarks>
            <lastupdated>5/27/2012 2:05:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.#cctor">
            <exclude/>
            <lastupdated>5/12/2008 11:15:54 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.#ctor(System.Double,System.Double)">
            <exclude/>
            <lastupdated>5/12/2003 4:23:57 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>5/12/2003 4:24:01 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.FromRectangular(System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents a two-dimensional point with the specified
            x and y coordinates.
            </summary>
            <param name="x">
            The x-coordinate.
            </param>
            <param name="y">
            The y-coordinate.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents a two-dimensional point at the rectangular coordinates 
            (<paramref name="x"/>, <paramref name="y"/>).
            </returns>
            <lastupdated>5/27/2003 12:27:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.FromPolar(System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents a two-dimensional point with the specified 
            distance and angle.
            </summary>
            <param name="r">
            The polar coordinate <format type="italics">r</format>, the distance from the origin.
            </param>
            <param name="theta">
            The polar coordinate <format type="italics">theta</format>, the angle from the positive x-axis.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents a point with the polar coordinates
            (<paramref name="r"/>, <paramref name="theta"/>).</returns>
            <lastupdated>6/17/2003 10:17:38 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Plus">
            <summary>
            Returns this instance of the <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> (unary plus).
            </summary>
            <returns>
            This instance of the <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </returns>
            <lastupdated>2/21/2003 9:56:51 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_UnaryPlus(NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Returns the specified instance of the <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> (unary plus).
            </summary>
            <param name="p">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <returns>
            The specified instance of <paramref name="p"/>.
            </returns>
            <lastupdated>5/27/2003 12:28:40 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Negate">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> with a value that is 
            the negated value of this object (unary minus).
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> with a value that is the negated value 
            of this object.
            </returns>
            <lastupdated>2/21/2003 9:56:33 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_UnaryNegation(NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> with a value that is the negative of the specified 
            object (unary minus).
            </summary>
            <param name="p">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> with a value that is the negative of <paramref name="p"/>.
            </returns>
            <lastupdated>5/27/2003 12:28:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Add(NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Adds the value of the specified <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> to this object and returns a 
            new <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents the sum.
            </summary>
            <param name="p">
            The <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> to add to this object.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents the value of this 
            object plus the value of <paramref name="p"/>.
            </returns>
            <lastupdated>5/27/2003 12:26:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_Addition(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Adds the values of two <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> objects.
            </summary>
            <param name="p1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <param name="p2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> with a value that is the sum of 
            <paramref name="p1"/> and <paramref name="p2"/>.
            </returns>
            <lastupdated>5/27/2003 12:28:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Subtract(NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Subtracts the value of a <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> from this object and 
            returns a new <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents the difference.
            </summary>
            <param name="p">
            The <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> to subtract from this object.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents the value of this
            object minus the value of <paramref name="p"/>.
            </returns>
            <lastupdated>5/27/2003 12:28:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_Subtraction(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Subtracts the value of one <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> from the value of another <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </summary>
            <param name="p1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <param name="p2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> with a value that is the result of 
            <paramref name="p1"/> minus <paramref name="p2"/>.
            </returns>
            <lastupdated>5/27/2003 12:28:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Multiply(NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Multiplies a <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> with this object and 
            returns a new <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents the product.
            </summary>
            <param name="p">
            The <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> to multiply with this object.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents the value of this
            object times the value of <paramref name="p"/>.
            </returns>
            <lastupdated>5/27/2003 12:27:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_Multiply(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Multiplies the values of two <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> objects.
            </summary>
            <param name="p1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <param name="p2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> with a value that is the product of 
            <paramref name="p1"/> and <paramref name="p2"/>.
            </returns>
            <lastupdated>5/27/2003 12:28:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Divide(NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Divides this object by a <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> and returns
            a new <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents the result.
            </summary>
            <param name="p">
            The <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> by which to divide this object.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents the value of this
            object divided by the value of <paramref name="p"/>.
            </returns>
            <lastupdated>5/27/2003 12:26:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_Division(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Divides the value of a <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> by the value of another <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </summary>
            <param name="p1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <param name="p2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> with a value that equal to is 
            <paramref name="p1"/> divided by <paramref name="p2"/>.
            </returns>
            <lastupdated>5/27/2003 12:28:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
            <remarks>
            Two <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> objects might have the same hash 
            code even though they represent different values.
            </remarks>
            <lastupdated>2/21/2003 9:56:25 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_Equality(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Returns if two <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> objects are 
            equal.
            </summary>
            <param name="p1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <param name="p2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <returns>
            	<see langword="true"/> if the values of <paramref name="p1"/> and <paramref name="p2"/>
            are equal.
            </returns>
            <lastupdated>5/27/2003 12:28:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.op_Inequality(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Returns if two <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> objects are 
            not equal.
            </summary>
            <param name="p1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <param name="p2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <returns>
            	<see langword="true"/> if the values of <paramref name="p1"/> and <paramref name="p2"/>
            are not equal.
            </returns>
            <lastupdated>5/27/2003 12:28:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Equals(NationalInstruments.Analysis.Conversion.Point2D,NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Returns a value that indicates if two specified <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> objects are equal.
            </summary>
            <param name="p1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <param name="p2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="p1"/> and <paramref name="p2"/> are equal.
            </returns>
            <lastupdated>5/27/2003 12:26:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Equals(System.Object)">
            <summary>
            Returns a value that indicates if this object is equal to the specified object.
            </summary>
            <param name="obj">
            An object to compare with this object.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is a
            <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> that represents the same value as this object.
            </returns>
            <lastupdated>2/21/2003 9:56:21 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.Equals(NationalInstruments.Analysis.Conversion.Point2D)">
            <summary>
            Returns a value that indicates if this object is equal to the specified 
            <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </summary>
            <param name="p">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> to compare with this object.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="p"/> represents the same value  
            as this object.
            </returns>
            <lastupdated>5/27/2003 12:26:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <lastupdated>2/21/2003 9:56:56 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the value of this object using the specified format and culture-specific 
            formatting information.
            </summary>
            <param name="format">
            	The <see cref="T:System.String"/> that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for <see cref="T:System.Double"/> and is applied to the coordinates of the point.
             If <paramref name="format"/> is <see langword="null"/>,  the return value uses the default format.</param>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> to use to format the value.  This <see cref="T:System.IFormatProvider"/> is
            applied to the coordinates of the point. If <paramref name="formatProvider"/> is <see langword="null"/>, the return value uses
            the numeric format information from the current locale setting of the operating system.
            </param>
            <returns>
            A string representation of this object as specified by <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
            <lastupdated>5/27/2003 12:30:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.ToString(System.String)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the value of this object using the specified format.
            </summary>
            <param name="format">
            The <see cref="T:System.String"/> that specifies the format to use.  This value can be any of the numeric format 
            strings that are defined for <see cref="T:System.Double"/> and is applied to the coordinates of the point.
             If <paramref name="format"/> is <see langword="null"/>, the return value uses the default format.
            </param>
            <returns>
            A string representation of this object as specified by <paramref name="format"/>.
            </returns>
            <lastupdated>5/27/2003 12:29:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.ToString(System.IFormatProvider)">
            <summary>
            Returns the <see cref="T:System.String"/> representation of the value of this object using the specified culture-specific formatting information.
            </summary>
            <param name="formatProvider">
            The <see cref="T:System.IFormatProvider"/> to use to format the value.  This <see cref="T:System.IFormatProvider"/> is
            applied to the coordinates of the point. If <paramref name="formatProvider"/> is <see langword="null"/>, the return value uses
             the numeric format information from the current locale setting of the operating system.
            </param>
            <returns>
            A string representation of this object as specified by <paramref name="formatProvider"/>.
            </returns>
            <lastupdated>5/27/2003 12:29:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Point2D.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Point2D.X">
            <summary>
            Gets the rectangular x-coordinate of the <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </summary>
            <value>
            The rectangular x-coordinate of the <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </value>
            <lastupdated>5/27/2003 12:25:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Point2D.Y">
            <summary>
            Gets the rectangular y-coordinate of the <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </summary>
            <value>
            The rectangular y-coordinate of the <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </value>
            <lastupdated>5/27/2003 12:25:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Point2D.R">
            <summary>
            Gets the polar coordinate <format type="italics">r</format> of the <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </summary>
            <value>
            The polar coordinate <format type="italics">r</format>, the distance from the origin, of the 
            <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </value>
            <lastupdated>5/27/2003 12:25:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Point2D.Theta">
            <summary>
            Gets the polar coordinate <format type="italics">theta</format> of the <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </summary>
            <value>
            The polar coordinate <format type="italics">theta</format>, the angle from the positive x-axis, of the <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/>.
            </value>
            <lastupdated>6/17/2003 10:17:03 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Point2D.Origin">
            <summary>
            Gets the point (0, 0).
            </summary>
            <value>
            The point (0, 0).
            </value>
            <remarks>
            This property provides a convenient source for an object of a 
            <see cref="T:NationalInstruments.Analysis.Conversion.Point2D"/> with a value of (0, 0).
            </remarks>
            <lastupdated>5/27/2003 12:24:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Temperature">
            <summary>
            Represents a temperature.  Use <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> to
            convert temperatures among Kelvin, Celsius, Fahrenheit, and Rankine.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> represents a
            temperature.
            </para>
            	<para>
            		<see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> is created by calling 
            <see cref="M:NationalInstruments.Analysis.Conversion.Temperature.FromKelvin(System.Double)"/>, 
            <see cref="M:NationalInstruments.Analysis.Conversion.Temperature.FromCelsius(System.Double)"/>, 
            <see cref="M:NationalInstruments.Analysis.Conversion.Temperature.FromFahrenheit(System.Double)"/>,
            or <see cref="M:NationalInstruments.Analysis.Conversion.Temperature.FromRankine(System.Double)"/>.
            </para>
            	<para>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> can be retrieved
            using the properties <see cref="P:NationalInstruments.Analysis.Conversion.Temperature.Kelvin"/>,
            <see cref="P:NationalInstruments.Analysis.Conversion.Temperature.Celsius"/>, 
            <see cref="P:NationalInstruments.Analysis.Conversion.Temperature.Fahrenheit"/>, 
            and <see cref="P:NationalInstruments.Analysis.Conversion.Temperature.Rankine"/>.
            </para>
            </remarks>
            <packages>
            	<package name="Professional"/>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>7/23/2004 4:19:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.#cctor">
            <exclude/>
            <lastupdated>5/12/2008 11:16:05 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.#ctor(System.Double,NationalInstruments.Analysis.Conversion.Temperature.Units)">
            <exclude/>
            <lastupdated>5/9/2003 3:54:25 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>5/12/2003 4:30:07 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.FromKelvin(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> that represents the temperature specified
            in Kelvin.
            </summary>
            <param name="kelvin">
            The temperature in Kelvin.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> that represents a temperature of
            <paramref name="kelvin"/>.
            </returns>
            <lastupdated>5/27/2003 12:32:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.FromCelsius(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> that represents the temperature specified
            in degrees Celsius.
            </summary>
            <param name="degreesCelsius">
            The temperature in degrees Celsius.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> that represents a temperature of
            <paramref name="degreesCelsius"/>.
            </returns>
            <lastupdated>5/27/2003 12:32:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.FromFahrenheit(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> that represents the temperature specified
            in degrees Fahrenheit.
            </summary>
            <param name="degreesFahrenheit">
            The temperature in degrees Fahrenheit.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> that represents a temperature of
            <paramref name="degreesFahrenheit"/>.
            </returns>
            <lastupdated>5/27/2003 12:32:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.FromRankine(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> that represents the temperature specified
            in degrees Rankine.
            </summary>
            <param name="degreesRankine">
            The temperature in degrees Rankine.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> that represents a temperature of
            <paramref name="degreesRankine"/>.
            </returns>
            <lastupdated>5/27/2003 12:32:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
            <remarks>
            Two <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> objects might have the same hash code even
            though they represent different temperature values.
            </remarks>
            <lastupdated>5/27/2003 12:32:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Compare(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
            <summary>
            Compares two <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> values and returns an indication of
            their relative values.
            </summary>
            <param name="t1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <param name="t2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <returns>
            	<list type="table">
            		<listheader><term>Value</term><description>Condition</description></listheader>
            		<item>
            			<term>
            &lt;0
            </term>
            			<description>
            				<paramref name="t1"/> is less than <paramref name="t2"/>
            			</description>
            		</item>
            		<item>
            			<term>
            0
            </term>
            			<description>
            				<paramref name="t1"/> is equal to <paramref name="t2"/>
            			</description>
            		</item>
            		<item>
            			<term>
            &gt;0
            </term>
            			<description>
            				<paramref name="t1"/> is greater than <paramref name="t2"/>
            			</description>
            		</item>
            	</list>
            </returns>
            <lastupdated>5/27/2003 12:31:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.op_Equality(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
            <summary>
            Indicates if two <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> instances are equal.
            </summary>
            <param name="t1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <param name="t2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <returns>
            	<see langword="true"/> if the values of <paramref name="t1"/> and <paramref name="t2"/>
            are equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:44:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.op_Inequality(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
            <summary>
            Indicates if two <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> instances are not equal.
            </summary>
            <param name="t1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <param name="t2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <returns>
            	<see langword="true"/> if the values of <paramref name="t1"/> and <paramref name="t2"/>
            are not equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:43:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.CompareTo(System.Object)">
            <summary>
            Compares this instance with another instance of <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </summary>
            <param name="obj">
            Object to compare with this instance, or <see langword="null"/>.
            </param>
            <returns>
            	<para>
            A 32-bit signed integer that indicates the relative order of the comparands. The return value has the following meanings:
            </para>
            	<list type="table">
            		<listheader><term>Value</term><description>Condition</description></listheader>
            		<item>
            			<term>
            Less than zero
            </term>
            			<description>
            The instance is less than <paramref name="obj"/>.
            </description>
            		</item>
            		<item>
            			<term>
            Zero
            </term>
            			<description>
            The instance is equal to <paramref name="obj"/>.
            </description>
            		</item>
            		<item>
            			<term>
            Greater than zero
            </term>
            			<description>
            				<para>The instance is greater than <paramref name="obj"/>.
            				</para>
            				<para>-or-</para>
            				<para><paramref name="obj"/> is <see langword="null"/>.</para>
            			</description>
            		</item>
            	</list>
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not a <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </exception>
            <lastupdated>5/27/2003 12:31:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Equals(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
            <summary>
            Returns a value indicating if two specified instances of 
            <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> are equal.
            </summary>
            <param name="t1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <param name="t2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="t1"/> and <paramref name="t2"/> are equal;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:43:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Equals(NationalInstruments.Analysis.Conversion.Temperature)">
            <summary>
            Returns a value indicating if this instance is equal to the specified 
            <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </summary>
            <param name="t">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> to compare with this instance.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="t"/> represents the same temperature 
            as this instance;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:43:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Equals(System.Object)">
            <summary>
            Returns a value indicating if this instance is equal to the specified object.
            </summary>
            <param name="obj">
            An object to compare with this instance.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is a 
            <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> that represents the same temperature ts this instance;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:41:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.op_LessThan(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> is less than another.
            </summary>
            <param name="t1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <param name="t2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="t1"/> is less than 
            <paramref name="t2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:41:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.op_GreaterThan(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> is greater than another.
            </summary>
            <param name="t1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <param name="t2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="t1"/> is greater than 
            <paramref name="t2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:42:14 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.op_LessThanOrEqual(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> is less than or 
            equal to another.
            </summary>
            <param name="t1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <param name="t2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="t1"/> is less than or equal to
            <paramref name="t2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:41:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.op_GreaterThanOrEqual(NationalInstruments.Analysis.Conversion.Temperature,NationalInstruments.Analysis.Conversion.Temperature)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> is greater than or
            equal to another.
            </summary>
            <param name="t1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <param name="t2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="t1"/> is greater than or equal
            to <paramref name="t2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:42:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Parse(System.String)">
            <summary>
            Converts the string representation of a temperature to a <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </summary>
            <param name="s">
            A string containing the temperature to convert.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> representing the temperature specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.
            				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "K", "Kelvin"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºC", "C", "Celsius"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºF", "F", "Fahrenheit"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºR", "R", "Rankine"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 ºF", "3.1416 Celsius", "344.45e6 K", and "<entity value="ndash"/>123,456,789.0 Rankine".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:32:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a temperature with a specified culture-specific format to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </summary>
            <param name="s">
            A string containing the temperature to convert.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> representing the temperature specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.
            				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "K", "Kelvin"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºC", "C", "Celsius"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºF", "F", "Fahrenheit"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºR", "R", "Rankine"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 ºF", "3.1416 Celsius", "344.45e6 K", and "<entity value="ndash"/>123,456,789.0 Rankine".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:33:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a temperature with a specified style to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </summary>
            <param name="s">
            A string containing the temperature to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> representing the temperature specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.
            				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "K", "Kelvin"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºC", "C", "Celsius"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºF", "F", "Fahrenheit"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºR", "R", "Rankine"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 ºF", "3.1416 Celsius", "344.45e6 K", and "<entity value="ndash"/>123,456,789.0 Rankine".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:33:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a temperature with a specified style and culture-specific format to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </summary>
            <param name="s">
            A string containing the temperature to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> representing the temperature specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.
            				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "K", "Kelvin"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºC", "C", "Celsius"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºF", "F", "Fahrenheit"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºR", "R", "Rankine"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 ºF", "3.1416 Celsius", "344.45e6 K", and "<entity value="ndash"/>123,456,789.0 Rankine".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:34:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,NationalInstruments.Analysis.Conversion.Temperature@)">
            <summary>
            Converts the string representation of a temperature with a specified style and culture-specific format to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/>.
            </summary>
            <param name="s">
            A string containing the temperature to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <param name="result">
            Upon return, contains the <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> representing the temperature specified in <paramref name="s"/>.
            If the return value is <see langword="false"/>, <paramref name="result"/> is a temperature of 0 Celsius.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="s"/> is converted successfully.
            </returns>
            <remarks>
            	<para>
            This method is similar to the <see cref="M:NationalInstruments.Analysis.Conversion.Temperature.Parse(System.String)"/> method, except this method does
            not throw an exception if it fails.
            </para>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.
            				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "K", "Kelvin"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºC", "C", "Celsius"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºF", "F", "Fahrenheit"
            							</description>
            						</item>
            						<item>
            							<description>
            "ºR", "R", "Rankine"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 ºF", "3.1416 Celsius", "344.45e6 K", and "<entity value="ndash"/>123,456,789.0 Rankine".
            </para>
            </remarks>
            <seealso cref="M:System.Double.TryParse(System.String,System.Double@)"/>
            <lastupdated>7/7/2004 4:35:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:33:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.ToString(System.String)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="format">
            	<para>The <see cref="T:System.String"/> specifying the format to use.  This can be any of the numeric format 
            strings defined for <see cref="T:System.Double"/>.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to use the default format.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:33:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="formatProvider">
            	<para>The <see cref="T:System.IFormatProvider"/> to use to format the value.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to obtain the numeric format information from the
            current locale setting of the operating system.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:33:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="format">
            	<para>The <see cref="T:System.String"/> specifying the format to use.  This can be any of the numeric format 
            strings defined for <see cref="T:System.Double"/>.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to use the default format.</para>
            </param>
            <param name="formatProvider">
            	<para>The <see cref="T:System.IFormatProvider"/> to use to format the value.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to obtain the numeric format information from the
            current locale setting of the operating system.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:33:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.Convert(NationalInstruments.Analysis.Conversion.Temperature.Units)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.NoConvert(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.KelvinToCelsius(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.KelvinToFahrenheit(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.KelvinToRankine(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.CelsiusToKelvin(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.CelsiusToFahrenheit(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.CelsiusToRankine(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.FahrenheitToKelvin(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.FahrenheitToCelsius(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.FahrenheitToRankine(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.RankineToKelvin(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.RankineToCelsius(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.RankineToFahrenheit(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 3:49:52 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Temperature.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Temperature.Kelvin">
            <summary>
            Gets the value of <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> in Kelvin.
            </summary>
            <value>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> represented in 
            Kelvin.
            </value>
            <lastupdated>7/23/2004 12:40:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Temperature.Celsius">
            <summary>
            Gets the value of <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> in degrees Celsius.
            </summary>
            <value>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> represented in 
            degrees Celsius.
            </value>
            <lastupdated>7/23/2004 12:39:53 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Temperature.Fahrenheit">
            <summary>
            Gets the value of <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> in degrees Fahrenheit.
            </summary>
            <value>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> represented in 
            degrees Fahrenheit.
            </value>
            <lastupdated>7/23/2004 12:40:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Temperature.Rankine">
            <summary>
            Gets the value of <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> in degrees Rankine.
            </summary>
            <value>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> represented in 
            degrees Rankine.
            </value>
            <lastupdated>7/23/2004 12:41:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Temperature.AbsoluteZero">
            <summary>
            Represents a temperature of absolute zero.
            </summary>
            <value>
            The constant provides a convenient source for a
            <see cref="T:NationalInstruments.Analysis.Conversion.Temperature"/> object with a value of absolute zero.
            </value>
            <lastupdated>7/23/2004 12:39:30 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Temperature.Units">
            <exclude/>
            <lastupdated>5/9/2003 3:43:34 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Temperature.Units.Kelvin">
            <exclude/>
            <lastupdated>5/9/2003 3:43:48 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Temperature.Units.Celsius">
            <exclude/>
            <lastupdated>5/9/2003 3:43:42 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Temperature.Units.Fahrenheit">
            <exclude/>
            <lastupdated>5/9/2003 3:43:45 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Temperature.Units.Rankine">
            <exclude/>
            <lastupdated>5/9/2003 3:43:51 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Temperature.ConvertDelegate">
            <exclude/>
            <lastupdated>5/12/2003 4:29:43 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Volume">
            <summary>
            Represents a volume.  Use <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> to convert volumes
            between liters and U.S. gallons.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> represents a
            volume.
            </para>
            	<para>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> is created by calling 
            <see cref="M:NationalInstruments.Analysis.Conversion.Volume.FromLiters(System.Double)"/> or 
            <see cref="M:NationalInstruments.Analysis.Conversion.Volume.FromUSGallons(System.Double)"/>.
            </para>
            	<para>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> can be retrieved
            using the properties <see cref="P:NationalInstruments.Analysis.Conversion.Volume.Liters"/> and
            <see cref="P:NationalInstruments.Analysis.Conversion.Volume.USGallons"/>.
            </para>
            </remarks>
            <packages>
            	<package name="Professional"/>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>7/23/2004 12:46:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.#cctor">
            <exclude/>
            <lastupdated>5/12/2008 11:16:13 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.#ctor(System.Double,NationalInstruments.Analysis.Conversion.Volume.Units)">
            <exclude/>
            <lastupdated>5/9/2003 5:02:56 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>5/12/2003 4:30:28 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.FromLiters(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> that represents the volume specified
            in liters.
            </summary>
            <param name="liters">
            The volume in liters.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> that represents a volume of 
            <paramref name="liters"/>.
            </returns>
            <lastupdated>5/27/2003 12:34:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.FromUSGallons(System.Double)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> that represents the volume specified
            in U.S. gallons.
            </summary>
            <param name="usGallons">
            The volume in U.S. gallons.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> that represents a volume of 
            <paramref name="usGallons"/>.
            </returns>
            <lastupdated>5/27/2003 12:35:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Plus">
            <summary>
            Returns this instance of <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </summary>
            <returns>
            This instance of <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </returns>
            <lastupdated>5/27/2003 12:35:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_UnaryPlus(NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Returns the specified instance of <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> (a unary plus).
            </summary>
            <param name="v">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <returns>
            	<paramref name="v"/>.
            </returns>
            <lastupdated>5/27/2003 12:35:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Negate">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> whose value is the negated value of
            this instance.  
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> whose value is the negated value of this
            instance.
            </returns>
            <lastupdated>5/27/2003 12:35:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_UnaryNegation(NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Returns a <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> whose value is the 
            negative of the specified instance (a unary minus).
            </summary>
            <param name="v">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <returns>
            The negative of <paramref name="v"/>.
            </returns>
            <lastupdated>5/27/2003 12:35:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Add(NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Adds a <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> to this instance and returns a new 
            <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> representing the sum.
            </summary>
            <param name="v">
            The <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> to add to this instance.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> that represents the value of this instance
            plus the value of <paramref name="v"/>.
            </returns>
            <lastupdated>5/27/2003 12:34:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_Addition(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Adds two <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> instances.
            </summary>
            <param name="v1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <param name="v2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> whose value is the sum of 
            <paramref name="v1"/> and <paramref name="v2"/>.
            </returns>
            <lastupdated>5/27/2003 12:35:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Subtract(NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Subtracts a <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> from this instance and returns a new 
            <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> representing the difference.
            </summary>
            <param name="v">
            The <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> to subtract from this instance.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> that represents the value of this instance
            minus the value of <paramref name="v"/>.
            </returns>
            <lastupdated>5/27/2003 12:35:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_Subtraction(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Subtracts one <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> from another.
            </summary>
            <param name="v1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <param name="v2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> whose value is the result of 
            <paramref name="v1"/> minus <paramref name="v2"/>.
            </returns>
            <lastupdated>5/27/2003 12:35:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
            <remarks>
            Two <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> objects might have the same hash code even
            though they represent different volume values.
            </remarks>
            <lastupdated>5/27/2003 12:35:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Compare(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Compares two <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> values and returns an indication of
            their relative values.
            </summary>
            <param name="v1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <param name="v2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <returns>
            	<list type="table">
            		<listheader><term>Value</term><description>Condition</description></listheader>
            		<item>
            			<term>
            &lt;0
            </term>
            			<description>
            				<paramref name="v1"/> is less than <paramref name="v2"/>
            			</description>
            		</item>
            		<item>
            			<term>
            0
            </term>
            			<description>
            				<paramref name="v1"/> is equal to <paramref name="v2"/>
            			</description>
            		</item>
            		<item>
            			<term>
            &gt;0
            </term>
            			<description>
            				<paramref name="v1"/> is greater than <paramref name="v2"/>
            			</description>
            		</item>
            	</list>
            </returns>
            <lastupdated>5/27/2003 12:34:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_Equality(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Indicates if two <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> instances are equal.
            </summary>
            <param name="v1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <param name="v2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <returns>
            	<see langword="true"/> if the values of <paramref name="v1"/> and <paramref name="v2"/>
            are equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:50:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_Inequality(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Indicates if two <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> instances are not equal.
            </summary>
            <param name="v1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <param name="v2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <returns>
            	<see langword="true"/> if the values of <paramref name="v1"/> and <paramref name="v2"/>
            are not equal; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:49:33 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.CompareTo(System.Object)">
            <summary>
            Compares this instance with another instance of <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </summary>
            <param name="obj">
            Object to compare with this instance, or <see langword="null"/>.
            </param>
            <returns>
            	<para>
            A 32-bit signed integer that indicates the relative order of the comparands. The return value has the following meanings:
            </para>
            	<list type="table">
            		<listheader><term>Value</term><description>Condition</description></listheader>
            		<item>
            			<term>
            Less than zero
            </term>
            			<description>
            The instance is less than <paramref name="obj"/>.
            </description>
            		</item>
            		<item>
            			<term>
            Zero
            </term>
            			<description>
            The instance is equal to <paramref name="obj"/>.
            </description>
            		</item>
            		<item>
            			<term>
            Greater than zero
            </term>
            			<description>
            				<para>The instance is greater than <paramref name="obj"/>.
            				</para>
            				<para>-or-</para>
            				<para><paramref name="obj"/> is <see langword="null"/>.</para>
            			</description>
            		</item>
            	</list>
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not a <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </exception>
            <lastupdated>5/27/2003 12:34:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Equals(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Returns a value indicating if two specified instances of 
            <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> are equal.
            </summary>
            <param name="v1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <param name="v2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="v1"/> and <paramref name="v2"/> are equal;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:49:04 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Equals(NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Returns a value indicating if this instance is equal to the specified 
            <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </summary>
            <param name="v">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> to compare with this instance.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="v"/> represents the same volume 
            as this instance;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:48:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Equals(System.Object)">
            <summary>
            Returns a value indicating if this instance is equal to the specified object.
            </summary>
            <param name="obj">
            An object to compare with this instance.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is a 
            <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> that represents the same volume as this instance;
            otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 12:48:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_LessThan(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> is less than another.
            </summary>
            <param name="v1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <param name="v2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="v1"/> is less than 
            <paramref name="v2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:42:45 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_GreaterThan(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> is greater than another.
            </summary>
            <param name="v1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <param name="v2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="v1"/> is greater than 
            <paramref name="v2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:43:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_LessThanOrEqual(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> is less than or 
            equal to another.
            </summary>
            <param name="v1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <param name="v2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="v1"/> is less than or equal to
            <paramref name="v2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:43:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.op_GreaterThanOrEqual(NationalInstruments.Analysis.Conversion.Volume,NationalInstruments.Analysis.Conversion.Volume)">
            <summary>
            Indicates if one <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> is greater than or
            equal to another.
            </summary>
            <param name="v1">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <param name="v2">
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="v1"/> is greater than or equal
            to <paramref name="v2"/>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>7/23/2004 1:43:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Parse(System.String)">
            <summary>
            Converts the string representation of a volume to a <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </summary>
            <param name="s">
            A string containing the volume to convert.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> representing the volume specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "L", "liters"
            							</description>
            						</item>
            						<item>
            							<description>
            "gal", "gallons"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 gal", "3.1416 L", "344.45e6 gallons", and "<entity value="ndash"/>123,456,789.0 liters".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:37:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a volume with a specified culture-specific format to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </summary>
            <param name="s">
            A string containing the volume to convert.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> representing the volume specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "L", "liters"
            							</description>
            						</item>
            						<item>
            							<description>
            "gal", "gallons"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 gal", "3.1416 L", "344.45e6 gallons", and "<entity value="ndash"/>123,456,789.0 liters".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:38:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a volume with a specified style to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </summary>
            <param name="s">
            A string containing the volume to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> representing the volume specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "L", "liters"
            							</description>
            						</item>
            						<item>
            							<description>
            "gal", "gallons"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 gal", "3.1416 L", "344.45e6 gallons", and "<entity value="ndash"/>123,456,789.0 liters".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:38:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a volume with a specified style and culture-specific format to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </summary>
            <param name="s">
            A string containing the volume to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> representing the volume specified in <paramref name="s"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="s"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            	<paramref name="s"/> is not a length in a valid format.
            </exception>
            <remarks>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "L", "liters"
            							</description>
            						</item>
            						<item>
            							<description>
            "gal", "gallons"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 gal", "3.1416 L", "344.45e6 gallons", and "<entity value="ndash"/>123,456,789.0 liters".
            </para>
            </remarks>
            <seealso cref="M:System.Double.Parse(System.String)"/>
            <lastupdated>7/7/2004 4:39:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,NationalInstruments.Analysis.Conversion.Volume@)">
            <summary>
            Converts the string representation of a volume with a specified style and culture-specific format to
            a <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/>.
            </summary>
            <param name="s">
            A string containing the volume to convert.
            </param>
            <param name="style">
            The combination of one or more <see cref="T:System.Globalization.NumberStyles"/> constants that indicate the permitted
            format of <paramref name="s"/>.
            </param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about
            <paramref name="s"/>.
            </param>
            <param name="result">
            Upon return, contains the <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> representing the volume specified in <paramref name="s"/>.
            If the return value is <see langword="false"/>, <paramref name="result"/> is a volume of 0 Liters.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="s"/> is converted successfully.
            </returns>
            <remarks>
            	<para>
            This method is similar to the <see cref="M:NationalInstruments.Analysis.Conversion.Volume.Parse(System.String)"/> method, except this method does
            not throw an exception if it fails.
            </para>
            The <paramref name="s"/> parameter is a string of the following form:
            <para>
            		<format type="monospace">[ws]double[ws]unit[ws]</format>
            	</para>
            	<note type="note">
            Optional items are framed in square brackets, [ and ].
            </note>
            	<para>
            		<list type="table" bordered="true">
            			<listheader>
            				<term>Symbol</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>
            ws
            </term>
            				<description>
            A series of white space characters.
            </description>
            			</item>
            			<item>
            				<term>
            double
            				</term>
            				<description>
            A valid double string. Refer to <see cref="M:System.Double.Parse(System.String)"/> for more information.				</description>
            			</item>
            			<item>
            				<term>
            unit
            				</term>
            				<description>
            The unit can be followed by an optional period.  A valid unit is one of the following strings:
            <list type="bullet">
            						<item>
            							<description>
            "L", "liters"
            							</description>
            						</item>
            						<item>
            							<description>
            "gal", "gallons"
            							</description>
            						</item>
            					</list>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            Some examples of <paramref name="s"/> are "100 gal", "3.1416 L", "344.45e6 gallons", and "<entity value="ndash"/>123,456,789.0 liters".
            </para>
            </remarks>
            <seealso cref="M:System.Double.TryParse(System.String,System.Double@)"/>
            <lastupdated>7/7/2004 4:40:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:35:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.ToString(System.String)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="format">
            	<para>The <see cref="T:System.String"/> specifying the format to use.  This can be any of the numeric format 
            strings defined for <see cref="T:System.Double"/>.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to use the default format.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:36:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="formatProvider">
            	<para>The <see cref="T:System.IFormatProvider"/> to use to format the value.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to obtain the numeric format information from the
            current locale setting of the operating system.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:36:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <param name="format">
            	<para>The <see cref="T:System.String"/> specifying the format to use.  This can be any of the numeric format 
            strings defined for <see cref="T:System.Double"/>.</para>
            	<para>-or-</para>
            	<para><see langword="null"/> to use the default format.</para>
            </param>
            <param name="formatProvider">
            	<para>The <see cref="T:System.IFormatProvider"/> to use to format the value.</para>
            	<para>-or</para>
            	<para><see langword="null"/> to obtain the numeric format information from the
            current locale setting of the operating system.</para>
            </param>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>5/27/2003 12:36:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.Convert(NationalInstruments.Analysis.Conversion.Volume.Units)">
            <exclude/>
            <lastupdated>5/9/2003 4:48:49 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.NoConvert(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 4:48:49 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.USGallonsToLiters(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 4:48:49 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.LitersToUSGallons(System.Double)">
            <exclude/>
            <lastupdated>5/9/2003 4:48:49 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Conversion.Volume.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Volume.Liters">
            <summary>
            Gets the value of <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> in liters.
            </summary>
            <value>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> represented in 
            liters.
            </value>
            <lastupdated>7/23/2004 12:46:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Volume.USGallons">
            <summary>
            Gets the value of <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> in U.S. gallons.
            </summary>
            <value>
            The value of <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> represented in 
            U.S. gallons.
            </value>
            <lastupdated>7/23/2004 12:47:22 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Conversion.Volume.Zero">
            <summary>
            Represents a volume of zero.
            </summary>
            <value>
            The constant provides a convenient source for a
            <see cref="T:NationalInstruments.Analysis.Conversion.Volume"/> object with a value of zero.
            </value>
            <lastupdated>7/23/2004 12:47:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Volume.Units">
            <exclude/>
            <lastupdated>5/9/2003 4:28:23 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Volume.Units.Liters">
            <exclude/>
            <lastupdated>5/9/2003 4:28:26 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Conversion.Volume.Units.USGallons">
            <exclude/>
            <lastupdated>5/9/2003 4:28:30 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Conversion.Volume.ConvertDelegate">
            <exclude/>
            <lastupdated>5/12/2003 4:30:11 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm">
            <summary>
            Specifies the method to use to compute the Chirp-Z Transform. 
            </summary>
            <remarks>
            	<para>
            The Direct method computes the Chirp-Z Transform as follows:
            </para>
            	<para indent="true">
            		<image src="CxChirpZTform_12.png"/>
            	</para>
            for <format type="italics">k</format> = 0, 1,..., <format type="italics">M</format><entity value="ndash"/>1.
            	<para>
            For the Frequency Domain method, the <see cref="F:NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm.Direct"/> form can be reformulated with the convolution, as follows:
            </para>
            	<para indent="true">
            		<image src="CxChirpZTform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="CxChirpZTform_14.png"/>
            			</description>
            		</item>
            	</list>
            	<para>
            The convolution operation can be performed in the Frequency Domain method, which uses an FFT-based technique.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm)"/>
            <lastupdated>3/6/2006 9:59:11 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm.Direct">
            <summary>
            The Direct method is used to compute the Chirp-Z Transform.
            </summary>
            <seealso cref="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm)"/>
            <lastupdated>3/6/2006 9:58:45 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm.FrequencyDomain">
            <summary>
            The Frequency Domain method is used to compute the Chirp-Z Transform.
            </summary>
            <seealso cref="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm)"/>
            <lastupdated>3/6/2006 9:58:41 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm">
            <summary>Specifies the method used to compute the convolution of the input arrays.</summary>
            <remarks>
            If X and Y are small, the <see cref="F:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm.Direct" crefType="Unqualified"/> method typically is faster. If X and Y are large, the <see cref="F:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm.FrequencyDomain" crefType="Unqualified"/> method typically is faster. 
            Additionally, slight numerical differences can exist between the two methods.
            </remarks>
            <lastupdated>8/31/2009 12:27:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm.Direct">
            <summary>
            Computes the convolution using the direct method of linear convolution.
            </summary>
            <lastupdated>9/19/2009 3:05:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm.FrequencyDomain">
            <summary>
            Computes the convolution using an FFT-based technique.
            </summary>
            <lastupdated>9/19/2009 3:05:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm">
            <summary>Specifies the method used to compute the correlation of the input arrays.</summary>
            <remarks>
            If X and Y are small, the <see cref="F:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm.Direct" crefType="Unqualified"/> method typically is faster. If X and Y are large, the <see cref="F:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm.FrequencyDomain" crefType="Unqualified"/> method typically is faster. Additionally, slight numerical differences can exist between the two methods. 
            </remarks>
            <lastupdated>8/31/2009 12:27:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm.Direct">
            <summary>
            Computes the cross correlation using the direct method of linear correlation.
            </summary>
            <lastupdated>9/19/2009 3:05:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm.FrequencyDomain">
            <summary>
            Computes the cross correlation using an FFT-based technique.
            </summary>
            <lastupdated>9/19/2009 3:05:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.DifferentiationMethod">
            <summary>
            Specifies the differentiation method for the input data.
            </summary>
            <lastupdated>3/26/2008 9:50:24 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.DifferentiationMethod.SecondOrderCentral">
            <summary>Uses the second order central method to differentiate the input data.</summary>
            <lastupdated>3/26/2008 9:50:47 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.DifferentiationMethod.FourthOrderCentral">
            <summary>Uses the fourth order central method to differentiate the input data.</summary>
            <lastupdated>3/26/2008 9:50:43 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.DifferentiationMethod.Forward">
            <summary>Uses the forward method to differentiate the input data.</summary>
            <lastupdated>3/26/2008 9:50:40 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.DifferentiationMethod.Backward">
            <summary>Uses the backward method to differentiate the input data.</summary>
            <lastupdated>3/26/2008 9:50:36 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilter">
            <summary>Implements a Bessel bandpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using a Bessel bandpass filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            lowerCutoffFrequency = 45.0
            upperCutoffFrequency = 75.0
             
            ' Extract 60 Hz sine signal by bandpass filtering 
            Dim newFilter As New BesselBandpassFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency)
            filteredData = newFilter.FilterData(waveformData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            lowerCutoffFrequency = 45.0;
            upperCutoffFrequency = 75.0;
             
            // Extract 60 Hz sine signal by bandpass filtering 
            BesselBandpassFilter newFilter = new BesselBandpassFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency);
            filteredData = newFilter.FilterData(waveformData);
            </code>
            </example>
            <lastupdated>3/20/2008 11:27:31 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase">
            <summary>Implements the base class for all IIR filters.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This class provides access to features that are common to all IIR filters. You cannot directly call the methods included in this class because <see cref="T:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase"/> is a base class.
            An exception occurs if you call a method directly. To use the methods in this class, you need to extend <see cref="T:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase"/>.
            </remarks>
            <lastupdated>10/15/2006 4:33:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.IFilter">
            <summary>
            Defines the set of functionality that a filter must implement.
            </summary>
            <remarks>
            	<see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase"/> and 
            <see cref="T:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase"/> implement this interface.
            </remarks>
            <lastupdated>5/28/2003 12:20:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IFilter.Reset">
            <summary>
            Clears the filter history in order to start a new data set.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>5/29/2003 2:55:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IFilter.FilterData(System.Double[])">
            <summary>Filters the input sequence using either the IIR filter type or the FIR filter type along with the specified filter parameters.
            </summary>
            <param name="inputData">
            The data to be filtered.
            </param>
            <returns>
            The filtered data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.   
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in  <paramref name="inputData"/> is equal to zero.  
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>3/4/2008 4:40:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.#ctor(System.Int32,System.Double)">
            <summary>Creates an instance of <see cref="T:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase"/> using the specified parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/2/2003 1:56:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Finalize">
            <exclude/>
            <lastupdated>5/29/2003 11:51:25 PM</lastupdated>
            <updatedby>Nandan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Reset">
            <summary>
            Clears the filter history in order to start a new data set.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:10:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.FilterData(System.Double[])">
            <summary>Filters the input sequence using the IIR filter type of the derived class along with the specified filter parameters.</summary>
            <param name="inputData">
            The data to be filtered.
            </param>
            <returns>
            The filtered data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in  <paramref name="inputData"/> is equal to zero.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/4/2008 4:37:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Dispose">
            <summary>
            Releases all resources used by the derived filter object.
            </summary>
            <lastupdated>5/28/2003 12:09:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by IIR Filters and
            optionally releases the managed resources associated with this object.
            </summary>
            <param name="disposing">
            If <see langword="true"/>, releases both managed and unmanaged resources.  If <see langword="false"/>, only releases
            unmanaged resources.
            </param>
            <remarks>
                <para>
            The public <see cref="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Dispose"/> method and the 
            finalizer call this method.  The public <see cref="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Dispose"/> 
            invokes the protected Dispose(Boolean) method with <paramref name="disposing"/>
            set to <see langword="true"/>.  The finalizer invokes the protected Dispose(Boolean) with <paramref name="disposing"/> set to <see langword="false"/>.
            </para>
                <para>
            When you set the <paramref name="disposing"/> parameter to <see langword="true"/>, this method releases all
            resources held by managed objects that this Session
            references.  This method invokes the <see cref="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Dispose"/> method of each referenced object.
            </para>
            </remarks>
            <lastupdated>5/12/2005 3:09:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/7/2004 4:57:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.ZeroPhaseFiltering(System.Double[],System.Double[],System.Double[])">
            <summary>Filters the input sequence using a zero-phase filter.</summary>
            <param name="inputData">
            The data to be filtered.
            </param>
            <param name="reverseCoefficients">
            The reverse coefficients of the filter.
            </param>
            <param name="forwardCoefficients">
            The forward coefficients of the filter.
            </param>
            <returns>
            The filtered data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in  <paramref name="inputData"/> is equal to zero.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            This function filters the <paramref name="inputData"/> as shown in the following illustration:</para>
            	<image src="ZeroPhaseFiltering.gif"/>
            	<para>
            		<format type="italics">g</format><format type="subscript">-n</format> is the reverted sequence of
             <format type="italics">g</format><format type="subscript">n</format>. 
            <format type="italics">H(z)</format> is an IIR filter whose cooeffients are specified by 
            <paramref name="reverseCoefficients"/>  and 
            <paramref name="forwardCoefficients"/>.
            </para>
            	<para>
            With a zero-phase filter, the output filtered data has no phase distortion. Although the zero-phase filter is non-causal, 
            it is useful in offline applications such as filtering a sound file saved on disk.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>5/9/2011 4:05:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.FilterOrder">
            <summary>
            Gets or sets the order of the filter.
            </summary>
            <value>
            The order of the filter. 
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <remarks>Changing the value of this property does not regenerate the coefficients of the filter. Call the appropiate <see cref="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Reset" crefType="Unqualified"/> method after modifying this property.</remarks>
            <lastupdated>5/29/2012 10:59:33 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.SamplingFrequency">
            <summary>
            Gets or sets the sampling frequency, in hertz.
            </summary>
            <value>
            The sampling frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:10:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.IirFilterHandle">
            <exclude/>
            <lastupdated>5/8/2003 6:50:44 PM</lastupdated>
            <updatedby>Nandan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:55:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:45:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:55:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:55:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilterComplex">
            <summary>Implements a Bessel bandpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:00:32 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase">
            <summary>Implements the base class for all IIR filters.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This class provides access to features that are common to all IIR filters. You cannot directly call the methods included in this class because <see cref="T:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase"/> is a base class.
            An exception occurs if you call a method directly. To use the methods in this class, you need to extend <see cref="T:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase"/>.
            </remarks>
            <lastupdated>11/22/2011 8:12:14 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.IFilterComplex">
            <summary>
            Defines the set of functionality that a <see cref="T:NationalInstruments.ComplexDouble"/> filter must implement.
            </summary>
            <remarks>
            	<see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex"/> and 
            <see cref="T:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex"/> implement this interface.
            </remarks>
            <lastupdated>10/15/2006 4:41:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IFilterComplex.Reset">
            <summary>
            Clears the filter history in order to start a new data set.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>10/15/2006 4:42:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IFilterComplex.FilterData(NationalInstruments.ComplexDouble[])">
            <summary>Filters the <see cref="T:NationalInstruments.ComplexDouble"/> input sequence using either the IIR filter type or the FIR filter type along with the specified filter parameters.
            </summary>
            <param name="inputData">
            The data to filter.
            </param>
            <returns>
            The filtered data.
            </returns>
            <exception cref="T:System.ArgumentException">
            The number of samples in  <paramref name="inputData"/> is equal to zero.  
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>3/4/2008 4:48:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase.#ctor(System.Int32,System.Double)">
            <summary>Creates an instance of <see cref="T:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase"/> using the specified parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/2/2003 1:56:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase.Finalize">
            <exclude/>
            <lastupdated>5/29/2003 11:51:25 PM</lastupdated>
            <updatedby>Nandan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase.Reset">
            <summary>
            Clears the filter history in order to start a new data set.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:10:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase.FilterData(NationalInstruments.ComplexDouble[])">
            <summary>Filters the input sequence using the IIR filter type of the derived class along with the specified filter parameters.</summary>
            <param name="inputData">
            The data to be filtered.
            </param>
            <returns>
            The filtered data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in  <paramref name="inputData"/> is equal to zero.  
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/4/2008 4:37:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase.Dispose">
            <summary>
            Releases all resources used by the derived filter object.
            </summary>
            <lastupdated>5/28/2003 12:09:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by IIR Filters and
            optionally releases the managed resources associated with this object.
            </summary>
            <param name="disposing">
            If <see langword="true"/>, releases both managed and unmanaged resources.  If <see langword="false"/>, only releases
            unmanaged resources.
            </param>
            <remarks>
                <para>
            The public <see cref="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Dispose"/> method and the 
            finalizer call this method.  The public <see cref="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Dispose"/> 
            invokes the protected Dispose(Boolean) method with <paramref name="disposing"/>
            set to <see langword="true"/>.  The finalizer invokes the protected Dispose(Boolean) with <paramref name="disposing"/> set to <see langword="false"/>.
            </para>
                <para>
            When you set the <paramref name="disposing"/> parameter to <see langword="true"/>, this method releases all
            resources held by managed objects that this Session
            references.  This method invokes the <see cref="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Dispose"/> method of each referenced object.
            </para>
            </remarks>
            <lastupdated>5/12/2005 3:09:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/7/2004 4:57:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase.FilterOrder">
            <summary>
            Gets or sets the order of the filter.
            </summary>
            <value>
            The order of the filter. 
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <remarks>Changing the value of this property does not regenerate the coefficients of the filter. Call the appropiate <see cref="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase.Reset" crefType="Unqualified"/> after modifying this property.</remarks>
            <lastupdated>5/29/2012 11:00:58 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase.SamplingFrequency">
            <summary>
            Gets or sets the sampling frequency, in hertz.
            </summary>
            <value>
            The sampling frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:10:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.IirFilterComplexBase.IirFilterHandle">
            <exclude/>
            <lastupdated>5/8/2003 6:50:44 PM</lastupdated>
            <updatedby>Nandan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:55:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:45:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilterComplex.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:55:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselBandpassFilterComplex.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:55:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilter">
            <summary>Implements a Bessel bandstop filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using a Bessel bandstop filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            lowerCutoffFrequency = 20.0
            upperCutoffFrequency = 150.0
             
            ' Extract 20 Hz sine signal by bandstop filtering 
            Dim newFilter As New BesselBandstopFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency)
            filteredData = newFilter.FilterData(waveformData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            lowerCutoffFrequency = 20.0;
            upperCutoffFrequency = 150.0;
             
            // Extract 20 Hz sine signal by bandstop filtering
            BesselBandstopFilter newFilter = new BesselBandstopFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency);
            filteredData = newFilter.FilterData(waveformData);
            </code>
            </example>
            <lastupdated>3/20/2008 11:27:34 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:56:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:45:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:56:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:56:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilterComplex">
            <summary>Implements a Bessel bandstop filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:01:05 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:56:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:45:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilterComplex.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:56:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselBandstopFilterComplex.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:56:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilter">
            <summary>Implements a Bessel highpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using a Bessel highpass filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, cutoffFrequency As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            cutoffFrequency = 100.0
             
            ' Extract 100 Hz sine signal by highpass filtering 
            Dim newFilter As New BesselHighpassFilter(filterOrder, samplingFrequency, cutoffFrequency)
            filteredData = newFilter.FilterData(waveformData) 
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, cutoffFrequency;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            cutoffFrequency = 100.0;
             
            // Extract 100 Hz sine signal by highpass filtering
            BesselHighpassFilter newFilter = new BesselHighpassFilter(filterOrder, samplingFrequency, cutoffFrequency);
            filteredData = newFilter.FilterData(waveformData);
             
            </code>
            </example>
            <lastupdated>3/20/2008 11:27:38 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilter.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:56:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilter.Reset(System.Int32,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:46:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:56:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilterComplex">
            <summary>Implements a Bessel highpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:01:23 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilterComplex.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:56:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilterComplex.Reset(System.Int32,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:46:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselHighpassFilterComplex.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:56:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilter">
            <summary>Implements a Bessel lowpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using a Bessel lowpass filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, cutoffFrequency As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            cutoffFrequency = 20.0
             
            ' Extract 100 Hz sine signal by highpass filtering 
            Dim newFilter As New BesselLowpassFilter(filterOrder, samplingFrequency, cutoffFrequency)
            filteredData = newFilter.FilterData(waveformData) 
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, cutoffFrequency;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            cutoffFrequency = 20.0;
             
            // Extract 20 Hz sine signal by lowpass filtering
            BesselLowpassFilter newFilter = new BesselLowpassFilter(filterOrder, samplingFrequency, cutoffFrequency);
            filteredData = newFilter.FilterData(waveformData);
             
            </code>
            </example>
            <lastupdated>3/20/2008 11:27:41 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilter.#ctor(System.Int32,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:56:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilter.Reset(System.Int32,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:46:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:56:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilterComplex">
            <summary>Implements a Bessel lowpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:01:38 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilterComplex.#ctor(System.Int32,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:56:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilterComplex.Reset(System.Int32,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:46:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.BesselLowpassFilterComplex.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:56:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilter">
            <summary>Implements a Butterworth bandpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using a Butterworth bandpass filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            lowerCutoffFrequency = 45.0
            upperCutoffFrequency = 75.0
             
            ' Extract 60 Hz sine signal by bandpass filtering 
            Dim newFilter As New ButterworthBandpassFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency)
            filteredData = newFilter.FilterData(waveformData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            lowerCutoffFrequency = 45.0;
            upperCutoffFrequency = 75.0;
             
            // Extract 60 Hz sine signal by bandpass filtering 
            ButterworthBandpassFilter newFilter = new ButterworthBandpassFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency);
            filteredData = newFilter.FilterData(waveformData);
            </code>
            </example>
            <lastupdated>3/20/2008 11:27:44 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:57:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:47:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:57:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:57:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilterComplex">
            <summary>Implements a Butterworth bandpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:01:53 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:55:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:45:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilterComplex.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:55:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandpassFilterComplex.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:55:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilterComplex">
            <summary>Implements a Butterworth bandstop filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:02:05 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:56:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:45:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilterComplex.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:56:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilterComplex.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:56:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilter">
            <summary>Implements a Butterworth highpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using a Butterworth highpass filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, cutoffFrequency As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            cutoffFrequency = 100.0
             
            ' Extract 100 Hz sine signal by highpass filtering 
            Dim newFilter As New ButterworthHighpassFilter(filterOrder, samplingFrequency, cutoffFrequency)
            filteredData = newFilter.FilterData(waveformData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, cutoffFrequency;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            cutoffFrequency = 100.0;
             
            // Extract 100 Hz sine signal by highpass filtering
            ButterworthHighpassFilter newFilter = new ButterworthHighpassFilter(filterOrder, samplingFrequency, cutoffFrequency);
            filteredData = newFilter.FilterData(waveformData);
            </code>
            </example>
            <lastupdated>3/20/2008 11:27:52 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilter.#ctor(System.Int32,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilter"/>
            using the specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:57:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilter.Reset(System.Int32,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:47:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:57:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilterComplex">
            <summary>Implements a Butterworth highpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:02:16 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilterComplex.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:56:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilterComplex.Reset(System.Int32,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:46:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthHighpassFilterComplex.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:56:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilter">
            <summary>Implements a Butterworth bandstop filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using a Butterworth bandstop filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            lowerCutoffFrequency = 20.0
            upperCutoffFrequency = 150.0
             
            ' Extract 20 Hz sine signal by bandstop filtering 
            Dim newFilter As New ButterworthBandstopFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency)
            filteredData = newFilter.FilterData(waveformData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            lowerCutoffFrequency = 20.0;
            upperCutoffFrequency = 150.0;
             
            // Extract 20 Hz sine signal by bandstop filtering
            ButterworthBandstopFilter newFilter = new ButterworthBandstopFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency);
            filteredData = newFilter.FilterData(waveformData);</code>
            </example>
            <lastupdated>3/20/2008 11:27:48 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilter"/>
            using the specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:57:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:47:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:57:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthBandstopFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:57:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilter">
            <summary>Implements a Butterworth lowpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using a Butterworth lowpass filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, cutoffFrequency As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            cutoffFrequency = 20.0
             
            ' Extract 20 Hz sine signal by lowpass filtering
            Dim newFilter As New ButterworthLowpassFilter(filterOrder, samplingFrequency, cutoffFrequency)
            filteredData = newFilter.FilterData(waveformData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, cutoffFrequency;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            cutoffFrequency = 20.0;
             
            // Extract 20 Hz sine signal by lowpass filtering
            ButterworthLowpassFilter newFilter = new ButterworthLowpassFilter(filterOrder, samplingFrequency, cutoffFrequency);
            filteredData = newFilter.FilterData(waveformData);
            </code>
            </example>
            <lastupdated>3/20/2008 11:27:55 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilter.#ctor(System.Int32,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilter"/>
            using the specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:58:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilter.Reset(System.Int32,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:47:26 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:58:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilterComplex">
            <summary>Implements a Butterworth lowpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:02:32 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilterComplex.#ctor(System.Int32,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:56:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilterComplex.Reset(System.Int32,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:46:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ButterworthLowpassFilterComplex.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:56:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter">
            <summary>Implements a Chebyshev bandpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using a Chebyshev bandpass filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            lowerCutoffFrequency = 45.0
            upperCutoffFrequency = 75.0
            stopbandRipple = 0.1
             
            ' Extract 60 Hz sine signal by bandpass filtering 
            Dim newFilter As New ChebyshevBandpassFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple)
            filteredData = newFilter.FilterData(waveformData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            lowerCutoffFrequency = 45.0;
            upperCutoffFrequency = 75.0;
            stopbandRipple = 0.1;
             
            // Extract 60 Hz sine signal by bandpass filtering 
            ChebyshevBandpassFilter newFilter = new ChebyshevBandpassFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple);
            filteredData = newFilter.FilterData(waveformData);
             
            </code>
            </example>
            <lastupdated>3/20/2008 11:28:01 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:58:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:47:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:58:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:58:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilter.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:58:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilterComplex">
            <summary>Implements a Chebyshev bandpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:03:03 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:58:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:47:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilterComplex.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:58:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilterComplex.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:58:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandpassFilterComplex.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:58:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter">
            <summary>Implements a Chebyshev bandstop filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using a Chebyshev bandstop filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            lowerCutoffFrequency = 20.0
            upperCutoffFrequency = 150.0
            stopbandRipple = 0.1
             
            ' Extract 20 Hz sine signal by bandstop filtering 
            Dim newFilter As New ChebyshevBandstopFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple)
            filteredData = newFilter.FilterData(waveformData)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            lowerCutoffFrequency = 20.0;
            upperCutoffFrequency = 150.0;
            stopbandRipple = 0.1;
             
            // Extract 20 Hz sine signal by bandstop filtering
            ChebyshevBandstopFilter newFilter = new ChebyshevBandstopFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple);
            filteredData = newFilter.FilterData(waveformData);
            </code>
            </example>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:04:19 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Initializes an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter"/> using the 
            specified input parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency expressed in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency expressed in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency expressed in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple expressed in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 10:44:08 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Resets the internal filter state information and reallocates a new internal filter structure based on the specified parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:47:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter.LowerCutoffFrequency">
            <summary>Specifies the lower cutoff frequency expressed in hertz.
            </summary>
            <value>
            The lower cutoff frequency expressed in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:58:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter.UpperCutoffFrequency">
            <summary>Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:59:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilter.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:59:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilterComplex">
            <summary>Implements a Chebyshev bandstop filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:03:48 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Initializes an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilterComplex"/> using the 
            specified input parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency expressed in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency expressed in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency expressed in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple expressed in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 10:44:08 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Resets the internal filter state information and reallocates a new internal filter structure based on the specified parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:47:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilterComplex.LowerCutoffFrequency">
            <summary>Specifies the lower cutoff frequency expressed in hertz.
            </summary>
            <value>
            The lower cutoff frequency expressed in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:58:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilterComplex.UpperCutoffFrequency">
            <summary>Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:59:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevBandstopFilterComplex.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:59:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilter">
            <summary>Implements a Chebyshev highpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using a Chebyshev highpass filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, cutoffFrequency, stopbandRipple As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            cutoffFrequency = 100.0
            stopbandRipple = 0.1
             
            ' Extract 100 Hz sine signal by highpass filtering 
            Dim newFilter As New ChebyshevHighpassFilter(filterOrder, samplingFrequency, cutoffFrequency, stopbandRipple)
            filteredData = newFilter.FilterData(waveformData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, cutoffFrequency, stopbandRipple;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            cutoffFrequency = 100.0;
            stopbandRipple = 0.1;
             
            // Extract 100 Hz sine signal by highpass filtering
            ChebyshevHighpassFilter newFilter = new ChebyshevHighpassFilter(filterOrder, samplingFrequency, cutoffFrequency, stopbandRipple);
            filteredData = newFilter.FilterData(waveformData);
            </code>
            </example>
            <lastupdated>3/20/2008 11:49:44 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:00:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The filter cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:47:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:59:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilter.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:00:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilterComplex">
            <summary>Implements a Chebyshev highpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:04:35 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:00:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The filter cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:47:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilterComplex.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 4:59:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevHighpassFilterComplex.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:00:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter">
            <summary>Implements a Chebyshev lowpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using a Chebyshev lowpass filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, cutoffFrequency, passbandRipple As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            cutoffFrequency = 20.0
            passbandRipple = 0.1
             
            ' Extract 20 Hz sine signal by lowpass filtering
            Dim newFilter As New ChebyshevLowpassFilter(filterOrder, samplingFrequency, cutoffFrequency, passbandRipple)
            filteredData = newFilter.FilterData(waveformData) 
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, cutoffFrequency, passbandRipple;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            cutoffFrequency = 20.0;
            passbandRipple = 0.1;
             
            // Extract 20 Hz sine signal by lowpass filtering
            ChebyshevLowpassFilter newFilter = new ChebyshevLowpassFilter(filterOrder, samplingFrequency, cutoffFrequency, passbandRipple);
            filteredData = newFilter.FilterData(waveformData);
            </code>
            </example>
            <lastupdated>3/20/2008 11:49:47 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="passbandRipple">
            The passband ripple, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="passbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:00:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="passbandRipple">
            The passband ripple, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="passbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:47:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:00:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <remarks>
            	<para>
            This property is obsolete.  Use <see cref="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter.PassbandRipple" crefType="Unqualified"/> instead.
            </para>
            </remarks>
            <lastupdated>5/19/2012 1:38:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilter.PassbandRipple">
            <summary>
            Gets the passband ripple, in decibels.
            </summary>
            <value>
            The passband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:00:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilterComplex">
            <summary>Implements a Chebyshev lowpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:04:45 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="passbandRipple">
            The passband ripple, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="passbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:00:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="passbandRipple">
            The passband ripple, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="passbandRipple"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:47:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilterComplex.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:00:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.ChebyshevLowpassFilterComplex.PassbandRipple">
            <summary>
            Gets the passband ripple, in decibels.
            </summary>
            <value>
            The passband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:00:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter">
            <summary>Implements an Elliptic bandpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using an Elliptic bandpass filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple, stopbandAttenuation As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            lowerCutoffFrequency = 45.0
            upperCutoffFrequency = 75.0
            stopbandRipple = 0.1
            stopbandAttenuation = 60.0
             
            ' Extract 60 Hz sine signal by bandpass filtering 
            Dim newFilter As New EllipticBandpassFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple, stopbandAttenuation)
            filteredData = newFilter.FilterData(waveformData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple, stopbandAttenuation;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            lowerCutoffFrequency = 45.0;
            upperCutoffFrequency = 75.0;
            stopbandRipple = 0.1;
            stopbandAttenuation = 60.0;
             
            // Extract 60 Hz sine signal by bandpass filtering 
            EllipticBandpassFilter newFilter = new EllipticBandpassFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple, stopbandAttenuation);
            filteredData = newFilter.FilterData(waveformData);
            </code>
            </example>
            <lastupdated>3/20/2008 11:49:51 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:01:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:01:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:00:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilter.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilterComplex">
            <summary>Implements an Elliptic bandpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:05:11 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:01:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:01:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilterComplex.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:00:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilterComplex.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilterComplex.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandpassFilterComplex.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter">
            <summary>Implements an Elliptic bandstop filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using an Elliptic bandstop filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple, stopbandAttenuation As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            lowerCutoffFrequency = 20.0
            upperCutoffFrequency = 150.0
            stopbandRipple = 0.1
            stopbandAttenuation = 60.0
             
            ' Extract 20 Hz sine signal by bandstop filtering 
            Dim newFilter As New EllipticBandstopFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple, stopbandAttenuation)
            filteredData = newFilter.FilterData(waveformData)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple, stopbandAttenuation;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            lowerCutoffFrequency = 20.0;
            upperCutoffFrequency = 150.0;
            stopbandRipple = 0.1;
            stopbandAttenuation = 60.0;
             
            // Extract 20 Hz sine signal by bandstop filtering
            EllipticBandstopFilter newFilter = new EllipticBandstopFilter(filterOrder, samplingFrequency, lowerCutoffFrequency, upperCutoffFrequency, stopbandRipple, stopbandAttenuation);
            filteredData = newFilter.FilterData(waveformData);
            </code>
            </example>
            <lastupdated>3/20/2008 11:49:55 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:01:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:02:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilter.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilterComplex">
            <summary>Implements an Elliptic bandstop filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:05:22 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:01:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:02:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilterComplex.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilterComplex.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilterComplex.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticBandstopFilterComplex.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:01:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter">
            <summary>Implements an Elliptic highpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using an Elliptic highpass filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, cutoffFrequency, stopbandRipple, stopbandAttenuation As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            cutoffFrequency = 100.0
            stopbandRipple = 0.1
            stopbandAttenuation = 60.0
             
            ' Extract 100 Hz sine signal by highpass filtering 
            Dim newFilter As New EllipticHighpassFilter(filterOrder, samplingFrequency, cutoffFrequency, stopbandRipple, stopbandAttenuation)
            filteredData = newFilter.FilterData(waveformData)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, cutoffFrequency, stopbandRipple, stopbandAttenuation;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            cutoffFrequency = 100.0;
            stopbandRipple = 0.1;
            stopbandAttenuation = 60.0;
             
            // Extract 100 Hz sine signal by highpass filtering
            EllipticHighpassFilter newFilter = new EllipticHighpassFilter(filterOrder, samplingFrequency, cutoffFrequency, stopbandRipple, stopbandAttenuation);
            filteredData = newFilter.FilterData(waveformData);
            </code>
            </example>
            <lastupdated>3/20/2008 11:49:59 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:02:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:02:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:02:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:02:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilter.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:02:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilterComplex">
            <summary>Implements an Elliptic highpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:05:33 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:02:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:02:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilterComplex.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:02:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilterComplex.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:02:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticHighpassFilterComplex.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:02:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter">
            <summary>Implements an Elliptic lowpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <example>The following example demonstrates how to generate a composite signal and then filter the signal using an Elliptic lowpass filter.
            <code lang="VB.NET">
            Dim samples As Long = 1024
            Dim waveformData() As Double
            Dim filteredData() As Double
            Dim samplingFrequency, cutoffFrequency, stopbandRipple, stopbandAttenuation As Double
            Dim filterOrder As Integer
            Dim sineSignal1 As New SineSignal(20.0, 3.0, 0.0)
            Dim sineSignal2 As New SineSignal(60.0, 1.0, 20.0)
            Dim sineSignal3 As New SineSignal(100.0, 1.0, 40.0)
            Dim signalGen As New SignalGenerator(1000.0, samples)
             
            ' Generate composite signal
            signalGen.Signals.Add(sineSignal1)
            signalGen.Signals.Add(sineSignal2)
            signalGen.Signals.Add(sineSignal3)
             
            waveformData = signalGen.Generate
             
            ' Set filter parameters
            filterOrder = 5
            samplingFrequency = 1000.0
            cutoffFrequency = 20.0
            stopbandRipple = 0.1
            stopbandAttenuation = 60.0
             
            ' Extract 20 Hz sine signal by lowpass filtering
            Dim newFilter As New EllipticLowpassFilter(filterOrder, samplingFrequency, cutoffFrequency, stopbandRipple, stopbandAttenuation)
            filteredData = newFilter.FilterData(waveformData)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 1024;
            double[] waveformData;
            double[] filteredData;
            double samplingFrequency, cutoffFrequency, stopbandRipple, stopbandAttenuation;
            int filterOrder;
            SineSignal sineSignal1 = new SineSignal(20.0, 3.0, 0.0);
            SineSignal sineSignal2 = new SineSignal(60.0, 1.0, 20.0);
            SineSignal sineSignal3 = new SineSignal(100.0, 1.0, 40.0);
            SignalGenerator signalGen = new SignalGenerator(1000.0, samples);
             
            // Generate composite signal
            signalGen.Signals.Add(sineSignal1);
            signalGen.Signals.Add(sineSignal2);
            signalGen.Signals.Add(sineSignal3);
             
            waveformData = signalGen.Generate();
             
            // Set filter parameters
            filterOrder = 5;
            samplingFrequency = 1000.0;
            cutoffFrequency = 20.0;
            stopbandRipple = 0.1;
            stopbandAttenuation = 60.0;
             
            // Extract 20 Hz sine signal by lowpass filtering
            EllipticLowpassFilter newFilter = new EllipticLowpassFilter(filterOrder, samplingFrequency, cutoffFrequency, stopbandRipple, stopbandAttenuation);
            filteredData = newFilter.FilterData(waveformData);
            </code>
            </example>
            <lastupdated>3/20/2008 11:50:03 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:02:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:02:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:02:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:02:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilter.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:02:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilterComplex">
            <summary>Implements an Elliptic lowpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:05:48 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:02:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandRipple">
            The stopband ripple, in decibels.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandRipple"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> must be greater than <paramref name="stopbandRipple"/>. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:02:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilterComplex.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:02:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilterComplex.StopbandRipple">
            <summary>
            Gets the stopband ripple, in decibels.
            </summary>
            <value>
            The stopband ripple, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:02:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EllipticLowpassFilterComplex.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:02:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter">
            <summary>Implements an EquiRipple bandpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <remarks>
            The filter is implemented with a FIR filter with equi-ripple characteristics using the Parks-McClellan algorithm.
            </remarks>
            <lastupdated>11/22/2011 8:09:39 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase">
            <summary>Implements the base class for all FIR filters.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This class provides access to features that are common to all FIR filters.
            </remarks>
            <lastupdated>5/28/2003 12:08:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.#ctor(System.Double,System.Int32)">
            <summary>Creates an instance of <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase"/>
            using the specified parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired length of the window FIR filter.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/2/2003 1:56:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.Reset">
            <summary>
            Clears the filter history in order to start a new data set.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/2/2003 1:56:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.FilterData(System.Double[])">
            <summary>Filters the input sequence using the FIR filter type of the derived class along with the specified filter parameters.
            </summary>
            <param name="inputData">
            The data to be filtered.
            </param>
            <returns>
            The filtered data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in  <paramref name="inputData"/> is equal to zero. 
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/4/2008 4:36:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.GetCoefficients">
            <summary>Gets the computed output window FIR filter coefficients.
            </summary>
            <returns>
            The computed output window FIR filter coefficients.
            </returns>
            <lastupdated>6/2/2003 1:56:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.SetCoefficients(System.Double[])">
            <summary>Sets the computed output window FIR filter coefficients.
            </summary>
            <param name="coefficients">
            The computed output window FIR filter coefficients.
            </param>
            <lastupdated>6/2/2003 1:56:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/7/2004 4:57:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.Coefficients">
            <summary>Gets or sets the computed output window FIR filter coefficients.
            </summary>
            <value>
            The computed output window FIR filter coefficients.
            </value>
            <lastupdated>5/28/2003 12:08:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.TemporaryFilterConditions">
            <exclude/>
            <lastupdated>5/8/2003 6:50:58 PM</lastupdated>
            <updatedby>Nandan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.SamplingFrequency">
            <summary>
            Gets the sampling frequency, in hertz.
            </summary>
            <value>
            The sampling frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:08:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.FirFilterBase.NumberOfCoefficients">
            <summary>Gets or sets the desired length of the window FIR filter.
            </summary>
            <value>
            The desired length of the window FIR filter. This parameter must be between 8 and 511, inclusive.
            </value>
            <lastupdated>5/28/2003 12:08:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerStopbandFrequency">
            The lower stopband frequency, in hertz. The lower stopband is [0, <paramref name="lowerStopbandFrequency"/>].
            </param>
            <param name="lowerPassbandFrequency">
            The lower passband frequency, in hertz. The passband is [<paramref name="lowerPassbandFrequency"/>, <paramref name="upperPassbandFrequency"/>].
            </param>
            <param name="upperPassbandFrequency">
            The upper passband frequency, in hertz. The passband is [<paramref name="lowerPassbandFrequency"/>, <paramref name="upperPassbandFrequency"/>].
            </param>
            <param name="upperStopbandFrequency">
            The upper stopband frequency, in hertz. The upper stopband is [<paramref name="upperStopbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is greater than <paramref name="lowerPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is greater than <paramref name="upperPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> is greater than <paramref name="upperStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/26/2003 9:47:46 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter.Reset(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerStopbandFrequency">
            The lower stopband frequency, in hertz. The lower stopband is [0, <paramref name="lowerStopbandFrequency"/>].
            </param>
            <param name="lowerPassbandFrequency">
            The lower passband frequency, in hertz. The passband is [<paramref name="lowerPassbandFrequency"/>, <paramref name="upperPassbandFrequency"/>].
            </param>
            <param name="upperPassbandFrequency">
            The upper passband frequency, in hertz. The passband is [<paramref name="lowerPassbandFrequency"/>, <paramref name="upperPassbandFrequency"/>].
            </param>
            <param name="upperStopbandFrequency">
            The upper stopband frequency, in hertz. The upper stopband is [<paramref name="upperStopbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is greater than <paramref name="lowerPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is greater than <paramref name="upperPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> is greater than <paramref name="upperStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:07:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter.LowerStopbandFrequency">
            <summary>
            Gets the lower stopband frequency, in hertz.
            </summary>
            <value>
            The lower stopband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:02:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter.LowerPassbandFrequency">
            <summary>
            Gets the lower passband frequency, in hertz.
            </summary>
            <value>
            The lower passband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:02:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter.UpperPassbandFrequency">
            <summary>
            Gets the upper passband frequency, in hertz.
            </summary>
            <value>
            The upper passband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:02:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilter.UpperStopbandFrequency">
            <summary>
            Gets the upper stopband frequency, in hertz.
            </summary>
            <value>
            The upper stopband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:02:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilterComplex">
            <summary>Implements an EquiRipple bandpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            <package name="Enterprise"/>
            </packages>
            <remarks>
            The filter is implemented with an FIR filter with equi-ripple characteristics using the Parks-McClellan algorithm.
            </remarks>
            <lastupdated>5/29/2012 10:48:44 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.FirFilterComplexBase">
            <summary>Implements the base class for all FIR filters for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This class provides access to features that are common to all FIR filters.
            </remarks>
            <lastupdated>11/22/2011 8:11:17 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterComplexBase.#ctor(System.Double,System.Int32)">
            <summary>Creates an instance of <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirFilterComplexBase"/>
            using the specified parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired length of the window FIR filter.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/2/2003 1:56:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterComplexBase.Reset">
            <summary>
            Clears the filter history in order to start a new data set.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/2/2003 1:56:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterComplexBase.FilterData(NationalInstruments.ComplexDouble[])">
            <summary>Filters the input sequence using the FIR filter type of the derived class along with the specified filter parameters.
            </summary>
            <param name="inputData">
            The data to be filtered.
            </param>
            <returns>
            The filtered data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in  <paramref name="inputData"/> is equal to zero. 
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/4/2008 4:36:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterComplexBase.GetCoefficients">
            <summary>Gets the computed output window FIR filter coefficients.
            </summary>
            <returns>
            The computed output window FIR filter coefficients.
            </returns>
            <lastupdated>6/2/2003 1:56:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterComplexBase.SetCoefficients(System.Double[])">
            <summary>Sets the computed output window FIR filter coefficients.
            </summary>
            <param name="coefficients">
            The computed output window FIR filter coefficients.
            </param>
            <lastupdated>6/2/2003 1:56:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirFilterComplexBase.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/7/2004 4:57:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.FirFilterComplexBase.Coefficients">
            <summary>Gets or sets the computed output window FIR filter coefficients.
            </summary>
            <value>
            The computed output window FIR filter coefficients.
            </value>
            <lastupdated>5/28/2003 12:08:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.FirFilterComplexBase.TemporaryFilterConditions">
            <exclude/>
            <lastupdated>5/8/2003 6:50:58 PM</lastupdated>
            <updatedby>Nandan</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.FirFilterComplexBase.SamplingFrequency">
            <summary>
            Gets the sampling frequency, in hertz.
            </summary>
            <value>
            The sampling frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:08:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.FirFilterComplexBase.NumberOfCoefficients">
            <summary>Gets or sets the desired length of the window FIR filter.
            </summary>
            <value>
            The desired length of the window FIR filter. This parameter must be between 8 and 511, inclusive.
            </value>
            <lastupdated>5/28/2003 12:08:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerStopbandFrequency">
            The lower stopband frequency, in hertz. The lower stopband is [0, <paramref name="lowerStopbandFrequency"/>].
            </param>
            <param name="lowerPassbandFrequency">
            The lower passband frequency, in hertz. The passband is [<paramref name="lowerPassbandFrequency"/>, <paramref name="upperPassbandFrequency"/>].
            </param>
            <param name="upperPassbandFrequency">
            The upper passband frequency, in hertz. The passband is [<paramref name="lowerPassbandFrequency"/>, <paramref name="upperPassbandFrequency"/>].
            </param>
            <param name="upperStopbandFrequency">
            The upper stopband frequency, in hertz. The upper stopband is [<paramref name="upperStopbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is greater than <paramref name="lowerPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is greater than <paramref name="upperPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> is greater than <paramref name="upperStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/26/2003 9:47:46 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilterComplex.Reset(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerStopbandFrequency">
            The lower stopband frequency, in hertz. The lower stopband is [0, <paramref name="lowerStopbandFrequency"/>].
            </param>
            <param name="lowerPassbandFrequency">
            The lower passband frequency, in hertz. The passband is [<paramref name="lowerPassbandFrequency"/>, <paramref name="upperPassbandFrequency"/>].
            </param>
            <param name="upperPassbandFrequency">
            The upper passband frequency, in hertz. The passband is [<paramref name="lowerPassbandFrequency"/>, <paramref name="upperPassbandFrequency"/>].
            </param>
            <param name="upperStopbandFrequency">
            The upper stopband frequency, in hertz. The upper stopband is [<paramref name="upperStopbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is greater than <paramref name="lowerPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is greater than <paramref name="upperPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> is greater than <paramref name="upperStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:07:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilterComplex.LowerStopbandFrequency">
            <summary>
            Gets the lower stopband frequency, in hertz.
            </summary>
            <value>
            The lower stopband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:02:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilterComplex.LowerPassbandFrequency">
            <summary>
            Gets the lower passband frequency, in hertz.
            </summary>
            <value>
            The lower passband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:02:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilterComplex.UpperPassbandFrequency">
            <summary>
            Gets the upper passband frequency, in hertz.
            </summary>
            <value>
            The upper passband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:02:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandpassFilterComplex.UpperStopbandFrequency">
            <summary>
            Gets the upper stopband frequency, in hertz.
            </summary>
            <value>
            The upper stopband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:02:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter">
            <summary>Implements an EquiRipple bandstop filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            <package name="Enterprise"/>
            </packages>
            <remarks>
            The filter is implemented with an FIR filter with equi-ripple characteristics using the Parks-McClellan algorithm.
            </remarks>
            <lastupdated>5/29/2012 10:50:43 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerPassbandFrequency">
            The lower stopband frequency, in hertz. The lower passband is [0, <paramref name="lowerPassbandFrequency"/>].
            </param>
            <param name="lowerStopbandFrequency">
            The upper stopband frequency, in hertz. The stopband is [<paramref name="lowerStopbandFrequency"/>, <paramref name="upperStopbandFrequency"/>].
            </param>
            <param name="upperStopbandFrequency">
            The lower passband frequency, in hertz. The stopband is [<paramref name="lowerStopbandFrequency"/>, <paramref name="upperStopbandFrequency"/>].
            </param>
            <param name="upperPassbandFrequency">
            The upper passband frequency, in hertz. The upper passband is [<paramref name="upperPassbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is greater than <paramref name="lowerStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is greater than than <paramref name="upperStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> is greater than <paramref name="upperPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:08:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter.Reset(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerPassbandFrequency">
            The lower stopband frequency, in hertz. The lower passband is [0, <paramref name="lowerPassbandFrequency"/>].
            </param>
            <param name="lowerStopbandFrequency">
            The upper stopband frequency, in hertz. The stopband is [<paramref name="lowerStopbandFrequency"/>, <paramref name="upperStopbandFrequency"/>].
            </param>
            <param name="upperStopbandFrequency">
            The lower passband frequency, in hertz. The stopband is [<paramref name="lowerStopbandFrequency"/>, <paramref name="upperStopbandFrequency"/>].
            </param>
            <param name="upperPassbandFrequency">
            The upper passband frequency, in hertz. The upper passband is [<paramref name="upperPassbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is greater than <paramref name="lowerStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is greater than than <paramref name="upperStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> is greater than <paramref name="upperPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:08:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter.LowerPassbandFrequency">
            <summary>
            Gets the lower passband frequency, in hertz.
            </summary>
            <value>
            The lower passband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:04:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter.LowerStopbandFrequency">
            <summary>
            Gets the lower stopband frequency, in hertz.
            </summary>
            <value>
            The lower stopband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:04:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter.UpperStopbandFrequency">
            <summary>
            Gets the upper stopband frequency, in hertz.
            </summary>
            <value>
            The upper stopband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:04:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilter.UpperPassbandFrequency">
            <summary>
            Gets the upper passband frequency, in hertz.
            </summary>
            <value>
            The upper passband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:04:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilterComplex">
            <summary>Implements an EquiRipple bandstop filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            <package name="Enterprise"/>
            </packages>
            <remarks>
            The filter is implemented with an FIR filter with equi-ripple characteristics using the Parks-McClellan algorithm.
            </remarks>
            <lastupdated>5/29/2012 10:51:03 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerPassbandFrequency">
            The lower stopband frequency, in hertz. The lower passband is [0, <paramref name="lowerPassbandFrequency"/>].
            </param>
            <param name="lowerStopbandFrequency">
            The upper stopband frequency, in hertz. The stopband is [<paramref name="lowerStopbandFrequency"/>, <paramref name="upperStopbandFrequency"/>].
            </param>
            <param name="upperStopbandFrequency">
            The lower passband frequency, in hertz. The stopband is [<paramref name="lowerStopbandFrequency"/>, <paramref name="upperStopbandFrequency"/>].
            </param>
            <param name="upperPassbandFrequency">
            The upper passband frequency, in hertz. The upper passband is [<paramref name="upperPassbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is greater than <paramref name="lowerStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is greater than than <paramref name="upperStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> is greater than <paramref name="upperPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:08:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilterComplex.Reset(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerPassbandFrequency">
            The lower stopband frequency, in hertz. The lower passband is [0, <paramref name="lowerPassbandFrequency"/>].
            </param>
            <param name="lowerStopbandFrequency">
            The upper stopband frequency, in hertz. The stopband is [<paramref name="lowerStopbandFrequency"/>, <paramref name="upperStopbandFrequency"/>].
            </param>
            <param name="upperStopbandFrequency">
            The lower passband frequency, in hertz. The stopband is [<paramref name="lowerStopbandFrequency"/>, <paramref name="upperStopbandFrequency"/>].
            </param>
            <param name="upperPassbandFrequency">
            The upper passband frequency, in hertz. The upper passband is [<paramref name="upperPassbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerPassbandFrequency"/> is greater than <paramref name="lowerStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerStopbandFrequency"/> is greater than than <paramref name="upperStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperStopbandFrequency"/> is greater than <paramref name="upperPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperPassbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:08:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilterComplex.LowerPassbandFrequency">
            <summary>
            Gets the lower passband frequency, in hertz.
            </summary>
            <value>
            The lower passband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:04:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilterComplex.LowerStopbandFrequency">
            <summary>
            Gets the lower stopband frequency, in hertz.
            </summary>
            <value>
            The lower stopband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:04:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilterComplex.UpperStopbandFrequency">
            <summary>
            Gets the upper stopband frequency, in hertz.
            </summary>
            <value>
            The upper stopband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:04:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleBandstopFilterComplex.UpperPassbandFrequency">
            <summary>
            Gets the upper passband frequency, in hertz.
            </summary>
            <value>
            The upper passband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:04:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter">
            <summary>Implements an EquiRipple general filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>11/3/2011 2:34:22 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.#ctor(NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType,System.Int32,System.Double[],System.Double[],System.Double,System.Double[],System.Int32)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterType">
            The <see cref="T:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType"/>.
            </param>
            <param name="numberOfBands">
            The number of bands in the desired filter.
            </param>
            <param name="desiredFrequencyResponse">
            The desired frequency response in the <format type="italics">i</format><format type="superscript">th</format> band. 
            </param>
            <param name="weights">
            The desired weighting factor in the <format type="italics">i</format><format type="superscript">th</format> band. 
            The weighting factor determines the relative damping of the generated ripple for the band.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequencies">
            The desired cutoff frequencies, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired length of the window FIR filter. This parameter must be between 8 and 511, inclusive.
            If <paramref name="filterType"/> is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Differentiator"/>
             or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.HilbertTransform"/>, then the value must be even.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="numberOfBands"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequencies"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequencies"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            When <see cref="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.FilterType"/> is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Multiband"/>, the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter"/> 
            generates filter coefficients for a multiband filter. <paramref name="numberOfBands"/> must be greater than or equal to two.
            </para>
            	<para>
            When <see cref="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.FilterType"/> is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Differentiator"/>, the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter"/> 
            generates filter coefficients for a differentiator. <paramref name="numberOfCoefficients"/> must be even.
            </para>
            	<para>
            When <see cref="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.FilterType"/> is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.HilbertTransform"/>, the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter"/> 
            generates filter coefficients for a Hilbert transform. <paramref name="numberOfCoefficients"/>  must be even.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/7/2004 4:57:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.Reset(NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType,System.Int32,System.Double[],System.Double[],System.Double,System.Double[],System.Int32)">
            <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterType">
            The <see cref="T:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType"/>.
            </param>
            <param name="numberOfBands">
            The number of bands in the desired filter.
            </param>
            <param name="desiredFrequencyResponse">
            The desired frequency response in the <format type="italics">i</format><format type="superscript">th</format> band. 
            </param>
            <param name="weights">
            The desired weighting factor in the <format type="italics">i</format><format type="superscript">th</format> band. 
            The weighting factor determines the relative damping of the generated ripple for the band.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequencies">
            The desired cutoff frequencies, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired length of the window FIR filter. This parameter must be between 8 and 511, inclusive.
            If <paramref name="filterType"/> is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Differentiator"/>
             or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.HilbertTransform"/>, then the value must be even.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="numberOfBands"/> is less than or equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequencies"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequencies"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:08:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.GetWeights">
            <summary>Gets the desired weighting factor in the <format type="italics">i</format><format type="superscript">th</format> band.
            </summary>
            <returns>
            The desired weighting factor in the <format type="italics">i</format><format type="superscript">th</format> band.
            </returns>
            <remarks>
            The weighting factor determines the relative damping of the generated ripple for the band.
            <para>
            A higher value causes a smaller ripple to be generated for the band.  
            Whether a value is high or low depends on its relation to the average of all the 
            weights in the array. To achieve uniform ripple for all bands, 
            set each element of the array to the same positive value, specifically, 1.0.
            </para>
            </remarks>
            <lastupdated>6/2/2003 1:55:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.GetDesiredFrequencyResponse">
            <summary>
            Gets the desired frequency response in the <format type="italics">i</format><format type="superscript">th</format> band.
            </summary>
            <returns>
            The desired frequency response in the <format type="italics">i</format><format type="superscript">th</format> band.  </returns>
            <remarks>
            The values in the array should be between 0.0 and 1.0. A value of 0.0 indicates that the corresponding band is 
            a stopband.  A value of 1.0 indicates that the corresponding band is a pass band.
            If the filter type is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Multiband"/> 
            and the number of coefficients is even, then the last array value must be 0.
             </remarks>
            <lastupdated>6/26/2003 9:43:36 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.GetCutOffFrequencies">
            <summary>
            Gets the cutoff frequencies, in hertz.
            </summary>
            <returns>
            The cutoff frequencies, in hertz.
            </returns>
            <remarks>
            This array specifies the frequency values of the lower and upper end points of each band.  The array contains two entries for each band, as follows:
            <para indent="true">
            Cutoffs[0]<entity value="mdash"/>First band, lower;
            </para>
            	<para indent="true">
            Cutoffs[1]<entity value="mdash"/>First band, upper;
            </para>
            	<para indent="true">
            Cutoffs[2]<entity value="mdash"/>Second band, lower;
            </para>
            	<para indent="true">
            Cutoffs[3]<entity value="mdash"/>Second band, upper; etc.
            </para>
            	<para indent="false">
            If the filter type is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Multiband"/> or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Differentiator"/>, then Cutoffs[0] must be 0.
            </para>
            	<para>
             If the filter type is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.HilbertTransform"/>, then Cutoffs[0] must NOT be 0.  It is recommended that you use a value slightly greater than zero in order to define a transitional region.
            </para>
             For all filter types, 
            <para indent="true">
            Cutoffs[(2 * NumberOfBands) <entity value="ndash"/>1]
            <para>
            must be, 
            </para>
            		<para indent="true">
            Sampling Frequency / 2.
            </para>
            	</para>
            </remarks>
            <lastupdated>6/2/2003 1:55:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.FilterType">
            <summary>
            Gets the general EquiRipple filter type.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType"/>.
            </value>
            <remarks>
            	<para>
            When <see cref="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.FilterType"/> is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Multiband"/>, the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter"/> 
            generates filter coefficients for a multiband filter. The number of bands must be greater than or equal to two.
            </para>
            	<para>
            When <see cref="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.FilterType"/> is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Differentiator"/>, the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter"/> 
            generates filter coefficients for a differentiator. The number of coefficients must be even.
            </para>
            	<para>
            When <see cref="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.FilterType"/> is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.HilbertTransform"/>, the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter"/> 
            generates filter coefficients for a Hilbert transform. The number of coefficients must be even.
            </para>
            </remarks>
            <lastupdated>7/7/2004 4:56:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.Delta">
            <summary>
            Gets the computed normalized, absolute ripple size.
            </summary>
            <value>
            The computed normalized, absolute ripple size.
            </value>
            <remarks>
            To obtain the amplitude of a passband ripple in decibels, use the following formula:
            <para indent="true">
            20 * log(1 + <see cref="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.Delta"/> / <see cref="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.GetWeights"/>[i])
            </para>                   
            To obtain the attenuation of a stopband in decibels, use the following formula:
            <para indent="true">
            20 * log(<see cref="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.Delta"/> / <see cref="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.GetWeights"/>[i])
            </para>
            </remarks>
            <lastupdated>5/28/2003 12:06:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilter">
            <summary>Implements an EquiRipple highpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            <package name="Enterprise"/>
            </packages>
            <remarks>
            The filter is implemented with an FIR filter with equi-ripple characteristics using the Parks-McClellan algorithm.
            </remarks>
            <lastupdated>5/29/2012 10:53:53 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilter.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="highestStopbandFrequency">
            The highest stopband frequency, in hertz. The stopband is [0, <paramref name="highestStopbandFrequency"/>].
            </param>
            <param name="lowestPassbandFrequency">
            The lowest passband frequency, in hertz. The passband is [<paramref name="lowestPassbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestStopbandFrequency"/> is greater than <paramref name="lowestPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestPassbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:09:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilter.Reset(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="highestStopbandFrequency">
            The highest stopband frequency, in hertz. The stopband is [0, <paramref name="highestStopbandFrequency"/>].
            </param>
            <param name="lowestPassbandFrequency">
            The lowest passband frequency, in hertz. The passband is [<paramref name="lowestPassbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestStopbandFrequency"/> is greater than <paramref name="lowestPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestPassbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/26/2003 9:53:35 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilter.HighestStopbandFrequency">
            <summary>
            Gets the highest stopband frequency, in hertz.
            </summary>
            <value>
            The highest stopband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:07:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilter.LowestPassbandFrequency">
            <summary>
            Gets the lowest passband frequency, in hertz.
            </summary>
            <value>
            The lowest passband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:07:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilterComplex">
            <summary>Implements an EquiRipple highpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            <package name="Enterprise"/>
            </packages>
            <remarks>
            The filter is implemented with an FIR filter with equi-ripple characteristics using the Parks-McClellan algorithm.
            </remarks>
            <lastupdated>5/29/2012 10:54:13 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="highestStopbandFrequency">
            The highest stopband frequency, in hertz. The stopband is [0, <paramref name="highestStopbandFrequency"/>].
            </param>
            <param name="lowestPassbandFrequency">
            The lowest passband frequency, in hertz. The passband is [<paramref name="lowestPassbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestStopbandFrequency"/> is greater than <paramref name="lowestPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestPassbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:09:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilterComplex.Reset(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="highestStopbandFrequency">
            The highest stopband frequency, in hertz. The stopband is [0, <paramref name="highestStopbandFrequency"/>].
            </param>
            <param name="lowestPassbandFrequency">
            The lowest passband frequency, in hertz. The passband is [<paramref name="lowestPassbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestStopbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestStopbandFrequency"/> is greater than <paramref name="lowestPassbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestPassbandFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestPassbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/26/2003 9:53:35 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilterComplex.HighestStopbandFrequency">
            <summary>
            Gets the highest stopband frequency, in hertz.
            </summary>
            <value>
            The highest stopband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:07:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilterComplex.LowestPassbandFrequency">
            <summary>
            Gets the lowest passband frequency, in hertz.
            </summary>
            <value>
            The lowest passband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:07:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilter">
            <summary>Implements an EquiRipple lowpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            <package name="Enterprise"/>
            </packages>
            <remarks>
            The filter is implemented with an FIR filter with equi-ripple characteristics using the Parks-McClellan algorithm.
            </remarks>
            <lastupdated>5/29/2012 10:55:03 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilter.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="highestPassbandFrequency">
            The highest passband frequency, in hertz. The passband is [0, <paramref name="highestPassbandFrequency"/>].
            </param>
            <param name="lowestStopbandFrequency">
            The lowest stopband frequency, in hertz. The stopband is [<paramref name="lowestStopbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestPassbandFrequency"/> is less than or equal zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestPassbandFrequency"/> is greater than <paramref name="lowestStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestStopbandFrequency"/> is less than or equal zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestStopbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:09:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilter.Reset(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="highestPassbandFrequency">
            The highest passband frequency, in hertz. The passband is [0, <paramref name="highestPassbandFrequency"/>].
            </param>
            <param name="lowestStopbandFrequency">
            The lowest stopband frequency, in hertz. The stopband is [<paramref name="lowestStopbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestPassbandFrequency"/> is less than or equal zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestPassbandFrequency"/> is greater than <paramref name="lowestStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestStopbandFrequency"/> is less than or equal zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestStopbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/26/2003 9:54:13 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilter.LowestStopbandFrequency">
            <summary>
            Gets the lowest stopband frequency, in hertz.
            </summary>
            <value>
            The lowest stopband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:07:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilter.HighestPassbandFrequency">
            <summary>
            Gets the highest passband frequency, in hertz.
            </summary>
            <value>
            The highest passband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:07:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilterComplex">
            <summary>Implements an EquiRipple lowpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            <package name="Enterprise"/>
            </packages>
            <remarks>
            The filter is implemented with an FIR filter with equi-ripple characteristics using the Parks-McClellan algorithm.
            </remarks>
            <lastupdated>5/29/2012 10:55:19 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleHighpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="highestPassbandFrequency">
            The highest passband frequency, in hertz. The passband is [0, <paramref name="highestPassbandFrequency"/>].
            </param>
            <param name="lowestStopbandFrequency">
            The lowest stopband frequency, in hertz. The stopband is [<paramref name="lowestStopbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestPassbandFrequency"/> is less than or equal zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestPassbandFrequency"/> is greater than <paramref name="lowestStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestStopbandFrequency"/> is less than or equal zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestStopbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:09:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilterComplex.Reset(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Clears the history of the filter in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="highestPassbandFrequency">
            The highest passband frequency, in hertz. The passband is [0, <paramref name="highestPassbandFrequency"/>].
            </param>
            <param name="lowestStopbandFrequency">
            The lowest stopband frequency, in hertz. The stopband is [<paramref name="lowestStopbandFrequency"/>, <paramref name="samplingFrequency"/>/2].
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. This parameter must be between 8 and 511, inclusive.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestPassbandFrequency"/> is less than or equal zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="highestPassbandFrequency"/> is greater than <paramref name="lowestStopbandFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestStopbandFrequency"/> is less than or equal zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowestStopbandFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		Invalid band specification.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		EquiRipple design error. The filter cannot be designed with the specified input parameters.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/26/2003 9:54:13 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilterComplex.LowestStopbandFrequency">
            <summary>
            Gets the lowest stopband frequency, in hertz.
            </summary>
            <value>
            The lowest stopband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:07:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleLowpassFilterComplex.HighestPassbandFrequency">
            <summary>
            Gets the highest passband frequency, in hertz.
            </summary>
            <value>
            The highest passband frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:07:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Internal.FilterType">
            <summary>
            Specifies the type of filter to be created.
            </summary>
            <lastupdated>5/28/2003 12:20:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Internal.FilterType.LowPass">
            <summary>
            Creates a lowpass filter.
            </summary>
            <lastupdated>5/28/2003 12:20:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Internal.FilterType.HighPass">
            <summary>
            Creates a highpass filter.
            </summary>
            <lastupdated>5/28/2003 12:20:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Internal.FilterType.BandPass">
            <summary>
            Creates a bandpass filter.
            </summary>
            <lastupdated>5/28/2003 12:20:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Internal.FilterType.BandStop">
            <summary>
            Creates a bandstop filter.
            </summary>
            <lastupdated>5/28/2003 12:20:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter">
            <summary>
            Implements a class that filters the input sequence using the direct form FIR filter specified by the forward coefficients.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Use this class if you want to provide your own forward coefficients. 
            <para indent="true">
            		<image src="FirFilter.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> is the input array,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">b</format></format> is the number of FIR Coefficients, and
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            b<format type="subscript">j</format></format> is FIR Coefficients.</description>
            		</item>
            	</list>
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex"/>
            <lastupdated>10/23/2006 3:57:29 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.#ctor(System.Double[])">
            <summary>
            Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter"/> that filters the input sequence using the direct form FIR filter 
            specified by the forward coefficients.
            </summary>
            <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
            <remarks>
            Use this class if you want to provide your own forward coefficients. 
            <para indent="true">
            		<image src="FirFilter.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> is the input array,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">b</format></format> is the number of FIR Coefficients, and
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            b<format type="subscript">j</format></format> is FIR Coefficients.</description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/23/2006 3:57:54 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.#ctor(System.Double[],System.Double[])">
            <summary>
            Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter"/> that filters the input sequence using the direct form FIR filter 
            specified by the forward coefficients and by using the specified initial conditions.
            </summary>
            <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
            <param name="initialXConditions">
            The most recent inputs. The most recent prior input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the <paramref name="forwardCoefficients"/> array. 
            </param>
            <remarks>
            Use this class if you want to provide your own forward coefficients. 
            <para indent="true">
            		<image src="FirFilter.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> is the input array,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">b</format></format> is the number of FIR Coefficients, and
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            b<format type="subscript">j</format></format> is FIR Coefficients.</description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The size of <paramref name="initialXConditions"/> must be at least the size of <paramref name="forwardCoefficients"/>
            	<entity value="ndash"/> 1.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/16/2006 11:18:30 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.GetCurrentFilterConditions">
            <summary>
            Gets a copy of the current filter conditions.
            </summary>
            <value>
            A copy of the most recent inputs, which are used as the initial X conditions for the next iteration.
            </value>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <lastupdated>9/16/2009 4:26:10 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.Reset">
            <summary>
            Clears the history of the filter in order to start a new data set. 
            </summary>
            <remarks>
            The forward coefficients that are used when the filter is created are retained.
            If initial X conditions are specified when the filter is created, then these settings are also retained.
            </remarks>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:22:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.Reset(System.Double[])">
            <summary>
            Clears the history of the filter in order to start a new data set using the new forward coefficients.
            </summary>
            <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
            <remarks>
            If initial X conditions are specified when the filter is created, then 
            these settings are discarded. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:22:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.Reset(System.Double[],System.Double[])">
            <summary>
            Clears the history of the filter in order to start a new data set using the new forward coefficients and a new set of initial conditions.
            </summary>
            <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
            <param name="initialXConditions">
            The most recent inputs. The most recent input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the <paramref name="forwardCoefficients"/> array. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The size of <paramref name="initialXConditions"/> is not at least the size of <paramref name="forwardCoefficients"/>
            	<entity value="ndash"/> 1.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/23/2006 3:58:37 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter.FilterData(System.Double[])">
            <summary>
            Filters the input sequence using the direct form FIR filter specified by the forward coefficients.
            </summary>
            <param name="inputData">
            The data to filter.
            </param>
            <returns>
            The filtered data.
            </returns>
            <remarks>
            Use this class if you want to provide your own forward coefficients. 
            <para indent="true">
            		<image src="FirFilter.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> is the input array,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">b</format></format> is the number of FIR Coefficients, and
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            b<format type="subscript">j</format></format> is FIR Coefficients.</description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/16/2006 11:19:05 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex">
            <summary>
            Implements a class that filters the input sequence using the direct form FIR filter specified by the forward coefficients.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Use this class if you want to provide your own forward coefficients and the input sequence is <see cref="T:NationalInstruments.ComplexDouble"/>. 
            <para indent="true">
            		<image src="FirFilter.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> is the input array,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">b</format></format> is the number of FIR Coefficients, and
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            b<format type="subscript">j</format></format> is FIR Coefficients.</description>
            		</item>
            	</list>
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter"/>
            <lastupdated>10/23/2006 3:59:43 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.#ctor(System.Double[])">
            <summary>
            Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter"/> that filters the input sequence using the direct form FIR filter 
            specified by the forward coefficients.
            </summary>
            <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
            <remarks>
            Use this class if you want to provide your own forward coefficients. The input sequence is filtered using the direct form FIR filter and the forward coefficients using the following formula:
            <para indent="true">
            		<image src="FirFilter.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> is the input array,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">b</format></format> is the number of FIR Coefficients, and
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            b<format type="subscript">j</format></format> is FIR Coefficients.</description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/16/2006 11:21:07 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.#ctor(System.Double[],NationalInstruments.ComplexDouble[])">
            <summary>
            Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilter"/> that filters the input sequence using the direct form FIR filter 
            specified by the forward coefficients and by using the specified initial conditions.
            </summary>
            <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
            <param name="initialXConditions">
            The most recent inputs. The most recent prior input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the <paramref name="forwardCoefficients"/> array. 
            </param>
            <remarks>
            Use this class if you want to provide your own forward coefficients. The input sequence is filtered using the direct form FIR filter and the forward coefficients using the following formula:
            <para indent="true">
            		<image src="FirFilter.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> is the input array,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">b</format></format> is the number of FIR Coefficients, and
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            b<format type="subscript">j</format></format> is FIR Coefficients.</description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The size of <paramref name="initialXConditions"/> must be at least the size of <paramref name="forwardCoefficients"/>
            	<entity value="ndash"/> 1.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/16/2006 11:21:22 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.GetCurrentFilterConditions">
            <summary>
            Gets a copy of the current filter conditions.
            </summary>
            <value>
            A copy of the most recent inputs, which are used as the initial X conditions for the next iteration.
            </value>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <lastupdated>9/16/2009 4:27:37 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.Reset">
            <summary>
            Clears the history of the filter in order to start a new data set. 
            </summary>
            <remarks>
            The forward coefficients that are used when the filter is created are retained.
            If initial X conditions are specified when the filter is created, then these settings are also retained.
            </remarks>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:26:22 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.Reset(System.Double[])">
            <summary>
            Clears the history of the filter in order to start a new data set using the new forward coefficients.
            </summary>
            <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
            <remarks>
            If initial X conditions are specified when the filter is created, then 
            these settings are discarded. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:26:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.Reset(System.Double[],NationalInstruments.ComplexDouble[])">
            <summary>
            Clears the history of the filter in order to start a new data set using the new forward coefficients and a new set of initial conditions.
            </summary>
            <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
            <param name="initialXConditions">
            The most recent inputs. The most recent input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the <paramref name="forwardCoefficients"/> array. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The size of <paramref name="initialXConditions"/> is not at least the size of <paramref name="forwardCoefficients"/>
            	<entity value="ndash"/> 1.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/23/2006 4:00:19 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.FirDirectFilterComplex.FilterData(NationalInstruments.ComplexDouble[])">
            <summary>
            Filters the input sequence using the direct form FIR filter specified by the forward coefficients.
            </summary>
            <param name="inputData">
            The data to filter.
            </param>
            <returns>
            The filtered data.
            </returns>
            <remarks>
            The input sequence is filtered using the direct form FIR filter and forward coefficients using the following formula:
            <para indent="true">
            		<image src="FirFilter.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> is the input array,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">b</format></format> is the number of FIR Coefficients, and
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            b<format type="subscript">j</format></format> is FIR Coefficients.</description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/16/2006 11:20:42 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType">
            <summary>
            Specifies the types of windows to be used.
            </summary>
            <lastupdated>5/28/2003 12:20:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Rectangular">
            <summary>
            A rectangular scaled window.
            </summary>
            <lastupdated>9/13/2005 2:15:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Hanning">
            <summary>
            A Hanning scaled window. This is the default value.
            </summary>
            <lastupdated>9/13/2005 2:15:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Hamming">
            <summary>
            A Hamming scaled window.
            </summary>
            <lastupdated>9/13/2005 2:15:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.BlackmanHarris">
            <summary>
            A Blackman-Harris scaled window.
            </summary>
            <lastupdated>9/13/2005 2:13:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.ExactBlackman">
            <summary>
            An exact Blackman scaled window.
            </summary>
            <lastupdated>9/13/2005 2:14:40 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Blackman">
            <summary>
            A Blackman scaled window.
            </summary>
            <lastupdated>9/13/2005 2:13:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.FlatTop">
            <summary>
            A flat top window.
            </summary>
            <lastupdated>9/13/2005 2:14:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.BlackmanHarris4Term">
            <summary>
            A 4-term Blackman-Harris scaled window.
            </summary>
            <lastupdated>9/13/2005 2:14:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.BlackmanHarris7Term">
            <summary>
            A 7-term Blackman-Harris scaled window.
            </summary>
            <lastupdated>9/13/2005 2:14:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.LowSidelobe">
            <summary>
            A low side lobe scaled window.
            </summary>
            <lastupdated>9/13/2005 2:15:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.BlackmanNuttall">
            <summary>
            A Blackman-Nuttall scaled window.
            </summary>
            <lastupdated>9/13/2005 2:14:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Triangle">
            <summary>
            A triangle scaled window.
            </summary>
            <lastupdated>9/13/2005 2:16:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser">
            <summary>
            A Kaiser scaled window.
            </summary>
            <lastupdated>9/13/2005 2:15:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev">
            <summary>
            A Dolph-Chebyshev scaled window.
            </summary>
            <lastupdated>9/13/2005 2:14:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian">
            <summary>
            A Gaussian scaled window.
            </summary>
            <lastupdated>9/13/2005 2:15:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType">
            <summary>
            Specifies the type of EquiRipple filter to use.
            </summary>
            <remarks>
            	<para>
            When <see cref="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.FilterType"/> is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Multiband"/>, the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter"/> 
            generates filter coefficients for a multiband filter. The number of bands must be greater than or equal to two.
            </para>
            	<para>
            When <see cref="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.FilterType"/> is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Differentiator"/>, the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter"/> 
            generates filter coefficients for a differentiator. The number of coefficients must be even.
            </para>
            	<para>
            When <see cref="P:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter.FilterType"/> is <see cref="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.HilbertTransform"/>, the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.EquiRippleGeneralFilter"/> 
            generates filter coefficients for a Hilbert transform. The number of coefficients must be even.
            </para>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>7/7/2004 4:58:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Multiband">
            <summary>
            A multiband filter type.
            </summary>
            <lastupdated>7/7/2004 4:59:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.Differentiator">
            <summary>
            A differentiator filter type.
            </summary>
            <lastupdated>7/7/2004 4:59:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.Filters.GeneralEquiRippleFilterType.HilbertTransform">
            <summary>
            A Hilbert transform filter type.
            </summary>
            <lastupdated>7/7/2004 4:59:40 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter">
            <summary>
            Implements a class that filters the input sequence using the direct form IIR filter specified by the reverse coefficients and forward coefficients.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Use this class if you want to provide your own reverse coefficients and forward coefficients. The input sequence is filtered using the direct form IIR filter and the reverse coefficients and forward coefficients using the following formula:
            <para indent="true">
            		<image src="IIRFiltering.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">x</format> is the input data,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">y</format> is the filtered data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">nb</format> is the number of forward coefficients,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format><format type="subscript">i</format> are the forward coefficients, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">na</format> is the number of reverse coefficients, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format><format type="subscript">i</format> are the reverse coefficients.
            </description>
            		</item>
            	</list>
            	<para>The filter initialization uses the following equations:
            <para indent="true"><format type="italics">y</format><format type="subscript">i</format> = <format type="italics">y</format><format type="subscript">ic</format>[na + <format type="italics">i</format>
            			<entity value="ndash"/> 1]  for <format type="italics">i</format>
            			&lt;0
            </para>
            		<para indent="true"><format type="italics">x</format><format type="subscript">i</format> = <format type="italics">y</format><format type="subscript">ic</format>[nb + <format type="italics">i</format>
            			<entity value="ndash"/> 1]  for <format type="italics">i</format>
            			&lt;0
            </para>where <format type="italics">y</format><format type="subscript">ic</format> is the array of initial Y conditions and <format type="italics">x</format><format type="subscript">ic</format> is the array of initial X conditions.
            	</para>
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex"/>
            <lastupdated>10/15/2006 4:28:32 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.#ctor(System.Double[],System.Double[])">
            <summary>
            Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter"/> that filters the input sequence using the direct form IIR filter 
            specified by the reverse coefficients and forward coefficients.
            </summary>
            <param name="reverseCoefficients">
            The reverse coefficients of the filter design.
            </param>
            <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
            <remarks>
            Use this class if you want to provide your own reverse coefficients and forward coefficients. The input sequence is filtered using the direct form IIR filter and the reverse coefficients and forward coefficients using the following formula:
            <para indent="true">
            		<image src="IIRFiltering.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">x</format> is the input data,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">y</format> is the filtered data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">nb</format> is the number of forward coefficients,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format><format type="subscript">i</format> are the forward coefficients, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">na</format> is the number of reverse coefficients, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format><format type="subscript">i</format> are the reverse coefficients.
            </description>
            		</item>
            	</list>
            	<para>The filter initialization uses the following equations:
            <para indent="true"><format type="italics">y</format><format type="subscript">i</format> = <format type="italics">y</format><format type="subscript">ic</format>[na + <format type="italics">i</format>
            			<entity value="ndash"/> 1]  for <format type="italics">i</format>
            			&lt;0
            </para>
            		<para indent="true"><format type="italics">x</format><format type="subscript">i</format> = <format type="italics">y</format><format type="subscript">ic</format>[nb + <format type="italics">i</format>
            			<entity value="ndash"/> 1]  for <format type="italics">i</format>
            			&lt;0
            </para>where <format type="italics">y</format><format type="subscript">ic</format> is the array of initial Y conditions and <format type="italics">x</format><format type="subscript">ic</format> is the array of initial X conditions.
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="reverseCoefficients"/> is <see langword="null"/>. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 10:05:40 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.#ctor(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter"/> that filters the input sequence using the direct form IIR filter 
            specified by the reverse coefficients and forward coefficients, and using the specified initial conditions.
            </summary>
            <param name="reverseCoefficients">
            The reverse coefficients of the filter design.
            </param>
            <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
            <param name="initialYConditions">
            The most recent outputs. The most recent output must be the last element in the array. The number of elements 
            in this array must be at least one less than the number of elements in the <paramref name="reverseCoefficients"/> array. 
            </param>
            <param name="initialXConditions">
            The most recent inputs. The most recent input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the <paramref name="forwardCoefficients"/> array. 
            </param>
            <remarks>
            Use this class if you want to provide your own reverse coefficients and forward coefficients. The input sequence is filtered using the direct form IIR filter and the reverse coefficients and forward coefficients using the following formula:
            <para indent="true">
            		<image src="IIRFiltering.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">x</format> is the input data,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">y</format> is the filtered data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">nb</format> is the number of forward coefficients,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format><format type="subscript">i</format> are the forward coefficients, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">na</format> is the number of reverse coefficients, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format><format type="subscript">i</format> are the reverse coefficients.
            </description>
            		</item>
            	</list>
            	<para>The filter initialization uses the following equations:
            <para indent="true"><format type="italics">y</format><format type="subscript">i</format> = <format type="italics">y</format><format type="subscript">ic</format>[na + <format type="italics">i</format>
            			<entity value="ndash"/> 1]  for <format type="italics">i</format>
            			&lt;0
            </para>
            		<para indent="true"><format type="italics">x</format><format type="subscript">i</format> = <format type="italics">y</format><format type="subscript">ic</format>[nb + <format type="italics">i</format>
            			<entity value="ndash"/> 1]  for <format type="italics">i</format>
            			&lt;0
            </para>where <format type="italics">y</format><format type="subscript">ic</format> is the array of initial Y conditions and <format type="italics">x</format><format type="subscript">ic</format> is the array of initial X conditions.
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="reverseCoefficients"/> is <see langword="null"/>. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The size of <paramref name="initialYConditions"/> is not at least the size of <paramref name="reverseCoefficients"/>
            		<entity value="ndash"/> 1.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<para>
            The size of <paramref name="initialXConditions"/> is not at least the size of <paramref name="forwardCoefficients"/>
            			<entity value="ndash"/> 1.
            </para>
            	</para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/23/2006 4:02:38 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.GetFilterConditions(System.Double[]@,System.Double[]@)">
            <summary>
            Gets the current filter conditions.
            </summary>
            <param name="finalYConditions">
            Gets the most recent outputs, which are used as the initial Y conditions for the next iteration. 
            </param>
            <param name="finalXConditions">
            Gets the most recent outputs, which are used as the initial X conditions for the next iteration.
            </param>
            <lastupdated>10/23/2006 4:01:24 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.Reset">
            <summary>
            Clears the history of the filter in order to start a new data set. 
            </summary>
            <remarks>
            The reverse coefficients and forward coefficients that were used when the filter was created are retained.
            If initial X conditions and Y conditions were specified when the filter was created, then these settings are also retained.
            </remarks>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/6/2006 10:12:39 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.Reset(System.Double[],System.Double[])">
            <summary>
            Clears the history of the filter in order to start a new data set using the new reverse coefficients and forward coefficients.
            </summary>
            <param name="reverseCoefficients">
            The new reverse coefficients of the filter design.
            </param>
            <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
            <remarks>
            If initial X conditions and initial Y conditions were specified when the filter was created, then 
            these settings are discarded. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="reverseCoefficients"/> is <see langword="null"/>. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The size of the initial Y conditions when the filter was created is not at least the size of <paramref name="reverseCoefficients"/>
            		<entity value="ndash"/> 1.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<para>
            The size of the initial X conditions when the filter was created is not at least the size of <paramref name="forwardCoefficients"/>
            			<entity value="ndash"/> 1.
            </para>
            	</para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/23/2006 4:03:03 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.Reset(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Clears the history of the filter in order to start a new data set using the new reverse coefficients and forward coefficients, and a new set of initial conditions.
            </summary>
            <param name="reverseCoefficients">
            The new reverse coefficients of the filter design.
            </param>
            <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
            <param name="initialYConditions">
            The most recent outputs. The most recent output must be the last element in the array. The number of elements 
            in this array must be at least one less than the number of elements in the <paramref name="reverseCoefficients"/> array. 
            </param>
            <param name="initialXConditions">
            The most recent inputs. The most recent input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the <paramref name="forwardCoefficients"/> array. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="reverseCoefficients"/> is <see langword="null"/>. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The size of <paramref name="initialYConditions"/> is not at least the size of <paramref name="reverseCoefficients"/>
            		<entity value="ndash"/> 1.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<para>
            The size of <paramref name="initialXConditions"/> is not at least the size of <paramref name="forwardCoefficients"/>
            			<entity value="ndash"/> 1.
            </para>
            	</para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/23/2006 4:03:58 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter.FilterData(System.Double[])">
            <summary>
            Filters the input sequence using the direct form IIR filter specified by the reverse coefficients and the forward coefficients.
            </summary>
            <param name="inputData">
            The data to be filtered.
            </param>
            <returns>
            The filtered data.
            </returns>
            <remarks>
            The input sequence is filtered using the direct form IIR filter and the reverse coefficients and forward coefficients using the following formula:
            <para indent="true">
            		<image src="IIRFiltering.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">x</format> is the input data,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">y</format> is the filtered data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">nb</format> is the number of forward coefficients,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format><format type="subscript">i</format> are the forward coefficients, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">na</format> is the number of reverse coefficients, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format><format type="subscript">i</format> are the reverse coefficients.
            </description>
            		</item>
            	</list>
            	<para>The filter initialization uses the following equations:
            <para indent="true"><format type="italics">y</format><format type="subscript">i</format> = <format type="italics">y</format><format type="subscript">ic</format>[na + <format type="italics">i</format>
            			<entity value="ndash"/> 1]  for <format type="italics">i</format>
            			&lt;0
            </para>
            		<para indent="true"><format type="italics">x</format><format type="subscript">i</format> = <format type="italics">y</format><format type="subscript">ic</format>[nb + <format type="italics">i</format>
            			<entity value="ndash"/> 1]  for <format type="italics">i</format>
            			&lt;0
            </para>where <format type="italics">y</format><format type="subscript">ic</format> is the array of initial Y conditions and <format type="italics">x</format><format type="subscript">ic</format> is the array of initial X conditions.
            	</para></remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>5/5/2006 11:04:15 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex">
            <summary>
            Implements a class that filters the input sequence using the direct form IIR filter specified by the reverse coefficients and forward coefficients.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Use this class if you want to provide your own reverse coefficients and forward coefficients and the input sequence is <see cref="T:NationalInstruments.ComplexDouble"/>. The input sequence is filtered using the direct form IIR filter and the 
            reverse coefficients and forward coefficients using the following formula:
            <para indent="true">
            		<image src="IIRFilter.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> is the input array,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">b</format></format> is the number of forward coefficients, 
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            b<format type="subscript">j</format></format> is forward coefficients,</description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">a</format></format> is the number of reverse coefficients, and</description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            a<format type="subscript">k</format></format> is reverse coefficients.</description>
            		</item>
            	</list>
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter"/>
            <lastupdated>10/23/2006 4:48:22 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.#ctor(System.Double[],System.Double[])">
            <summary>
            Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter"/> that filters the input sequence using the direct form IIR filter 
            specified by the reverse coefficients and forward coefficients.
            </summary>
            <param name="reverseCoefficients">
            The reverse coefficients of the filter design.
            </param>
            <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
            <remarks>
            Use this class if you want to provide your own reverse coefficients and forward coefficients. The input sequence is filtered using the direct form IIR filter, the reverse coefficients, and the forward coefficients using the following formula:
            <para indent="true">
            		<image src="IIRFilter.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> is the input array,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">b</format></format> is the number of forward coefficients, 
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            b<format type="subscript">j</format></format> is forward coefficients,</description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">a</format></format> is the number of reverse coefficients, and</description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            a<format type="subscript">k</format></format> is reverse coefficients.</description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="reverseCoefficients"/> is <see langword="null"/>. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/23/2006 4:49:07 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.#ctor(System.Double[],System.Double[],NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
            <summary>
            Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilter"/> that filters the input sequence using the direct form IIR filter 
            specified by the reverse coefficients and forward coefficients and by using the specified initial conditions.
            </summary>
            <param name="reverseCoefficients">
            The reverse coefficients of the filter design.
            </param>
            <param name="forwardCoefficients">
            The forward coefficients of the filter design.
            </param>
            <param name="initialYConditions">
            The most recent outputs. The most recent output must be the last element in the array. The number of elements 
            in this array must be at least one less than the number of elements in the <paramref name="reverseCoefficients"/> array. 
            </param>
            <param name="initialXConditions">
            The most recent inputs. The most recent prior input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the <paramref name="forwardCoefficients"/> array. 
            </param>
            <remarks>
            Use this class if you want to provide your own reverse coefficients and forward coefficients. The input sequence is filtered using the direct form IIR filter, the reverse coefficients, and the forward coefficients using the following formula:
            <para indent="true">
            		<image src="IIRFilterCondition.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> is the input array,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">b</format></format> is the number of forward coefficients, 
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            b<format type="subscript">j</format></format> is forward coefficients,</description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">a</format></format> is the number of reverse coefficients, and</description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            a<format type="subscript">k</format></format> is reverse coefficients.</description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="reverseCoefficients"/> is <see langword="null"/>. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The size of <paramref name="initialYConditions"/> must be at least the size of <paramref name="reverseCoefficients"/>
            		<entity value="ndash"/> 1.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<para>
            The size of <paramref name="initialXConditions"/> must be at least the size of <paramref name="forwardCoefficients"/>
            			<entity value="ndash"/> 1.
            </para>
            	</para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/23/2006 4:49:38 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.GetFilterConditions(NationalInstruments.ComplexDouble[]@,NationalInstruments.ComplexDouble[]@)">
            <summary>
            Gets the current filter conditions.
            </summary>
            <param name="finalYConditions">
            Gets the most recent outputs, which are used as the initial Y conditions for the next iteration. 
            </param>
            <param name="finalXConditions">
            Gets the most recent inputs, which are used as the initial X conditions for the next iteration.
            </param>
            <lastupdated>10/15/2006 4:30:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.Reset">
            <summary>
            Clears the history of the filter in order to start a new data set. 
            </summary>
            <remarks>
            The reverse coefficients and forward coefficients that are used when the filter is created are retained.
            If initial X conditions and Y conditions are specified when the filter is created, then these settings are also retained.
            </remarks>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:31:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.Reset(System.Double[],System.Double[])">
            <summary>
            Clears the history of the filter in order to start a new data set using the new reverse coefficients and forward coefficients.
            </summary>
            <param name="reverseCoefficients">
            The new reverse coefficients of the filter design.
            </param>
            <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
            <remarks>
            If initial X conditions and initial Y conditions are specified when the filter is created, then 
            these settings are discarded. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="reverseCoefficients"/> is <see langword="null"/>. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The size of the initial Y conditions when the filter is created must be at least the size of <paramref name="reverseCoefficients"/>
            		<entity value="ndash"/> 1.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<para>
            The size of the initial X conditions when the filter is created must be at least the size of <paramref name="forwardCoefficients"/>
            			<entity value="ndash"/> 1.
            </para>
            	</para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:32:37 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.Reset(System.Double[],System.Double[],NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
            <summary>
            Clears the history of the filter in order to start a new data set using the new reverse coefficients, the new forward coefficients, and a new set of initial conditions.
            </summary>
            <param name="reverseCoefficients">
            The new reverse coefficients of the filter design.
            </param>
            <param name="forwardCoefficients">
            The new forward coefficients of the filter design.
            </param>
            <param name="initialYConditions">
            The most recent outputs. The most recent output must be the last element in the array. The number of elements 
            in this array must be at least one less than the number of elements in the <paramref name="reverseCoefficients"/> array. 
            </param>
            <param name="initialXConditions">
            The most recent inputs. The most recent prior input must be the last element in the array. 
            The number of elements in this array must be at least one less than the number of elements in the <paramref name="forwardCoefficients"/> array. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="reverseCoefficients"/> is <see langword="null"/>. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="forwardCoefficients"/> is <see langword="null"/>. 
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The size of <paramref name="initialYConditions"/> must be at least the size of <paramref name="reverseCoefficients"/>
            		<entity value="ndash"/> 1.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<para>
            The size of <paramref name="initialXConditions"/> must be at least the size of <paramref name="forwardCoefficients"/>
            			<entity value="ndash"/> 1.
            </para>
            	</para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:33:33 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.IirDirectFilterComplex.FilterData(NationalInstruments.ComplexDouble[])">
            <summary>
            Filters the input sequence using the direct form IIR filter specified by the reverse coefficients and the forward coefficients.
            </summary>
            <param name="inputData">
            The data to be filtered.
            </param>
            <returns>
            The filtered data.
            </returns>
            <remarks>
            The input sequence is filtered using the direct form IIR filter, the reverse coefficients, and the forward coefficients using the following formula:
            <para indent="true">
            		<image src="IIRFilter.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> is the input array,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">b</format></format> is the number of forward coefficients, 
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            b<format type="subscript">j</format></format> is forward coefficients,</description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            N<format type="subscript">a</format></format> is the number of reverse coefficients, and</description>
            		</item>
            		<item>
            			<term></term>
            			<description>
            				<format type="italics"> 
            a<format type="subscript">k</format></format> is reverse coefficients.</description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/23/2006 4:48:55 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter">
            <summary>Implements an inverse Chebyshev bandpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>6/27/2003 5:04:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:11:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:11:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:10:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:10:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilter.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:10:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilterComplex">
            <summary>Implements an inverse Chebyshev bandpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:12:29 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:11:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:11:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilterComplex.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:10:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilterComplex.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:10:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandpassFilterComplex.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:10:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter">
            <summary>
            Implements an inverse Chebyshev bandstop filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>6/27/2003 5:04:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:11:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:11:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:11:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:11:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilter.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:11:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilterComplex">
            <summary>
            Implements an inverse Chebyshev bandstop filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:12:38 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:11:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:11:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilterComplex.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:11:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilterComplex.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:11:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevBandstopFilterComplex.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:11:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilter">
            <summary>
            Implements an inverse Chebyshev highpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>6/27/2003 5:04:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:12:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:12:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:11:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilter.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:11:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilterComplex">
            <summary>
            Implements an inverse Chebyshev highpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:12:45 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:12:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:12:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilterComplex.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:11:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevHighpassFilterComplex.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:11:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilter">
            <summary>
            Implements an inverse Chebyshev lowpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>6/27/2003 5:04:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilter.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:12:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilter.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:12:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:12:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilter.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:12:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilterComplex">
            <summary>
            Implements an inverse Chebyshev lowpass filter for complex signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This filter is implemented with an IIR cascade filter. This IIR implementation is called cascade because it is a cascade of second- or fourth-order filter stages. The output of one filter stage is the input to the next filter stage for all filter stages.
            </remarks>
            <lastupdated>11/22/2011 8:12:57 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilterComplex.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilterComplex"/> using the 
            specified filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:12:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilterComplex.Reset(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="filterOrder">
            The order of the filter.
            </param>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="stopbandAttenuation">
            The stopband attenuation, in decibels.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="filterOrder"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stopbandAttenuation"/> is less than or equal to zero. 
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:12:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilterComplex.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:12:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.InverseChebyshevLowpassFilterComplex.StopbandAttenuation">
            <summary>
            Gets the stopband attenuation, in decibels.
            </summary>
            <value>
            The stopband attenuation, in decibels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <lastupdated>7/10/2003 5:12:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter">
            <summary>
            Implements a Kaiser window FIR bandpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband. To design a FIR filter by windowing, you start with an ideal frequency response, calculate its impulse response, and then truncate the impulse response to produce a finite number of coefficients. To meet the linear-phase constraint, maintain symmetry about the center point of the coefficients. The truncation of the ideal impulse response results in the effect known as the Gibbs phenomenon. The Gibbs phenomenon is oscillatory behavior near abrupt transitions, or cutoff frequencies, in the FIR filter frequency response. 
            <para>
            You can reduce the effects of the Gibbs phenomenon by using a smoothing window function to smooth the truncation of the ideal impulse response. By tapering the FIR coefficients at each end, you can diminish the height of the side lobes in the frequency response. However, the disadvantage to this method is that the main lobe widens, resulting in a wider transition region at the cutoff frequencies. The selection of a window function is similar to the choice between Chebyshev and Butterworth IIR filters. It is a trade-off between side lobe levels near the cutoff frequencies and width of the transition region. 
            </para>
            	<para>
            Designing FIR filters by windowing is computationally inexpensive. Therefore, it is the fastest way to design FIR filters. However, it is not necessarily the best FIR filter design method. 
            </para>
            </remarks>
            <lastupdated>5/28/2003 12:12:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            <para>
            Typical <paramref name="beta"/> values are 0.00(Rectangular Window), 1.33(Triangular Window),
            3.86(Hanning Window), 4.86(Hamming Window) and 7.04(Blackman Window).
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/26/2003 9:55:34 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter.Reset(System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            <para>
            Typical <paramref name="beta"/> values are 0.00(Rectangular Window), 1.33(Triangular Window),
            3.86(Hanning Window), 4.86(Hamming Window) and 7.04(Blackman Window).
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/26/2003 9:55:54 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter.Beta">
            <summary>
            Gets the window shape parameter used in the Kaiser window.
            </summary>
            <value>
            The window shape parameter.
            </value>
            <remarks>
            A larger beta results in a narrower window. Typical beta values are 0.00(Rectangular Window), 1.33(Triangular Window),
            3.86(Hanning Window), 4.86(Hamming Window) and 7.04(Blackman Window).
            </remarks>
            <lastupdated>5/28/2003 12:13:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:13:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:13:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter">
            <summary>
            Implements a Kaiser window FIR bandstop filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband. To design a FIR filter by windowing, you start with an ideal frequency response, calculate its impulse response, and then truncate the impulse response to produce a finite number of coefficients. To meet the linear-phase constraint, maintain symmetry about the center point of the coefficients. The truncation of the ideal impulse response results in the effect known as the Gibbs phenomenon. The Gibbs phenomenon is oscillatory behavior near abrupt transitions, or cutoff frequencies, in the FIR filter frequency response. 
            <para>
            You can reduce the effects of the Gibbs phenomenon by using a smoothing window function to smooth the truncation of the ideal impulse response. By tapering the FIR coefficients at each end, you can diminish the height of the side lobes in the frequency response. However, the disadvantage to this method is that the main lobe widens, resulting in a wider transition region at the cutoff frequencies. The selection of a window function is similar to the choice between Chebyshev and Butterworth IIR filters. It is a trade-off between side lobe levels near the cutoff frequencies and width of the transition region. 
            </para>
            	<para>
            Designing FIR filters by windowing is computationally inexpensive. Therefore, it is the fastest way to design FIR filters. However, it is not necessarily the best FIR filter design method. 
            </para>
            </remarks>
            <lastupdated>5/28/2003 12:15:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.</param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            <para>
            Typical <paramref name="beta"/> values are 0.00(Rectangular Window), 1.33(Triangular Window),
            3.86(Hanning Window), 4.86(Hamming Window) and 7.04(Blackman Window).
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:12:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter.Reset(System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            <para>
            Typical <paramref name="beta"/> values are 0.00(Rectangular Window), 1.33(Triangular Window),
            3.86(Hanning Window), 4.86(Hamming Window) and 7.04(Blackman Window).
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:13:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter.Beta">
            <summary>
            Gets the window shape parameter used in the Kaiser window.
            </summary>
            <value>
            The window shape parameter.
            </value>
            <remarks>
            A larger beta results in a narrower window. Typical beta values are 0.00(Rectangular Window), 1.33(Triangular Window),
            3.86(Hanning Window), 4.86(Hamming Window) and 7.04(Blackman Window).
            </remarks>
            <lastupdated>5/28/2003 12:15:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:15:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:15:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter">
            <summary>
            Implements a Kaiser window FIR highpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband. To design a FIR filter by windowing, you start with an ideal frequency response, calculate its impulse response, and then truncate the impulse response to produce a finite number of coefficients. To meet the linear-phase constraint, maintain symmetry about the center point of the coefficients. The truncation of the ideal impulse response results in the effect known as the Gibbs phenomenon. The Gibbs phenomenon is oscillatory behavior near abrupt transitions, or cutoff frequencies, in the FIR filter frequency response. 
            <para>
            You can reduce the effects of the Gibbs phenomenon by using a smoothing window function to smooth the truncation of the ideal impulse response. By tapering the FIR coefficients at each end, you can diminish the height of the side lobes in the frequency response. However, the disadvantage to this method is that the main lobe widens, resulting in a wider transition region at the cutoff frequencies. The selection of a window function is similar to the choice between Chebyshev and Butterworth IIR filters. It is a trade-off between side lobe levels near the cutoff frequencies and width of the transition region. 
            </para>
            	<para>
            Designing FIR filters by windowing is computationally inexpensive. Therefore, it is the fastest way to design FIR filters. However, it is not necessarily the best FIR filter design method. 
            </para>
            </remarks>
            <lastupdated>5/28/2003 12:16:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter.#ctor(System.Double,System.Double,System.Int32,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.</param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            <para>
            Typical <paramref name="beta"/> values are 0.00(Rectangular Window), 1.33(Triangular Window),
            3.86(Hanning Window), 4.86(Hamming Window) and 7.04(Blackman Window).
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:13:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter.Reset(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            <para>
            Typical <paramref name="beta"/> values are 0.00(Rectangular Window), 1.33(Triangular Window),
            3.86(Hanning Window), 4.86(Hamming Window) and 7.04(Blackman Window).
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:13:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter.Beta">
            <summary>
            Gets the window shape parameter used in the Kaiser window.
            </summary>
            <value>
            The window shape parameter.
            </value>
            <remarks>
            A larger beta results in a narrower window. Typical beta values are 0.00(Rectangular Window), 1.33(Triangular Window),
            3.86(Hanning Window), 4.86(Hamming Window) and 7.04(Blackman Window).
            </remarks>
            <lastupdated>5/28/2003 12:16:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:16:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter">
            <summary>
            Implements a Kaiser window FIR lowpass filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband. To design a FIR filter by windowing, you start with an ideal frequency response, calculate its impulse response, and then truncate the impulse response to produce a finite number of coefficients. To meet the linear-phase constraint, maintain symmetry about the center point of the coefficients. The truncation of the ideal impulse response results in the effect known as the Gibbs phenomenon. The Gibbs phenomenon is oscillatory behavior near abrupt transitions, or cutoff frequencies, in the FIR filter frequency response. 
            <para>
            You can reduce the effects of the Gibbs phenomenon by using a smoothing window function to smooth the truncation of the ideal impulse response. By tapering the FIR coefficients at each end, you can diminish the height of the side lobes in the frequency response. However, the disadvantage to this method is that the main lobe widens, resulting in a wider transition region at the cutoff frequencies. The selection of a window function is similar to the choice between Chebyshev and Butterworth IIR filters. It is a trade-off between side lobe levels near the cutoff frequencies and width of the transition region. 
            </para>
            	<para>
            Designing FIR filters by windowing is computationally inexpensive. Therefore, it is the fastest way to design FIR filters. However, it is not necessarily the best FIR filter design method. 
            </para>
            </remarks>
            <lastupdated>5/28/2003 12:17:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter.#ctor(System.Double,System.Double,System.Int32,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter"/> using the 
            specified filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.</param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            <para>
            Typical <paramref name="beta"/> values are 0.00(Rectangular Window), 1.33(Triangular Window),
            3.86(Hanning Window), 4.86(Hamming Window) and 7.04(Blackman Window).
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:13:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter.Reset(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="beta">
            The window shape parameter used in the Kaiser window function. A larger beta results in a narrower window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            <para>
            Typical <paramref name="beta"/> values are 0.00(Rectangular Window), 1.33(Triangular Window),
            3.86(Hanning Window), 4.86(Hamming Window) and 7.04(Blackman Window).
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:13:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter.Beta">
            <summary>
            Gets the window shape parameter used in the Kaiser window.
            </summary>
            <value>
            The window shape parameter.
            </value>
            <remarks>
            A larger beta results in a narrower window. Typical beta values are 0.00(Rectangular Window), 1.33(Triangular Window),
            3.86(Hanning Window), 4.86(Hamming Window) and 7.04(Blackman Window).
            </remarks>
            <lastupdated>5/28/2003 12:17:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:17:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.MedianFilter">
            <summary>
            Implements a median filter. 
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            <para>Filter the input array using the following equation:</para>
            <para indent="true">Y<format type="subscript">i</format> = Median(J<format type="subscript">i</format>) for <format type="italics">i</format> = 0, 1, 2, ..., n - 1</para>
            <para> Where <format type="italics">Y</format>  represents the ouput sequence of the filtered data;  <format type="italics">n</format> , is the number of elements in the input array;  <format type="italics">J<format type="subscript">i</format></format>, is a subset of the input array centered about the <format type="italics">i</format>th element of the array. The following equation describes <format type="italics">J<format type="subscript">i</format></format>:</para>
            <para indent="true">
            <format type="italics">J<format type="subscript">i</format></format>
            = {X<format type="subscript">i-rl</format>,
            X<format type="subscript">i-rl+1</format>,
            <entity value="#8230"/>,
            X<format type="subscript">i-1</format>,
            X<format type="subscript">i</format>,
            X<format type="subscript">i+1</format>,
            <entity value="#8230"/>,
            X<format type="subscript">i+rr-1</format>,
            X<format type="subscript">i+rr</format>},
            </para>
            <para>Where <format type="italics">rl</format> is the left rank and <format type="italics">rr</format> is the right rank.</para>
            <para>The following illustration shows the computation of <format type="italics">Y<format type="subscript">i</format></format>:</para>
            <para indent="true"><image src="loc_eps_medfilter.gif"/></para>
            </remarks>
            <lastupdated>5/29/2012 11:06:27 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.MedianFilter.Filter(System.Double[],System.Int32,System.Int32)">
            <security condition="unmanagedcode"/>
            <summary>
            Filters the input array using a median filter.
            </summary>
            <param name="inputData">
            Array containing the raw data to filter.
            </param>
            <param name="leftRank">
            Number of elements used to compute the median filter to the left side.
            </param>
            <param name="rightRank">
            Number of elements used to compute the median filter to the right side.
            </param>
            <returns>
            The filtered data.
            </returns>
            <remarks>If <paramref name="rightRank"/> is less than 0, <paramref name="rightRank"/> is equal to <paramref name="leftRank"/>.</remarks>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            	<para><paramref name="rightRank"/> is larger than the size of <paramref name="inputData"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para><paramref name="inputData"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="leftRank"/> is less than zero.</para>
            </exception>
            <lastupdated>2/23/2012 9:38:39 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.MedianFilter.Filter(System.Double[],System.Int32)">
            <summary>
            Filters the input array using a median filter.
            </summary>
            <param name="inputData">
            Array containing the raw data to filter.
            </param>
            <param name="leftRank">
            Number of elements used to compute the median filter to the left and right side.
            </param>
            <returns>
            The filtered data.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            	<para><paramref name="leftRank"/> is larger than the size of <paramref name="inputData"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para><paramref name="inputData"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para><paramref name="leftRank"/> is less than zero.</para>
            </exception>
            <lastupdated>2/23/2012 9:34:38 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirBandpassFilter">
            <summary>
            Implements an interpolated FIR bandpass filter.
            </summary>
            <remarks>
            This class contains the required band parameters for <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> to generate the appropiate Model Filter and Image Suppressor for the interpolated FIR filter.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>5/29/2012 11:07:28 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase">
            <summary>
            Provides the band parameters required to design a digital interpolated FIR filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            <para>This class generates a set of filter coefficients to implement a digital interpolated FIR filter when calling <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> from a child class.</para>
            <para>You can create a specialized version of a digital interpolated FIR filter by inheriting from this class and overriding <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/>. The provided <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.FilterData(NationalInstruments.ComplexDouble[])" crefType="Unqualified"/> only works for the Measurement Studio-provided specializations of this class.</para>
            </remarks>
            <lastupdated>5/29/2012 12:55:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase" crefType="Unqualified"/> class using the specified frequencies.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth.
            </param>
            <param name="stopbandFrequency">
            Ths stopband bandwidth.
            </param>
            <param name="centerFrequency">
            The center frequency.
            </param>
            <lastupdated>5/29/2012 11:21:24 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase" crefType="Unqualified"/> class using the specified frequencies, ripple, and attenuation.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth.
            </param>
            <param name="stopbandFrequency">
            Ths stopband bandwidth.
            </param>
            <param name="centerFrequency">
            The center frequency.
            </param>
            <param name="ripple">
            The ripple.
            </param>
            <param name="attenuation">
            The attenuation.
            </param>
            <lastupdated>5/29/2012 11:22:04 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])">
            <summary>Filter the input data by using the band parameters provided.
            </summary>
            <param name="inputData">
            The data to be filtered.
            </param>
            <returns>
            The filtered data.
            </returns>
            <remarks>
            This method internally generates a Model Filter and an Image supressor, which are then applied to <paramref name="inputData"/>. These coefficients are generated from the band parameters of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase" crefType="Unqualified"/>.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>5/29/2012 12:56:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.SamplingFrequency">
            <summary>Gets or sets the sampling frequency of the filter.
            </summary>
            <value>
            The sampling frequency of the filter.
            </value>
            <lastupdated>5/29/2012 12:55:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.PassbandFrequency">
            <summary>
            Gets or set the passband bandwidth.
            </summary>
            <value>
            The passband bandwidth of the filter.
            </value>
            <lastupdated>11/22/2011 8:42:47 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.StopbandFrequency">
            <summary>
            Gets or sets the stopband of the filter.
            </summary>
            <value>
            The stopband bandwidth of the filter.
            </value>
            <lastupdated>11/22/2011 8:45:41 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.CenterFrequency">
            <summary>
            Gets or sets the center frequency of the filter.
            </summary>
            <value>
            The center frequency of the filter.
            </value>
            <lastupdated>11/22/2011 8:42:11 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.Ripple">
            <summary>
            Gets or sets the ripple in the passband.
            </summary>
            <value>
            The ripple in the passband of the filter.
            </value>
            <lastupdated>11/22/2011 8:43:21 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.Attenuation">
            <summary>
            Gets or sets the attenuation in decibels.
            </summary>
            <value>
            The attenuation in the stopband of the filter.
            </value>
            <lastupdated>11/22/2011 8:41:40 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirBandpassFilter.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a bandpass narrowband filter with the specified frequencies.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 11:10:12 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirBandpassFilter.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a bandpass narrowband filter with the specified frequencies, ripple, and attenuation.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <param name="ripple">The ripple in the passband of the filter.</param>
            <param name="attenuation">The attenuation in the stopband of the filter.</param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 11:10:57 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirBandpassFilterComplex">
            <summary>
            Implements an interpolated FIR bandpass filter.
            </summary>
            <remarks>
            This class contains the required band parameters for <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.FilterData(NationalInstruments.ComplexDouble[])" crefType="Unqualified"/> to generate the appropiate Model Filter and Image Suppressor for the interpolated FIR filter.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>5/29/2012 11:11:44 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase">
            <summary>
            Provides the band parameters required to design a digital interpolated FIR filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            <para>This class generates a set of filter coefficients to implement a digital interpolated FIR filter when calling <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.FilterData(NationalInstruments.ComplexDouble[])" crefType="Unqualified"/> from a child class.</para>
            <para>You can create a specialized version of a digital interpolated FIR filter by inheriting from this class and overriding <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.FilterData(NationalInstruments.ComplexDouble[])" crefType="Unqualified"/>. The provided <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.FilterData(NationalInstruments.ComplexDouble[])" crefType="Unqualified"/> only works for the Measurement Studio-provided specializations of this class.</para>
            </remarks>
            <lastupdated>5/29/2012 12:59:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase" crefType="Unqualified"/> class using the specified parameters.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth.
            </param>
            <param name="stopbandFrequency">
            Ths stopband bandwidth.
            </param>
            <param name="centerFrequency">
            The center frequency.
            </param>
            <lastupdated>5/29/2012 1:01:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase" crefType="Unqualified"/>  class with the specified frequencies, ripple, and attenuation.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth.
            </param>
            <param name="stopbandFrequency">
            Ths stopband bandwidth.
            </param>
            <param name="centerFrequency">
            The center frequency.
            </param>
            <param name="ripple">
            The ripple.
            </param>
            <param name="attenuation">
            The attenuation.
            </param>
            <lastupdated>5/29/2012 1:03:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.GenerateCoefficients">
            <summary>
            Placeholder
            </summary>
            <lastupdated>11/3/2011 2:42:34 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.FilterData(NationalInstruments.ComplexDouble[])">
            <summary>Filter the input data by using the band parameters provided.
            </summary>
            <param name="inputData">
            The data to be filtered.
            </param>
            <returns>
            The filtered data.
            </returns>
            <remarks>
            This method internally generates a Model Filter and an Image supressor, which are then applied to the <paramref name="inputData"/>. These coefficients are generated from the band parameters of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase" crefType="Unqualified"/>.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>5/29/2012 1:00:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.SamplingFrequency">
            <summary>Gets or sets the sampling frequency of the filter.
            </summary>
            <value>
            The sampling frequency of the filter.
            </value>
            <lastupdated>5/29/2012 12:59:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.PassbandFrequency">
            <summary>
            Gets or set the passband bandwidth.
            </summary>
            <value>
            The passband bandwidth of the filter.
            </value>
            <lastupdated>11/22/2011 8:50:43 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.StopbandFrequency">
            <summary>
            Gets or sets the stopband of the filter.
            </summary>
            <value>
            The stopband bandwidth of the filter.
            </value>
            <lastupdated>11/22/2011 8:51:09 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.CenterFrequency">
            <summary>
            Gets or sets the center frequency of the filter.
            </summary>
            <value>
            The center frequency of the filter.
            </value>
            <lastupdated>11/22/2011 8:50:37 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.Ripple">
            <summary>
            Gets or sets the ripple in the passband.
            </summary>
            <value>
            The ripple in the passband of the filter.
            </value>
            <lastupdated>11/22/2011 8:50:51 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.Attenuation">
            <summary>
            Gets or sets the attenuation in decibels.
            </summary>
            <value>
            The attenuation in the stopband of the filter.
            </value>
            <lastupdated>11/22/2011 8:50:31 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirBandpassFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a bandpass narrowband filter with the specified frequencies.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 11:13:37 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirBandpassFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a bandpass narrowband filter with the specified frequencies, ripple, and attenuation.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <param name="ripple">The ripple in the passband of the filter.</param>
            <param name="attenuation">The attenuation in the stopband of the filter.</param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 11:15:20 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirBandstopFilter">
            <summary>
            Implements an interpolated FIR bandstop filter.
            </summary>
            <remarks>
            This class contains the required band parameters for <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> to generate the appropiate Model Filter and Image Suppressor for the interpolated FIR filter.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>5/29/2012 11:16:13 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirBandstopFilter.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a bandstop narrowband filter with the specified frequencies.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 11:13:49 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirBandstopFilter.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a bandstop narrowband filter with the specified frequencies, ripple, and attenuation.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <param name="ripple">The ripple in the passband of the filter.</param>
            <param name="attenuation">The attenuation in the stopband of the filter.</param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 11:15:29 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirBandstopFilterComplex">
            <summary>
            Implements an interpolated FIR bandstop filter.
            </summary>
            <remarks>
            This class contains the required band parameters for <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.FilterData(NationalInstruments.ComplexDouble[])" crefType="Unqualified"/> to generate the appropiate Model Filter and Image Suppressor for the interpolated FIR filter.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>5/29/2012 11:16:57 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirBandstopFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a bandstop narrowband filter with the specified frequencies.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 11:14:02 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirBandstopFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a bandstop narrowband filter with the specified frequencies, ripple, and attenuation.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <param name="ripple">The ripple in the passband of the filter.</param>
            <param name="attenuation">The attenuation in the stopband of the filter.</param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 11:15:38 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirHighpassFilter">
            <summary>
            Provides an interpolated FIR highpass filter.
            </summary>
            <remarks>
            This class contains the required band parameters for <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> to generate the appropiate Model Filter and Image Suppressor for the interpolated FIR filter.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>5/29/2012 1:04:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirHighpassFilter.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a highpass narrowband filter with the specified frequencies.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 1:07:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirHighpassFilter.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a highpass narrowband filter with the specified frequencies, ripple, and attenuation.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <param name="ripple">The ripple in the passband of the filter.</param>
            <param name="attenuation">The attenuation in the stopband of the filter.</param>
            <remarks>
            <para>
            To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 1:09:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirHighpassFilterComplex">
            <summary>
            Provides an interpolated FIR highpass filter.
            </summary>
            <remarks>
            This class contains the required band parameters for <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.FilterData(NationalInstruments.ComplexDouble[])" crefType="Unqualified"/> to generate the appropiate Model Filter and Image Suppressor for the interpolated FIR filter.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>5/29/2012 1:09:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirHighpassFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a highpass narrowband filter with the specified frequencies.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <remarks>
            <para>
            To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 1:09:54 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirHighpassFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a highpass narrowband filter with the specified frequencies, ripple, and attenuation.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <param name="ripple">The ripple in the passband of the filter.</param>
            <param name="attenuation">The attenuation in the stopband of the filter.</param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 1:10:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirLowpassFilter">
            <summary>
            Provides an interpolated FIR lowpass filter.
            </summary>
            <remarks>
            This class contains the required band parameters for <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> to generate the appropiate Model Filter and Image Suppressor for the interpolated FIR filter.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>5/29/2012 1:10:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirLowpassFilter.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a lowpass narrowband filter with the specified frequencies.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 1:11:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirLowpassFilter.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a lowpass narrowband filter with the specified frequencies, ripple, and attenuation.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <param name="ripple">The ripple in the passband of the filter.</param>
            <param name="attenuation">The attenuation in the stopband of the filter.</param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 1:13:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirLowpassFilterComplex">
            <summary>
            Provides an interpolated FIR lowpass filter.
            </summary>
            <remarks>
            This class contains the required band parameters for <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterComplexBase.FilterData(NationalInstruments.ComplexDouble[])" crefType="Unqualified"/> to generate the appropiate Model Filter and Image Suppressor for the interpolated FIR filter.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>5/29/2012 1:13:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirLowpassFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a lowpass narrowband filter with the specified frequencies.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 1:14:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirLowpassFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a lowpass narrowband filter with the specified frequencies, ripple, and attenuation.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency of the filter.
            </param>
            <param name="passbandFrequency">
            The passband bandwidth of the filter.
            </param>
            <param name="stopbandFrequency">
            The stopband bandwidth of the filter.
            </param>
            <param name="centerFrequency">
            The center frequency of the filter.
            </param>
            <param name="ripple">The ripple in the passband of the filter.</param>
            <param name="attenuation">The attenuation in the stopband of the filter.</param>
            <remarks>
            <para>To perform the IFIR filtering using the internally generated Model filter and Image suppressor, you must call the inherited <see cref="M:NationalInstruments.Analysis.Dsp.Filters.NarrowbandFirFilterBase.FilterData(System.Double[])" crefType="Unqualified"/> method from the newly created narrowband FIR filter object.</para>
            </remarks>
            <lastupdated>5/29/2012 1:14:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay">
            <summary>
            Implements a Savitzky-Golay smoothing FIR filter.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Use this class to apply the Savitzky-Golay smoothing FIR filter on the input sequence and to design a Savitzky-Golay smoothing FIR filter.
            </remarks>
            <lastupdated>10/15/2006 4:34:11 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.Filter(System.Double[],System.Int32,System.Int32)">
            <summary>
            Applies a Savitzky-Golay smoothing FIR filter to the input sequence. 
            </summary>
            <param name="inputData">
            The data to filter.
            </param>
            <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
            <param name="sidePoints">
            (2* <paramref name="sidePoints"/> + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than <paramref name="polynomialOrder"/>.
            </param>
            <remarks>
            This method smoothes a noisy signal using piece-by-piece fitting of a polynomial function to the signal.
            The fitting is done by least square minimization. Refer to <see cref="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.GetCoefficients(System.Int32,System.Int32,System.Double[0:,0:]@)"/>
            for information about how the  <see cref="T:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay"/> filter coefficients are obtained to apply them here
            to produce the filtered signal.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            (2 * <paramref name="sidePoints"/> + 1) is less than or equal to <paramref name="polynomialOrder"/>.
            	</para>
            	<para>-or-</para>
            	<para>
            		<paramref name="polynomialOrder"/> is less than one. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <returns>
            The filtered data. 
            </returns>
            <lastupdated>9/17/2009 10:44:55 AM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.Filter(System.Double[],System.Int32,System.Int32,System.Double[])">
            <summary>
            Applies a Savitzky-Golay smoothing FIR filter to the input sequence using weights. 
            </summary>
            <param name="inputData">
            The data to filter.
            </param>
            <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
            <param name="sidePoints">
            (2* <paramref name="sidePoints"/> + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than <paramref name="polynomialOrder"/>.
            </param>
            <param name="weight">
            A weighting vector with length (2 * <paramref name="sidePoints"/> + 1), which specifies how many data points to use in the 
            polynomial fitting.
            </param>
            <remarks>
            This method smoothes a noisy signal using piece-by-piece fitting of a polynomial function to the signal.
            The fitting is done by least square minimization. Refer to <see cref="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.GetCoefficients(System.Int32,System.Int32,System.Double[0:,0:]@)"/>
            for information about how the  <see cref="T:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay"/> filter coefficients are obtained to apply them here
            to produce the filtered signal.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            (2 * <paramref name="sidePoints"/> + 1) is less than or equal to <paramref name="polynomialOrder"/>.
            	</para>
            	<para>-or-</para>
            	<para>
            		<paramref name="polynomialOrder"/> is less than one. 
            </para>
            	<para>-or-</para>
            	<para>
            		The size of <paramref name="weight"/> is not equal to (2 * <paramref name="sidePoints"/> + 1). 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <returns>
            The filtered data. 
            </returns>
            <lastupdated>9/17/2009 10:44:50 AM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.Filter(NationalInstruments.ComplexDouble[],System.Int32,System.Int32)">
            <summary>
            Applies a Savitzky-Golay smoothing FIR filter to the input sequence of <see cref="T:NationalInstruments.ComplexDouble"/>. 
            </summary>
            <param name="inputData">
            The data to filter.
            </param>
            <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
            <param name="sidePoints">
            (2* <paramref name="sidePoints"/> + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than <paramref name="polynomialOrder"/>.
            </param>
            <remarks>
            This method smoothes a noisy signal using piece-by-piece fitting of a polynomial function to the signal.
            The fitting is done by least square minimization. Refer to <see cref="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.GetCoefficients(System.Int32,System.Int32,System.Double[0:,0:]@)"/>
            for information about how the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay"/> filter coefficients are obtained to apply them here
            to produce the filtered signal.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            (2 * <paramref name="sidePoints"/> + 1) is less than or equal to <paramref name="polynomialOrder"/>.
            	</para>
            	<para>-or-</para>
            	<para>
            		<paramref name="polynomialOrder"/> is less than one. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <returns>
            The filtered data. 
            </returns>
            <lastupdated>9/17/2009 10:45:02 AM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.Filter(NationalInstruments.ComplexDouble[],System.Int32,System.Int32,System.Double[])">
            <summary>
            Applies a Savitzky-Golay smoothing FIR filter to the input sequence of <see cref="T:NationalInstruments.ComplexDouble"/> using weights. 
            </summary>
            <param name="inputData">
            The data to filter.
            </param>
            <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
            <param name="sidePoints">
            (2* <paramref name="sidePoints"/> + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than <paramref name="polynomialOrder"/>.
            </param>
            <param name="weight">
            A weighting vector with length (2 * <paramref name="sidePoints"/> + 1), which specifies how many data points to use in the 
            polynomial fitting.
            </param>
            <remarks>
            This method smoothes a noisy signal using piece-by-piece fitting of a polynomial function to the signal.
            The fitting is done by least square minimization. Refer to <see cref="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.GetCoefficients(System.Int32,System.Int32,System.Double[0:,0:]@)"/>
            for information about how the  <see cref="T:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay"/> filter coefficients are obtained to apply them here
            to produce the filtered signal.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            (2 * <paramref name="sidePoints"/> + 1) is less than or equal to <paramref name="polynomialOrder"/>.
            	</para>
            	<para>-or-</para>
            	<para>
            		<paramref name="polynomialOrder"/> is less than one. 
            </para>
            	<para>-or-</para>
            	<para>
            		The size of <paramref name="weight"/> is not equal to (2 * <paramref name="sidePoints"/> + 1). 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <returns>
            The filtered data. 
            </returns>
            <lastupdated>9/17/2009 10:44:58 AM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.GetCoefficients(System.Int32,System.Int32,System.Double[0:,0:]@)">
            <summary>
            Gets the filter coefficients to design a Savitzky-Golay smoothing FIR filter.
            </summary>
            <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
            <param name="sidePoints">
            (2* <paramref name="sidePoints"/> + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than <paramref name="polynomialOrder"/>.
            </param>
            <param name="filterCoefficients">
            The designed filter coefficients, a frame size-by-frame size matrix. The first (frame size <entity value="ndash"/> 1)/2 rows are applied to the signal during
            the terminal transient. The last (frame size <entity value="ndash"/> 1)/2 rows are applied to the signal during the startup transient. The center row is
            applied to the steady state.
            </param>
            <remarks>
            A polynomial Savitzky-Golay smoothing FIR filter can be considered as a piece-by-piece fitting of a polynomial function to the signal. 
            The fitting is done by a least squares (LS) estimate between the <image src="SavitzkyGolayform_0.png"/> matrix and the <image src="SavitzkyGolayform_1.png"/>
            vector:  <para indent="true">
            		<image src="SavitzkyGolayform_2.png"/>
            	</para>
            where <image src="SavitzkyGolayform_0.png"/> is the Vandermonde matrix. If the polynomial order is 
            <image src="SavitzkyGolayform_3.png"/>, and the frame size is <image src="SavitzkyGolayform_4.png"/>(that is, the number of data points used in each polynomial least squares fitting), then: 
            <para indent="true">
            		<image src="SavitzkyGolayform_5.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="SavitzkyGolayform_6.png"/> is the weighting matrix,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_7.png "/>,</description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_8.png "/>represents the weight associated with each data point,</description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_9.png "/>.<image src="SavitzkyGolayform_10.png "/>represents the polynomial coefficients: </description>
            		</item>
            		<item>
            			<term></term>
            			<description><para indent="true">
            					<image src="SavitzkyGolayform_11.png "/>, and </para></description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_12.png "/> represents the polynomial model. </description>
            		</item>
            	</list>
            	<para>Use the fitted value <image src="SavitzkyGolayform_11.png "/>  as the smoothing estimation of the original raw data <image src="SavitzkyGolayform_1.png "/>.
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            	<para>
            (2 * <paramref name="sidePoints"/> + 1) is less than or equal to <paramref name="polynomialOrder"/>.
            	</para>
            	<para>-or-</para>
            	<para>
            		<paramref name="polynomialOrder"/> is less than one. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>5/9/2011 4:05:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.GetCoefficients(System.Int32,System.Int32,System.Double[],System.Double[0:,0:]@)">
            <summary>
            Gets the filter coefficients to design a Savitzky-Golay smoothing FIR filter with weights.
            </summary>
            <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
            <param name="sidePoints">
            (2* <paramref name="sidePoints"/> + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than <paramref name="polynomialOrder"/>.
            </param>
            <param name="weight">
            A weighting vector with length (2 * <paramref name="sidePoints"/> + 1), which specifies how many data points to use in the 
            polynomial fitting.
            </param>
            <param name="filterCoefficients">
            The designed filter coefficients, a frame size-by-frame size matrix. The first (frame size <entity value="ndash"/> 1)/2 rows are applied to the signal during
            the terminal transient. The last (frame size <entity value="ndash"/> 1)/2 rows are applied to the signal during the startup transient. The center row is
            applied to the steady state.
            </param>
            <remarks>
            A polynomial Savitzky-Golay smoothing FIR filter can be considered as a piece-by-piece fitting of a polynomial function to the signal. 
            The fitting is done by a least squares (LS) estimate between the <image src="SavitzkyGolayform_0.png"/> matrix and the <image src="SavitzkyGolayform_1.png"/>
            vector:  <para indent="true">
            		<image src="SavitzkyGolayform_2.png"/>
            	</para>
            where <image src="SavitzkyGolayform_0.png"/> is the Vandermonde matrix. If the polynomial order is 
            <image src="SavitzkyGolayform_3.png"/>, and the frame size is <image src="SavitzkyGolayform_4.png"/>(that is, the number of data points used in each polynomial least squares fitting), then: 
            <para indent="true">
            		<image src="SavitzkyGolayform_5.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="SavitzkyGolayform_6.png"/> is the weighting matrix,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_7.png "/>,</description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_8.png "/>represents the weight associated with each data point,</description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_9.png "/>.<image src="SavitzkyGolayform_10.png "/>represents the polynomial coefficients: </description>
            		</item>
            		<item>
            			<term></term>
            			<description><para indent="true">
            					<image src="SavitzkyGolayform_11.png "/>, and </para></description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_12.png "/> represents the polynomial model. </description>
            		</item>
            	</list>
            	<para>Use the fitted value <image src="SavitzkyGolayform_11.png "/>  as the smoothing estimation of the original raw data <image src="SavitzkyGolayform_1.png "/>.
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            	<para>
            (2 * <paramref name="sidePoints"/> + 1) is less than or equal to <paramref name="polynomialOrder"/>.
            	</para>
            	<para>-or-</para>
            	<para>
            		<paramref name="polynomialOrder"/> is less than one. 
            </para>
            	<para>-or-</para>
            	<para>
            		The size of <paramref name="weight"/> is not equal to (2 * <paramref name="sidePoints"/> + 1). 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>5/9/2011 4:05:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.GetCoefficients(System.Int32,System.Int32,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Gets the filter coefficients and differentiation coefficients to design a Savitzky-Golay smoothing FIR filter.
            </summary>
            <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
            <param name="sidePoints">
            (2* <paramref name="sidePoints"/> + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than <paramref name="polynomialOrder"/>.
            </param>
            <param name="filterCoefficients">
            The designed filter coefficients, a frame size-by-frame size matrix. The first (frame size <entity value="ndash"/> 1)/2 rows are applied to the signal during
            the terminal transient. The last (frame size <entity value="ndash"/> 1)/2 rows are applied to the signal during the startup transient. The center row is
            applied to the steady state.
            </param>
            <param name="differentiationCoefficients">
            The differentiation coefficients, with size (<paramref name="polynomialOrder"/>+1)-by-frame size. The p-th row is for the p-th order derivative.
            </param>
            <remarks>
            A polynomial Savitzky-Golay smoothing FIR filter can be considered as a piece-by-piece fitting of a polynomial function to the signal. 
            The fitting is done by a least squares (LS) estimate between the <image src="SavitzkyGolayform_0.png"/> matrix and the <image src="SavitzkyGolayform_1.png"/>
            vector:  <para indent="true">
            		<image src="SavitzkyGolayform_2.png"/>
            	</para>
            where <image src="SavitzkyGolayform_0.png"/> is the Vandermonde matrix. If the polynomial order is 
            <image src="SavitzkyGolayform_3.png"/>, and the frame size is <image src="SavitzkyGolayform_4.png"/>(that is, the number of data points used in each polynomial least squares fitting), then: 
            <para indent="true">
            		<image src="SavitzkyGolayform_5.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="SavitzkyGolayform_6.png"/> is the weighting matrix,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_7.png "/>,</description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_8.png "/>represents the weight associated with each data point,</description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_9.png "/>.<image src="SavitzkyGolayform_10.png "/>represents the polynomial coefficients: </description>
            		</item>
            		<item>
            			<term></term>
            			<description><para indent="true">
            					<image src="SavitzkyGolayform_11.png "/>, and </para></description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_12.png "/> represents the polynomial model. </description>
            		</item>
            	</list>
            	<para>Use the fitted value <image src="SavitzkyGolayform_11.png "/>  as the smoothing estimation of the original raw data <image src="SavitzkyGolayform_1.png "/>.
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            	<para>
            (2 * <paramref name="sidePoints"/> + 1) is less than or equal to <paramref name="polynomialOrder"/>.
            	</para>
            	<para>-or-</para>
            	<para>
            		<paramref name="polynomialOrder"/> is less than one. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>5/9/2011 4:05:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.SavitzkyGolay.GetCoefficients(System.Int32,System.Int32,System.Double[],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Gets the filter coefficients and differentiation coefficients to design a Savitzky-Golay smoothing FIR filter with weights.
            </summary>
            <param name="polynomialOrder">
            Specifies the order of the polynomial.
            </param>
            <param name="sidePoints">
            (2* <paramref name="sidePoints"/> + 1) is frame size, which specifies how many data points to use in the polynomial fitting.
            Frame size must be greater than <paramref name="polynomialOrder"/>.
            </param>
            <param name="weight">
            A weighting vector with length (2 * <paramref name="sidePoints"/> + 1), which specifies how many data points to use in the 
            polynomial fitting.
            </param>
            <param name="filterCoefficients">
            The designed filter coefficients, a frame size-by-frame size matrix. The first (frame size <entity value="ndash"/> 1)/2 rows are applied to the signal during
            the terminal transient. The last (frame size <entity value="ndash"/> 1)/2 rows are applied to the signal during the startup transient. The center row is
            applied to the steady state.
            </param>
            <param name="differentiationCoefficients">
            The differentiation coefficients, with size (<paramref name="polynomialOrder"/>+1)-by-frame size. The p-th row is for the p-th order derivative.
            </param>
            <remarks>
            A polynomial Savitzky-Golay smoothing FIR filter can be considered as a piece-by-piece fitting of a polynomial function to the signal. 
            The fitting is done by a least squares (LS) estimate between the <image src="SavitzkyGolayform_0.png"/> matrix and the <image src="SavitzkyGolayform_1.png"/>
            vector:  <para indent="true">
            		<image src="SavitzkyGolayform_2.png"/>
            	</para>
            where <image src="SavitzkyGolayform_0.png"/> is the Vandermonde matrix. If the polynomial order is 
            <image src="SavitzkyGolayform_3.png"/>, and the frame size is <image src="SavitzkyGolayform_4.png"/>(that is, the number of data points used in each polynomial least squares fitting), then: 
            <para indent="true">
            		<image src="SavitzkyGolayform_5.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="SavitzkyGolayform_6.png"/> is the weighting matrix,
             
            </description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_7.png "/>,</description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_8.png "/>represents the weight associated with each data point,</description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_9.png "/>.<image src="SavitzkyGolayform_10.png "/>represents the polynomial coefficients: </description>
            		</item>
            		<item>
            			<term></term>
            			<description><para indent="true">
            					<image src="SavitzkyGolayform_11.png "/>, and </para></description>
            		</item>
            		<item>
            			<term></term>
            			<description><image src="SavitzkyGolayform_12.png "/> represents the polynomial model. </description>
            		</item>
            	</list>
            	<para>Use the fitted value <image src="SavitzkyGolayform_11.png "/>  as the smoothing estimation of the original raw data <image src="SavitzkyGolayform_1.png "/>.
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            	<para>
            (2 * <paramref name="sidePoints"/> + 1) is less than or equal to <paramref name="polynomialOrder"/>.
            	</para>
            	<para>-or-</para>
            	<para>
            		<paramref name="polynomialOrder"/> is less than one. 
            </para>
            	<para>-or-</para>
            	<para>
            		The size of <paramref name="weight"/> is not equal to (2 * <paramref name="sidePoints"/> + 1). 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>5/9/2011 4:05:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter">
            <summary>
            Implements a windowed FIR bandpass filter using the specified window type.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband. To design a FIR filter by windowing, you start with an ideal frequency response, calculate its impulse response, and then truncate the impulse response to produce a finite number of coefficients. To meet the linear-phase constraint, maintain symmetry about the center point of the coefficients. The truncation of the ideal impulse response results in the effect known as the Gibbs phenomenon. The Gibbs phenomenon is oscillatory behavior near abrupt transitions, or cutoff frequencies, in the FIR filter frequency response. 
            <para>
            You can reduce the effects of the Gibbs phenomenon by using a smoothing window function to smooth the truncation of the ideal impulse response. By tapering the FIR coefficients at each end, you can diminish the height of the side lobes in the frequency response. However, the disadvantage to this method is that the main lobe widens, resulting in a wider transition region at the cutoff frequencies. The selection of a window function is similar to the choice between Chebyshev and Butterworth IIR filters. It is a trade-off between side lobe levels near the cutoff frequencies and width of the transition region. 
            </para>
                <para>
            Designing FIR filters by windowing is computationally inexpensive. Therefore, it is the fastest way to design FIR filters. However, it is not necessarily the best FIR filter design method. 
            </para>
            </remarks>
            <lastupdated>5/28/2003 12:18:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.#ctor(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter"/> using the 
            specified filter parameters. Do not use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 1:48:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.#ctor(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter"/> using the 
            specified filter parameters. Use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 1:49:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.Reset(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Do not use 
            this method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 1:46:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.Reset(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Use this 
            method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 1:47:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.WindowType">
            <summary>
            Gets the window type.
            </summary>
            <value>
            The window type.
            </value>
            <lastupdated>5/28/2003 12:18:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:18:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:18:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilter.WindowParameter">
            <summary>
            Gets the window parameter when using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <value>
            The value of the window parameter, which depends on the type of <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/> used when creating an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter"/>. <list type="bullet">
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/> window, this property returns the beta of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/> window, this property returns the standard deviation of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window, this property returns the main lobe-to-side lobe ratio of the window.
            </description>
            		</item>
            	</list>
            </value>
            <remarks>
            	<para>
            For beta values, the larger the beta, the narrower the window. The following are common beta values:<list type="bullet">
            			<item>
            				<description>
            Rectangular window (beta = 0.0)
            </description>
            			</item>
            			<item>
            				<description>
            Triangle window (beta = 1.33)
            </description>
            			</item>
            			<item>
            				<description>
            Hanning window (beta = 3.86)
            </description>
            			</item>
            			<item>
            				<description>
            Hamming window (beta = 4.86)
            </description>
            			</item>
            			<item>
            				<description>
            Blackman window (beta = 7.04)
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <lastupdated>9/27/2005 5:27:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex">
            <summary>
            Provides a windowed FIR bandpass filter using the specified window type.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband. To design a FIR filter by windowing, you start with an ideal frequency response, calculate its impulse response, and then truncate the impulse response to produce a finite number of coefficients. To meet the linear-phase constraint, maintain symmetry about the center point of the coefficients. The truncation of the ideal impulse response results in the effect known as the Gibbs phenomenon. The Gibbs phenomenon is oscillatory behavior near abrupt transitions, or cutoff frequencies, in the FIR filter frequency response. 
            <para>
            You can reduce the effects of the Gibbs phenomenon by using a smoothing window function to smooth the truncation of the ideal impulse response. By tapering the FIR coefficients at each end, you can diminish the height of the side lobes in the frequency response. However, the disadvantage to this method is that the main lobe widens, resulting in a wider transition region at the cutoff frequencies. The selection of a window function is similar to the choice between Chebyshev and Butterworth IIR filters. It is a trade-off between side lobe levels near the cutoff frequencies and width of the transition region. 
            </para>
            <para>
            Designing FIR filters by windowing is computationally inexpensive. Therefore, it is the fastest way to design FIR filters. However, it is not necessarily the best FIR filter design method. 
            </para>
            </remarks>
            <lastupdated>5/29/2012 1:18:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex"/> using the 
            specified filter parameters. Do not use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 1:48:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex"/> using the 
            specified filter parameters. Use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 1:49:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex.Reset(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Do not use 
            this method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 1:46:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex.Reset(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Use this 
            method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 1:47:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex.WindowType">
            <summary>
            Gets the window type.
            </summary>
            <value>
            The window type.
            </value>
            <lastupdated>5/28/2003 12:18:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:18:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:18:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandpassFilterComplex.WindowParameter">
            <summary>
            Gets the window parameter when using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <value>
            The value of the window parameter, which depends on the type of <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/> used when creating an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandpassFilter"/>. <list type="bullet">
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/> window, this property returns the beta of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/> window, this property returns the standard deviation of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window, this property returns the main lobe-to-side lobe ratio of the window.
            </description>
            		</item>
            	</list>
            </value>
            <remarks>
            	<para>
            For beta values, the larger the beta, the narrower the window. The following are common beta values:<list type="bullet">
            			<item>
            				<description>
            Rectangular window (beta = 0.0)
            </description>
            			</item>
            			<item>
            				<description>
            Triangle window (beta = 1.33)
            </description>
            			</item>
            			<item>
            				<description>
            Hanning window (beta = 3.86)
            </description>
            			</item>
            			<item>
            				<description>
            Hamming window (beta = 4.86)
            </description>
            			</item>
            			<item>
            				<description>
            Blackman window (beta = 7.04)
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <lastupdated>9/27/2005 5:27:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter">
            <summary>
            Implements a windowed FIR bandstop filter using the specified window type.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband. To design a FIR filter by windowing, you start with an ideal frequency response, calculate its impulse response, and then truncate the impulse response to produce a finite number of coefficients. To meet the linear-phase constraint, maintain symmetry about the center point of the coefficients. The truncation of the ideal impulse response results in the effect known as the Gibbs phenomenon. The Gibbs phenomenon is oscillatory behavior near abrupt transitions, or cutoff frequencies, in the FIR filter frequency response. 
            <para>
            You can reduce the effects of the Gibbs phenomenon by using a smoothing window function to smooth the truncation of the ideal impulse response. By tapering the FIR coefficients at each end, you can diminish the height of the side lobes in the frequency response. However, the disadvantage to this method is that the main lobe widens, resulting in a wider transition region at the cutoff frequencies. The selection of a window function is similar to the choice between Chebyshev and Butterworth IIR filters. It is a trade-off between side lobe levels near the cutoff frequencies and width of the transition region. 
            </para>
                <para>
            Designing FIR filters by windowing is computationally inexpensive. Therefore, it is the fastest way to design FIR filters. However, it is not necessarily the best FIR filter design method. 
            </para>
            </remarks>
            <lastupdated>5/28/2003 12:19:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.#ctor(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter"/> using the 
            specified filter parameters. Do not use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:00:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.#ctor(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter"/> using the 
            specified filter parameters. Use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:00:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.Reset(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Do not use 
            this method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 1:58:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.Reset(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Use 
            this method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 1:59:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.WindowType">
            <summary>
            Gets the window type.
            </summary>
            <value>
            The window type.
            </value>
            <lastupdated>5/28/2003 12:19:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:19:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:19:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilter.WindowParameter">
            <summary>
            Gets the window parameter when using a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <value>
            The value of the window parameter, which depends on the type of <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/> used when creating an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter"/>. <list type="bullet">
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/> window, this property returns the beta of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/> window, this property returns the standard deviation of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window, this property returns the main lobe-to-side lobe ratio of the window.
            </description>
            		</item>
            	</list>
            </value>
            <remarks>
            	<para>
            For beta values, the larger the beta, the narrower the window. The following are common beta values:<list type="bullet">
            			<item>
            				<description>
            Rectangular window (beta = 0.0)
            </description>
            			</item>
            			<item>
            				<description>
            Triangle window (beta = 1.33)
            </description>
            			</item>
            			<item>
            				<description>
            Hanning window (beta = 3.86)
            </description>
            			</item>
            			<item>
            				<description>
            Hamming window (beta = 4.86)
            </description>
            			</item>
            			<item>
            				<description>
            Blackman window (beta = 7.04)
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <lastupdated>9/27/2005 5:27:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex">
            <summary>
            Provides a windowed FIR bandstop filter using the specified window type.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband. To design a FIR filter by windowing, you start with an ideal frequency response, calculate its impulse response, and then truncate the impulse response to produce a finite number of coefficients. To meet the linear-phase constraint, maintain symmetry about the center point of the coefficients. The truncation of the ideal impulse response results in the effect known as the Gibbs phenomenon. The Gibbs phenomenon is oscillatory behavior near abrupt transitions, or cutoff frequencies, in the FIR filter frequency response. 
            <para>
            You can reduce the effects of the Gibbs phenomenon by using a smoothing window function to smooth the truncation of the ideal impulse response. By tapering the FIR coefficients at each end, you can diminish the height of the side lobes in the frequency response. However, the disadvantage to this method is that the main lobe widens, resulting in a wider transition region at the cutoff frequencies. The selection of a window function is similar to the choice between Chebyshev and Butterworth IIR filters. It is a trade-off between side lobe levels near the cutoff frequencies and width of the transition region. 
            </para>
            <para>
            Designing FIR filters by windowing is computationally inexpensive. Therefore, it is the fastest way to design FIR filters. However, it is not necessarily the best FIR filter design method. 
            </para>
            </remarks>
            <lastupdated>5/29/2012 1:23:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex"/> using the 
            specified filter parameters. Do not use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:00:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex.#ctor(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex"/> using the 
            specified filter parameters. Use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:00:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex.Reset(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Do not use 
            this method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 1:58:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex.Reset(System.Double,System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Use 
            this method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="lowerCutoffFrequency">
            The lower cutoff frequency, in hertz.
            </param>
            <param name="upperCutoffFrequency">
            The upper cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="upperCutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerCutoffFrequency"/> is greater than <paramref name="upperCutoffFrequency"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 1:59:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex.WindowType">
            <summary>
            Gets the window type.
            </summary>
            <value>
            The window type.
            </value>
            <lastupdated>5/28/2003 12:19:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex.LowerCutoffFrequency">
            <summary>
            Gets the lower cutoff frequency, in hertz.
            </summary>
            <value>
            The lower cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:19:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex.UpperCutoffFrequency">
            <summary>
            Gets the upper cutoff frequency, in hertz.
            </summary>
            <value>
            The upper cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:19:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirBandstopFilterComplex.WindowParameter">
            <summary>
            Gets the window parameter when using a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <value>
            The value of the window parameter, which depends on the type of <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/> used when creating an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirBandstopFilter"/>. <list type="bullet">
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/> window, this property returns the beta of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/> window, this property returns the standard deviation of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window, this property returns the main lobe-to-side lobe ratio of the window.
            </description>
            		</item>
            	</list>
            </value>
            <remarks>
            	<para>
            For beta values, the larger the beta, the narrower the window. The following are common beta values:<list type="bullet">
            			<item>
            				<description>
            Rectangular window (beta = 0.0)
            </description>
            			</item>
            			<item>
            				<description>
            Triangle window (beta = 1.33)
            </description>
            			</item>
            			<item>
            				<description>
            Hanning window (beta = 3.86)
            </description>
            			</item>
            			<item>
            				<description>
            Hamming window (beta = 4.86)
            </description>
            			</item>
            			<item>
            				<description>
            Blackman window (beta = 7.04)
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <lastupdated>9/27/2005 5:27:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter">
            <summary>
            Implements a windowed FIR highpass filter using the specified window type.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband. To design a FIR filter by windowing, you start with an ideal frequency response, calculate its impulse response, and then truncate the impulse response to produce a finite number of coefficients. To meet the linear-phase constraint, maintain symmetry about the center point of the coefficients. The truncation of the ideal impulse response results in the effect known as the Gibbs phenomenon. The Gibbs phenomenon is oscillatory behavior near abrupt transitions, or cutoff frequencies, in the FIR filter frequency response. 
            <para>
            You can reduce the effects of the Gibbs phenomenon by using a smoothing window function to smooth the truncation of the ideal impulse response. By tapering the FIR coefficients at each end, you can diminish the height of the side lobes in the frequency response. However, the disadvantage to this method is that the main lobe widens, resulting in a wider transition region at the cutoff frequencies. The selection of a window function is similar to the choice between Chebyshev and Butterworth IIR filters. It is a trade-off between side lobe levels near the cutoff frequencies and width of the transition region. 
            </para>
                <para>
            Designing FIR filters by windowing is computationally inexpensive. Therefore, it is the fastest way to design FIR filters. However, it is not necessarily the best FIR filter design method. 
            </para>
            </remarks>
            <lastupdated>5/28/2003 12:19:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.#ctor(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter"/> using the 
            specified filter parameters. Use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:05:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.#ctor(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter"/> using the 
            specified filter parameters. Do not use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:04:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.Reset(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Do not 
            use this method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:03:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.Reset(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Use this 
            method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:03:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.WindowType">
            <summary>
            Gets the window type.
            </summary>
            <value>
            The window type.
            </value>
            <lastupdated>5/28/2003 12:19:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:19:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilter.WindowParameter">
            <summary>
            Gets the window parameter when using a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <value>
            The value of the window parameter, which depends on the type of <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/> used when creating an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter"/>. <list type="bullet">
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/> window, this property returns the beta of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/> window, this property returns the standard deviation of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window, this property returns the main lobe-to-side lobe ratio of the window.
            </description>
            		</item>
            	</list>
            </value>
            <remarks>
            	<para>
            For beta values, the larger the beta, the narrower the window. The following are common beta values:<list type="bullet">
            			<item>
            				<description>
            Rectangular window (beta = 0.0)
            </description>
            			</item>
            			<item>
            				<description>
            Triangle window (beta = 1.33)
            </description>
            			</item>
            			<item>
            				<description>
            Hanning window (beta = 3.86)
            </description>
            			</item>
            			<item>
            				<description>
            Hamming window (beta = 4.86)
            </description>
            			</item>
            			<item>
            				<description>
            Blackman window (beta = 7.04)
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <lastupdated>9/27/2005 5:27:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilterComplex">
            <summary>
            Provides a windowed FIR highpass filter using the specified window type.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband. To design a FIR filter by windowing, you start with an ideal frequency response, calculate its impulse response, and then truncate the impulse response to produce a finite number of coefficients. To meet the linear-phase constraint, maintain symmetry about the center point of the coefficients. The truncation of the ideal impulse response results in the effect known as the Gibbs phenomenon. The Gibbs phenomenon is oscillatory behavior near abrupt transitions, or cutoff frequencies, in the FIR filter frequency response. 
            <para>
            You can reduce the effects of the Gibbs phenomenon by using a smoothing window function to smooth the truncation of the ideal impulse response. By tapering the FIR coefficients at each end, you can diminish the height of the side lobes in the frequency response. However, the disadvantage to this method is that the main lobe widens, resulting in a wider transition region at the cutoff frequencies. The selection of a window function is similar to the choice between Chebyshev and Butterworth IIR filters. It is a trade-off between side lobe levels near the cutoff frequencies and width of the transition region. 
            </para>
            <para>
            Designing FIR filters by windowing is computationally inexpensive. Therefore, it is the fastest way to design FIR filters. However, it is not necessarily the best FIR filter design method. 
            </para>
            </remarks>
            <lastupdated>5/29/2012 1:45:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilterComplex.#ctor(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilterComplex"/> using the 
            specified filter parameters. Use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:05:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilterComplex.#ctor(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilterComplex"/> using the 
            specified filter parameters. Do not use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilterComplex.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:04:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilterComplex.Reset(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Do not 
            use this method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:03:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilterComplex.Reset(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Use this 
            method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilterComplex.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:03:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilterComplex.WindowType">
            <summary>
            Gets the window type.
            </summary>
            <value>
            The window type.
            </value>
            <lastupdated>5/28/2003 12:19:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilterComplex.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:19:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirHighpassFilterComplex.WindowParameter">
            <summary>
            Gets the window parameter when using a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <value>
            The value of the window parameter, which depends on the type of <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/> used when creating an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirHighpassFilter"/>. <list type="bullet">
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/> window, this property returns the beta of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/> window, this property returns the standard deviation of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window, this property returns the main lobe-to-side lobe ratio of the window.
            </description>
            		</item>
            	</list>
            </value>
            <remarks>
            	<para>
            For beta values, the larger the beta, the narrower the window. The following are common beta values:<list type="bullet">
            			<item>
            				<description>
            Rectangular window (beta = 0.0)
            </description>
            			</item>
            			<item>
            				<description>
            Triangle window (beta = 1.33)
            </description>
            			</item>
            			<item>
            				<description>
            Hanning window (beta = 3.86)
            </description>
            			</item>
            			<item>
            				<description>
            Hamming window (beta = 4.86)
            </description>
            			</item>
            			<item>
            				<description>
            Blackman window (beta = 7.04)
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <lastupdated>9/27/2005 5:27:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter">
            <summary>
            Implements a windowed FIR lowpass filter using the specified window type.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband. To design a FIR filter by windowing, you start with an ideal frequency response, calculate its impulse response, and then truncate the impulse response to produce a finite number of coefficients. To meet the linear-phase constraint, maintain symmetry about the center point of the coefficients. The truncation of the ideal impulse response results in the effect known as the Gibbs phenomenon. The Gibbs phenomenon is oscillatory behavior near abrupt transitions, or cutoff frequencies, in the FIR filter frequency response. 
            <para>
            You can reduce the effects of the Gibbs phenomenon by using a smoothing window function to smooth the truncation of the ideal impulse response. By tapering the FIR coefficients at each end, you can diminish the height of the side lobes in the frequency response. However, the disadvantage to this method is that the main lobe widens, resulting in a wider transition region at the cutoff frequencies. The selection of a window function is similar to the choice between Chebyshev and Butterworth IIR filters. It is a trade-off between side lobe levels near the cutoff frequencies and width of the transition region. 
            </para>
                <para>
            Designing FIR filters by windowing is computationally inexpensive. Therefore, it is the fastest way to design FIR filters. However, it is not necessarily the best FIR filter design method. 
            </para>
            </remarks>
            <lastupdated>5/28/2003 12:19:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.#ctor(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter"/> using the 
            specified filter parameters. Do not use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:12:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.#ctor(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter"/> using the 
            specified filter parameters. Use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:13:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.Reset(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Do not use 
            this method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:11:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.Reset(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Use this 
            method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.WindowParameter"/>
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 12:25:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.WindowType">
            <summary>
            Gets the window type.
            </summary>
            <value>
            The window type.
            </value>
            <lastupdated>5/28/2003 12:19:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:19:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilter.WindowParameter">
            <summary>
            Gets the window parameter when using a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <value>
            The value of the window parameter, which depends on the type of <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/> used when creating an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter"/>. <list type="bullet">
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/> window, this property returns the beta of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/> window, this property returns the standard deviation of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window, this property returns the main lobe-to-side lobe ratio of the window.
            </description>
            		</item>
            	</list>
            </value>
            <remarks>
            	<para>
            For beta values, the larger the beta, the narrower the window. The following are common beta values:<list type="bullet">
            			<item>
            				<description>
            Rectangular window (beta = 0.0)
            </description>
            			</item>
            			<item>
            				<description>
            Triangle window (beta = 1.33)
            </description>
            			</item>
            			<item>
            				<description>
            Hanning window (beta = 3.86)
            </description>
            			</item>
            			<item>
            				<description>
            Hamming window (beta = 4.86)
            </description>
            			</item>
            			<item>
            				<description>
            Blackman window (beta = 7.04)
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <lastupdated>9/27/2005 5:28:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilterComplex">
            <summary>
            Implements a windowed FIR lowpass filter using the specified window type.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband. To design a FIR filter by windowing, you start with an ideal frequency response, calculate its impulse response, and then truncate the impulse response to produce a finite number of coefficients. To meet the linear-phase constraint, maintain symmetry about the center point of the coefficients. The truncation of the ideal impulse response results in the effect known as the Gibbs phenomenon. The Gibbs phenomenon is oscillatory behavior near abrupt transitions, or cutoff frequencies, in the FIR filter frequency response. 
            <para>
            You can reduce the effects of the Gibbs phenomenon by using a smoothing window function to smooth the truncation of the ideal impulse response. By tapering the FIR coefficients at each end, you can diminish the height of the side lobes in the frequency response. However, the disadvantage to this method is that the main lobe widens, resulting in a wider transition region at the cutoff frequencies. The selection of a window function is similar to the choice between Chebyshev and Butterworth IIR filters. It is a trade-off between side lobe levels near the cutoff frequencies and width of the transition region. 
            </para>
                <para>
            Designing FIR filters by windowing is computationally inexpensive. Therefore, it is the fastest way to design FIR filters. However, it is not necessarily the best FIR filter design method. 
            </para>
            </remarks>
            <lastupdated>5/28/2003 12:19:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilterComplex.#ctor(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilterComplex"/> using the 
            specified filter parameters. Do not use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:12:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilterComplex.#ctor(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilterComplex"/> using the 
            specified filter parameters. Use this method with a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilterComplex.WindowParameter"/> 
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:13:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilterComplex.Reset(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Do not use 
            this method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 2:11:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilterComplex.Reset(System.Double,System.Double,System.Int32,NationalInstruments.Analysis.Dsp.Filters.FirWindowType,System.Double)">
            <summary>
            Clears the filter history in order to start a new data set and changes the filter parameters. Use this 
            method with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <param name="samplingFrequency">
            The sampling frequency, in hertz.
            </param>
            <param name="cutoffFrequency">
            The cutoff frequency, in hertz.
            </param>
            <param name="numberOfCoefficients">
            The desired number of filter coefficients. The number of coefficients must be greater than zero.
            </param>
            <param name="windowType">
            The type of smoothing window specified using <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/>. Smoothing windows decrease ripple in the filter passband and improve the ability of the filter to attenuate frequency components in the filter stopband.  
            </param>
            <param name="windowParameter">
            The <see cref="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilterComplex.WindowParameter"/>
            used with a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="cutoffFrequency"/> does not satisfy Nyquist's criterion.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            All cutoff frequencies must be less than half of the sampling frequency.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 12:25:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilterComplex.WindowType">
            <summary>
            Gets the window type.
            </summary>
            <value>
            The window type.
            </value>
            <lastupdated>5/28/2003 12:19:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilterComplex.CutoffFrequency">
            <summary>
            Gets the cutoff frequency, in hertz.
            </summary>
            <value>
            The cutoff frequency, in hertz.
            </value>
            <lastupdated>5/28/2003 12:19:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.Filters.WindowedFirLowpassFilterComplex.WindowParameter">
            <summary>
            Gets the window parameter when using a 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/>, 
            <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/>, or <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window.
            </summary>
            <value>
            The value of the window parameter, which depends on the type of <see cref="T:NationalInstruments.Analysis.Dsp.Filters.FirWindowType"/> used when creating an instance of the <see cref="T:NationalInstruments.Analysis.Dsp.Filters.KaiserWindowFirLowpassFilter"/>. <list type="bullet">
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Kaiser"/> window, this property returns the beta of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.Gaussian"/> window, this property returns the standard deviation of the window.
            </description>
            		</item>
            		<item>
            			<description>
            When using a <see cref="F:NationalInstruments.Analysis.Dsp.Filters.FirWindowType.DolphChebyshev"/> window, this property returns the main lobe-to-side lobe ratio of the window.
            </description>
            		</item>
            	</list>
            </value>
            <remarks>
            	<para>
            For beta values, the larger the beta, the narrower the window. The following are common beta values:<list type="bullet">
            			<item>
            				<description>
            Rectangular window (beta = 0.0)
            </description>
            			</item>
            			<item>
            				<description>
            Triangle window (beta = 1.33)
            </description>
            			</item>
            			<item>
            				<description>
            Hanning window (beta = 3.86)
            </description>
            			</item>
            			<item>
            				<description>
            Hamming window (beta = 4.86)
            </description>
            			</item>
            			<item>
            				<description>
            Blackman window (beta = 7.04)
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <lastupdated>9/27/2005 5:28:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.NormalizationMethod">
            <summary>Specifies the method used to compute the correlation of the input arrays.</summary>
            <lastupdated>10/15/2009 11:21:24 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.NormalizationMethod.None">
            <summary>No normalization is used in the correlation computation of the input arrays.</summary>
            <lastupdated>10/15/2009 11:21:45 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.NormalizationMethod.Unbiased">
            <summary>Uses the number of elements of the largest input array to normalize the correlation results.</summary>
            <lastupdated>10/15/2009 11:21:59 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.NormalizationMethod.Biased">
            <summary>Uses the number of elements in both input arrays to normalize the correlation results.</summary>
            <lastupdated>10/15/2009 11:21:31 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.PhaseUnit">
            <summary>
            Specify input array values as degrees or radians and return output array values as degrees or radians.
            </summary>
            <lastupdated>3/26/2008 9:51:44 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.PhaseUnit.RadianInRadianOut">
            <summary>On input, array values are represented in radians, and on output, array values are represented in radians.</summary>
            <lastupdated>3/26/2008 4:20:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.PhaseUnit.RadianInDegreeOut">
            <summary>On input, array values are represented in radians, and on output, array values are represented in degrees.</summary>
            <lastupdated>3/26/2008 4:20:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.PhaseUnit.DegreeInDegreeOut">
            <summary>On input, array values are represented in degrees, and on output, array values are represented in degrees.</summary>
            <lastupdated>3/26/2008 4:20:10 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.PhaseUnit.DegreeInRadianOut">
            <summary>On input, array values are represented in degrees, and on output, array values are represented in radians.</summary>
            <lastupdated>3/26/2008 4:20:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.ScaledWindow">
            <summary>
            Applies a scaled window to the time-domain signal and outputs window constants for further analysis.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            The windowed time-domain signal is scaled  so that when the power or amplitude spectrum of the windowed waveform is computed, 
            all windows provide the same level within the accuracy constraints of the window. This method also returns important 
            window constants for the selected window. These constants are useful when you use methods that perform computations on 
            the power spectrum.
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.UnscaledWindow"/>
            <seealso example="Analysis/Professional/ComplexWindowing" launch="false">Complex Windowing (Enterprise and Professional editions)</seealso>
            <seealso example="Analysis/Professional/Windowing" launch="false">Windowing (Enterprise and Professional editions)</seealso>
            <lastupdated>1/31/2013 11:37:51 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.#ctor">
            <summary>
            This member is obsolete. Use one of the factory methods to achieve the same functionality.
            </summary>
            <lastupdated>9/12/2005 4:01:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.#ctor(NationalInstruments.Analysis.Dsp.ScaledWindowType)">
            <summary>
            This member is obsolete. Use one of the factory methods to achieve the same functionality.
            </summary>
            <param name="scaledWindowType">
            This parameter is not documented because the member is obsolete.
            </param>
            <lastupdated>9/16/2009 4:19:02 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateRectangularWindow">
            <summary>
            Initializes a new instance of a rectangular window.
            </summary>
            <returns>
            The rectangular scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a rectangular scaled window.<code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateRectangularWindow()
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateRectangularWindow();
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
            </code>
            </example>
            <lastupdated>9/11/2007 5:43:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateHanningWindow">
            <summary>
            Initializes a new instance of a Hanning scaled window.
            </summary>
            <returns>
            The Hanning scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Hanning{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = 0.5<format type="italics">x<format type="subscript">i</format></format> [1 <entity value="ndash"/> cos(<format type="italics">w</format>)]
            </para>
            	<para indent="true">
            		<image src="Hamming.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a Hanning scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateHanningWindow()
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)</code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateHanningWindow();
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
             
            </code>
            </example>
            <lastupdated>9/11/2007 5:42:53 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateHammingWindow">
            <summary>
            Initializes a new instance of a Hamming scaled window.
            </summary>
            <returns>
            The Hamming scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Hamming{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = <format type="italics">x<format type="subscript">i</format></format> [0.54 <entity value="ndash"/> 0.46cos(<format type="italics">w</format>)]
            </para>
            	<para indent="true">
            		<image src="Hamming.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a Hamming scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateHammingWindow()
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)</code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateHammingWindow();
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
             
            </code>
            </example>
            <lastupdated>9/11/2007 5:42:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateBlackmanHarrisWindow">
            <summary>
            Initializes a new instance of a Blackman-Harris scaled window.
            </summary>
            <returns>
            The Blackman-Harris scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Blackman-Harris{<format type="italics">X</format>}, this method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="BlackmanHarris.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Blackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a Blackman-Harris scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateBlackmanHarrisWindow()
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateBlackmanHarrisWindow();
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
            </code>
            </example>
            <lastupdated>12/13/2007 2:42:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateExactBlackmanWindow">
            <summary>
            Initializes a new instance of an exact Blackman scaled window.
            </summary>
            <returns>
            The exact Blackman scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence exact 
            Blackman{<format type="italics">X</format>}, this method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="ExactBlackman1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="ExactBlackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>,
            </description>
            		</item>
            	</list>
            	<para indent="true">
            		<format type="italics">a</format><format type="subscript">0</format> = 7938/18608,
            </para>
            	<para indent="true">
            		<format type="italics">a</format><format type="subscript">1</format> = 9240/18608, and
            </para>
            	<para indent="true">
            		<format type="italics">a</format><format type="subscript">2</format> = 1430/18608.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies an exact Blackman scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateExactBlackmanWindow()
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)</code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateExactBlackmanWindow();
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
             
            </code>
            </example>
            <lastupdated>9/11/2007 5:42:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateBlackmanWindow">
            <summary>
            Initializes a new instance of a Blackman scaled window.
            </summary>
            <returns>
            The Blackman scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence 
            Blackman{<format type="italics">X</format>}, this method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="Blackman1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Blackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a Blackman scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateBlackmanWindow()
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateBlackmanWindow();
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
            </code>
            </example>
            <lastupdated>9/11/2007 5:42:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateFlatTopWindow">
            <summary>
            Initializes a new instance of a flat top scaled window.
            </summary>
            <returns>
            The flat top scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence flat top{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="FlatTop1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="FlatTop2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a flat top scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateFlatTopWindow()
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)</code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateFlatTopWindow();
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);</code>
            </example>
            <lastupdated>9/11/2007 5:42:39 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateBlackmanHarris4TermWindow">
            <summary>
            Initializes a new instance of a 4-term Blackman-Harris scaled window.
            </summary>
            <returns>
            The 4-term Blackman-Harris scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Blackman-Harris{<format type="italics">X</format>}, this method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="BlackmanHarris.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Blackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a 4-term Blackman-Harris scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateBlackmanHarris4TermWindow()
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateBlackmanHarris4TermWindow();
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
            </code>
            </example>
            <lastupdated>9/11/2007 5:41:48 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateBlackmanHarris7TermWindow">
            <summary>
            Initializes a new instance of a 7-term Blackman-Harris scaled window.
            </summary>
            <returns>
            The 7-term Blackman-Harris scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Blackman-Harris{<format type="italics">X</format>}, this method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="BlackmanHarris.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Blackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a 7-term Blackman-Harris scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateBlackmanHarris7TermWindow()
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateBlackmanHarris7TermWindow();
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
             
            </code>
            </example>
            <lastupdated>9/11/2007 5:41:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateLowSideLobeWindow">
            <summary>
            Initializes a new instance of a low side lobe scaled window.
            </summary>
            <returns>
            The low side lobe scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a low side lobe scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateLowSideLobeWindow()
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)</code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateLowSideLobeWindow();
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
            </code>
            </example>
            <lastupdated>9/11/2007 5:43:06 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateBlackmanNuttallWindow">
            <summary>
            Initializes a new instance of a Blackman-Nuttall scaled window.
            </summary>
            <returns>
            The Blackman-Nuttall scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Blackman-Nuttall window is defined as follows:
            <para indent="true">
            		<image src="BlkmanNuttallWinform_0.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">N</format> is the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a Blackman-Nuttall scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateBlackmanNuttallWindow()
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateBlackmanNuttallWindow();
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
            </code>
            </example>
            <lastupdated>9/11/2007 5:42:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateTriangleWindow">
            <summary>
            Initializes a new instance of a triangle scaled window.
            </summary>
            <returns>
            The triangle scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence triangular{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="Triangular1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Triangular2.gif"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            tr(<format type="italics">w</format>) = 1 <entity value="ndash"/> |<format type="italics">w</format>|, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a triangle scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateTriangleWindow()
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateTriangleWindow();
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
            </code>
            </example>
            <lastupdated>9/11/2007 5:43:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateKaiserWindow">
            <summary>
            Initializes a new instance of a Kaiser scaled window using a default beta value.
            </summary>
            <returns>
            The Kaiser scaled window.
            </returns>
            <remarks><para>
            This method uses a beta value of 0.0. 
            </para>
            If <format type="italics">y</format> represents the output sequence Kaiser-Bessel{<format type="italics">X</format>(<format type="italics">t</format>)}, 
            this method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="Kaiser1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Kaiser2.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Kaiser3.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>(<format type="italics">t</format>), and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">I</format><format type="subscript">o</format> represents the zero-order modified Bessel function. 
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:42:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateKaiserWindow(System.Double)">
            <summary>
            Initializes a new instance of a Kaiser scaled window.
            </summary>
            <param name="beta">
            The beta parameter for the Kaiser window. <paramref name="beta"/> is proportional to the side lobe attenuation, such 
            that, the larger beta is, the greater the side lobe attenuation. 
            </param>
            <returns>
            The Kaiser scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Kaiser-Bessel{<format type="italics">X</format>(<format type="italics">t</format>)}, 
            this method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="Kaiser1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Kaiser2.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Kaiser3.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>(<format type="italics">t</format>), and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">I</format><format type="subscript">o</format> represents the zero-order modified Bessel function. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a Kaiser scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateKaiserWindow(0.5)
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateKaiserWindow(0.5);
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
             
            </code>
            </example>
            <lastupdated>9/11/2007 5:43:02 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateDolphChebyshevWindow">
            <summary>
            Initializes a new instance of a Dolph-Chebyshev scaled window using a default value of the main lobe-to-side lobe ratio.
            </summary>
            <returns>
            The Dolph-Chebyshev scaled window.
            </returns>
            <remarks>
            	<para>
            This method uses a main lobe-to-side lobe ratio of 60 dB.
            </para>
            If <format type="italics">y</format> represents the output sequence Chebyshev{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from the following equation:
            <para indent="true">
            		<image src="ChebWinform_1.png"/>
            	</para>
            where the <format type="italics">m</format><format type="superscript">th</format>-order polynomial is
            <para indent="true">
            		<image src="ChebWinform_2.png"/>
            	</para>
            </remarks>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:42:21 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateDolphChebyshevWindow(System.Double)">
            <summary>
            Initializes a new instance of a Dolph-Chebyshev scaled window.
            </summary>
            <param name="mainLobeToSideLobeRatio">
            The ratio of the main lobe to the side lobe, in decibels.
            </param>
            <returns>
            The Dolph-Chebyshev scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Chebyshev{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from the following equation:
            <para indent="true">
            		<image src="ChebWinform_1.png"/>
            	</para>
            where the <format type="italics">m</format><format type="superscript">th</format>-order polynomial is
            <para indent="true">
            		<image src="ChebWinform_2.png"/>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a Dolph-Chebyshev scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateDolphChebyshevWindow(0.5)
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateDolphChebyshevWindow(0.5);
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
            </code>
            </example>
            <lastupdated>9/11/2007 5:42:30 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateGaussianWindow">
            <summary>
            Initializes a new instance of a Gaussian scaled window using a default value for standard deviation.
            </summary>
            <returns>
            The Gaussian scaled window.
            </returns>
            <remarks>
            This method uses a standard deviation of 0.2.
            	<para>
            A Gaussian window is defined as follows:
            </para>
            	<para indent="true">
            		<image src="GaussWinform_6.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/11/2007 5:42:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateGaussianWindow(System.Double)">
            <summary>
            Initializes a new instance of a Gaussian scaled window.
            </summary>
            <param name="standardDeviation">
            The standard deviation for the Gaussian window.
            </param>
            <returns>
            The Gaussian scaled window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            A Gaussian window is defined as follows:
            </para>
            	<para indent="true">
            		<image src="GaussWinform_6.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example adds signals together and applies a Gaussian scaled window.
            <code lang="VB.NET">
            Dim addedSignals() As Double
            Dim equivalentNoiseBandwidth, coherentGain As Double
            Dim signal1 As New SineSignal(100.0, 0.1)
            Dim signal2 As New SineSignal(25.0, 100.0)
            Dim generator As New SignalGenerator(500.0, 500)
            Dim window As ScaledWindow = ScaledWindow.CreateGaussianWindow(0.2)
             
            ' Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1)
            generator.Signals.Add(signal2)
            addedSignals = generator.Generate()
             
            ' Apply window on addedSignals 
            window.Apply(addedSignals, equivalentNoiseBandwidth, coherentGain)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] addedSignals;
            double equivalentNoiseBandwidth, coherentGain;
            SineSignal signal1 = new SineSignal(100.0, 0.1);
            SineSignal signal2 = new SineSignal(25.0, 100.0);
            SignalGenerator generator = new SignalGenerator(500.0, 500);
            ScaledWindow window = ScaledWindow.CreateGaussianWindow(0.2);
             
            // Add signal1 and signal2 and generate the resulting signal
            generator.Signals.Add(signal1);
            generator.Signals.Add(signal2);
            addedSignals = generator.Generate();
             
            // Apply window on addedSignals 
            window.Apply(addedSignals, out equivalentNoiseBandwidth, out coherentGain);
            </code>
            </example>
            <lastupdated>9/11/2007 5:42:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.Apply(System.Double[])">
            <summary>
            Applies a scaled window to the time-domain signal.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method scales the result so that when the power or amplitude spectrum of the windowed waveform is 
            computed, all windows provide the same level within the accuracy constraints of the window. This 
            method also returns important window constants for the selected window. These constants are useful when 
            you use methods that perform computations on the power spectrum. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/12/2005 2:45:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.Apply(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies a scaled window to the time-domain complex signal and outputs window constants for further analysis.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method scales the result so that when the power or amplitude spectrum of the windowed waveform is 
            computed, all windows provide the same level within the accuracy constraints of the window. This 
            method also returns important window constants for the selected window. These constants are useful when 
            you use methods that perform computations on the power spectrum. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>5/28/2012 5:08:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.Apply(System.Double[],System.Double@,System.Double@)">
            <summary>
            Applies a scaled window to the time-domain signal and outputs window constants for further analysis.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <param name="equivalentNoiseBandwidth">
            Upon return, contains the equivalent noise bandwidth (ENBW) of the selected window. Use this value to divide a sum of individual power spectra of the power spectrum or to compute the power in a given frequency span. 
            </param>
            <param name="coherentGain">
            Upon return, contains the inverse of the scaling factor applied to the window. Use this value to normalize peak signal gains to that of the rectangular window.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method scales the result so that when the power or amplitude spectrum of the windowed waveform 
            is computed, all windows provide the same level within the accuracy constraints of the window. This 
            method also returns important window constants for the selected window. These constants are useful 
            when you use methods that perform computations on the power spectrum. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/12/2005 2:47:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.Apply(NationalInstruments.ComplexDouble[],System.Double@,System.Double@)">
            <summary>
            Applies a scaled window to the time-domain complex signal and outputs window constants for further analysis.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <param name="equivalentNoiseBandwidth">
            Upon return, contains the equivalent noise bandwidth (ENBW) of the selected window. Use this value to divide a sum of individual power spectra of the power spectrum or to compute the power in a given frequency span. 
            </param>
            <param name="coherentGain">
            Upon return, contains the inverse of the scaling factor applied to the window. Use this value to normalize peak signal gains to that of the rectangular window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method scales the result so that when the power or amplitude spectrum of the windowed waveform 
            is computed, all windows provide the same level within the accuracy constraints of the window. This 
            method also returns important window constants for the selected window. These constants are useful 
            when you use methods that perform computations on the power spectrum. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/20/2011 10:18:05 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.ScaledWindow.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/7/2004 4:41:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.ScaledWindow.WindowType">
            <summary>
            Gets or sets the type of scaled window that was created.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.Analysis.Dsp.ScaledWindowType"/>. The default value is <see cref="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Hanning"/>.
            </value>
            <lastupdated>9/13/2005 2:52:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.ScaledWindow.CoherentGain">
            <summary>
            Gets the coherent gain, which is the inverse of the scaling factor applied to the window. 
            </summary>
            <value>
            The value of the coherent gain.
            </value>
            <remarks>
            Use this property to normalize peak signal gains to that of the rectangular window.
            <note type="note">
            This property always returns a value of 1.0 for the following windows:
             <list type="bullet">
            			<item>
            				<description>
            					<see cref="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Triangle"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.DolphChebyshev"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Gaussian"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Kaiser"/>
            				</description>
            			</item>
            		</list>
            Use the <see cref="M:NationalInstruments.Analysis.Dsp.ScaledWindow.Apply(System.Double[])"/> method to calculate the <see cref="P:NationalInstruments.Analysis.Dsp.ScaledWindow.CoherentGain"/> for these windows.
            	</note>
            </remarks>
            <lastupdated>9/29/2005 8:49:03 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.ScaledWindow.EquivalentNoiseBandwidth">
            <summary>
            Gets the equivalent noise bandwidth (ENBW) of the selected window. 
            </summary>
            <value>
            The value of ENBW for the selected window.
            </value>
            <remarks>
            Use this property to divide a sum of individual power spectra of the power spectrum or to compute the 
            power in a given frequency span. 
            <note type="note">
            This property always returns a value of 1.0 for the following windows:
             <list type="bullet">
            			<item>
            				<description>
            					<see cref="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Triangle"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.DolphChebyshev"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Gaussian"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Kaiser"/>
            				</description>
            			</item>
            		</list>
            	</note>
            Use the <see cref="M:NationalInstruments.Analysis.Dsp.ScaledWindow.Apply(System.Double[])"/> method to calculate the <see cref="P:NationalInstruments.Analysis.Dsp.ScaledWindow.EquivalentNoiseBandwidth"/> for these windows.
            </remarks>
            <lastupdated>9/29/2005 8:50:40 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.ScaledWindow.Beta">
            <summary>
            Gets or sets the beta (shape) used by the scaled <see cref="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateKaiserWindow"/> method.
            </summary>
            <value>
            The beta value. A larger beta value results in a narrower window.
            </value>
            <remarks>
            The following are common beta values:
            <list type="bullet">
            		<item>
            			<description>
            Rectangular window (beta = 0.0)
            </description>
            		</item>
            		<item>
            			<description>
            Triangle window (beta = 1.33)
            </description>
            		</item>
            		<item>
            			<description>
            Hanning window (beta = 3.86)
            </description>
            		</item>
            		<item>
            			<description>
            Hamming window (beta = 4.86)
            </description>
            		</item>
            		<item>
            			<description>
            Blackman window (beta = 7.04)
            </description>
            		</item>
            	</list>
            </remarks>
            <lastupdated>9/27/2005 12:33:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.ScaledWindow.MainLobeToSideLobeRatio">
            <summary>
            Gets or sets the main lobe-to-side lobe ratio used by the scaled <see cref="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateDolphChebyshevWindow"/> method.
            </summary>
            <value>
            The height ratio of the main lobe to the side lobe, in decibels.
            </value>
            <lastupdated>9/27/2005 5:34:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.ScaledWindow.StandardDeviation">
            <summary>
            Gets or sets the standard deviation used by the scaled <see cref="M:NationalInstruments.Analysis.Dsp.ScaledWindow.CreateGaussianWindow"/> method.
            </summary>
            <value>
            The value of the standard deviation. The default value is 0.2. If the standard deviation is <entity value="le"/> 0, the default value is used.
            </value>
            <lastupdated>9/27/2005 12:01:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.ScaledWindowType">
            <summary>
            Specifies the scaled window type to be used by the <see cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/> class.
            </summary>
            <lastupdated>5/27/2003 1:08:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Rectangular">
            <summary>
            Applies a rectangular scaled window.
            </summary>
            <lastupdated>9/13/2005 1:38:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Hanning">
            <summary>
            Applies a Hanning scaled window. This is the default value.
            </summary>
            <lastupdated>5/27/2003 1:09:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Hamming">
            <summary>
            Applies a Hamming scaled window.
            </summary>
            <lastupdated>5/27/2003 1:09:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.BlackmanHarris">
            <summary>
            A Blackman-Harris scaled window.
            </summary>
            <lastupdated>9/13/2005 1:27:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.ExactBlackman">
            <summary>
            An exact Blackman scaled window.
            </summary>
            <lastupdated>9/13/2005 1:28:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Blackman">
            <summary>
            A Blackman scaled window.
            </summary>
            <lastupdated>9/13/2005 1:27:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.FlatTop">
            <summary>
            Applies a flat top window.
            </summary>
            <lastupdated>9/13/2005 1:36:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.BlackmanHarris4Term">
            <summary>
            A 4-term Blackman-Harris scaled window.
            </summary>
            <lastupdated>9/13/2005 1:27:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.BlackmanHarris7Term">
            <summary>
            A 7-term Blackman-Harris scaled window.
            </summary>
            <lastupdated>9/13/2005 1:27:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.LowSidelobe">
            <summary>
            Applies a low side lobe scaled window.
            </summary>
            <lastupdated>9/13/2005 1:36:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.BlackmanNuttall">
            <summary>
            A Blackman-Nuttall scaled window.
            </summary>
            <lastupdated>9/13/2005 1:27:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Triangle">
            <summary>
            Applies a triangle scaled window.
            </summary>
            <lastupdated>9/13/2005 1:38:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Kaiser">
            <summary>
            Applies a Kaiser scaled window.
            </summary>
            <lastupdated>9/13/2005 1:38:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.DolphChebyshev">
            <summary>
            A Dolph-Chebyshev scaled window.
            </summary>
            <lastupdated>9/13/2005 1:27:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Gaussian">
            <summary>
            Applies a Gaussian scaled window.
            </summary>
            <lastupdated>9/13/2005 1:36:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.SignalProcessing">
            <summary>Provides a set of methods that perform numeric signal processing tasks.</summary>
            <threadsafety safety="unsafe"/>
            <remarks>Provides a set of methods that perform numeric signal processing tasks.
            </remarks>
            <lastupdated>5/28/2012 5:09:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.#ctor">
            <exclude/>
            <lastupdated>10/7/2002 3:22:07 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.#cctor">
            <exclude/>
            <lastupdated>10/7/2002 3:22:13 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Convolve(System.Double[],System.Double[])">
            <summary>
            Calculates the convolution of the input arrays.
            </summary>
            <param name="inputXData">
            The first signal to mix.
            </param>
            <param name="inputYData">
            The second signal to mix.
            </param>
            <returns>
            The convolution of <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Convolve(System.Double[],System.Double[])"/> method computes the convolution of <paramref name="inputXData"/> and <paramref name="inputYData"/> as
            <para indent="true">
            		<image src="Convolve1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
                            * denotes convolution,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="inputXData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">y</format> represents <paramref name="inputYData"/>.
            </description>
            		</item>
            	</list>
            	<para>
            For the discrete implementation of the convolution, 
            <list type="table" bordered="false">
            			<listheader><term></term><description></description></listheader>
            			<item>
            				<term>
            let
            </term>
            				<description>
            					<format type="italics">h</format> represent the return value, 
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">n</format> represent the number of elements in <paramref name="inputXData"/>, and
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">m</format> represent the number of elements in <paramref name="inputYData"/>.
            </description>
            			</item>
            		</list>
            Assuming that indexed elements of <format type="italics">X</format> and <format type="italics">Y</format> that lie outside their range are zero,
            </para>
            	<para indent="true">
            		<image src="Convolve2.gif"/>
            	</para>
            and
            <para indent="true">
            		<image src="Convolve3.gif"/>
            	</para>
            then you obtain the elements of <format type="italics">h</format> using
            <para indent="true">
            		<image src="Convolve4.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., size<entity value="ndash"/>1, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size = <format type="italics">n</format> + <format type="italics">m </format>
            				<entity value="ndash"/> 1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size represents the total number of elements in the output sequence <format type="italics">X * Y</format>.
            </description>
            		</item>
            	</list>
            	<note type="note">
            This is not a circular convolution. This algorithm uses <see cref="F:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm.FrequencyDomain" crefType="Unqualified"/>. 
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/14/2009 11:03:25 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Convolve(System.Double[],System.Double[],NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm)">
            <summary>
            Calculates the convolution of the input arrays with the specified <see cref="T:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm" crefType="Unqualified"/>.
            </summary>
            <param name="inputXData">
            The first signal to mix.
            </param>
            <param name="inputYData">
            The second signal to mix.
            </param>
            <param name="algorithm">
            Specifies the <see cref="T:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm"/> to use.
            </param>
            <returns>
            The convolution of <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="algorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Convolve(System.Double[],System.Double[])"/> method computes the convolution of <paramref name="inputXData"/> and <paramref name="inputYData"/> as
            <para indent="true">
            		<image src="Convolve1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
                            * denotes convolution,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="inputXData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">y</format> represents <paramref name="inputYData"/>.
            </description>
            		</item>
            	</list>
            	<para>
            For the discrete implementation of the convolution, 
            <list type="table" bordered="false">
            			<listheader><term></term><description></description></listheader>
            			<item>
            				<term>
            let
            </term>
            				<description>
            					<format type="italics">h</format> represent the return value, 
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">n</format> represent the number of elements in <paramref name="inputXData"/>, and
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">m</format> represent the number of elements in <paramref name="inputYData"/>.
            </description>
            			</item>
            		</list>
            Assuming that indexed elements of <format type="italics">X</format> and <format type="italics">Y</format> that lie outside their range are zero,
            </para>
            	<para indent="true">
            		<image src="Convolve2.gif"/>
            	</para>
            and
            <para indent="true">
            		<image src="Convolve3.gif"/>
            	</para>
            then you obtain the elements of <format type="italics">h</format> using
            <para indent="true">
            		<image src="Convolve4.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., size<entity value="ndash"/>1, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size = <format type="italics">n</format> + <format type="italics">m </format>
            				<entity value="ndash"/> 1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size represents the total number of elements in the output sequence <format type="italics">X * Y</format>.
            </description>
            		</item>
            	</list>
            	<note type="note">
            This is not a circular convolution.  
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/14/2009 11:03:21 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Convolve2D(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm,NationalInstruments.Analysis.Dsp.OutputSizeMode)">
            <summary>Finds the 2D convolution of the input matrices.
            </summary>
            <param name="inputXData">First input matrix.
            </param>
            <param name="inputYData">Second input matrix.
            </param>
            <param name="algorithm">Specifies the convolution method to use.
            </param>
            <param name="outputSizeMode">The size of the output.
            </param>
            <returns>Convolution matrix.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> or <paramref name="inputYData"/> are <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputXData"/> or <paramref name="inputYData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>2/23/2012 10:57:35 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Convolve2D(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm,NationalInstruments.Analysis.Dsp.OutputSizeMode)">
            <summary>Finds the 2D convolution of the input matrices.
            </summary>
            <param name="inputXData">First input matrix.
            </param>
            <param name="inputYData">Second input matrix.
            </param>
            <param name="algorithm">Specifies the convolution method to use.
            </param>
            <param name="outputSizeMode">The size of the output.
            </param>
            <returns>Convolution matrix.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> or <paramref name="inputYData"/> are <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputXData"/> or <paramref name="inputYData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>2/23/2012 10:57:07 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Convolve(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[],NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm)">
            <summary>
            Finds the convolution of the complex input arrays with the specified <see cref="T:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm" crefType="Unqualified"/>.
            </summary>
            <param name="inputXData">
            The first signal to mix.
            </param>
            <param name="inputYData">
            The second signal to mix.
            </param>
            <param name="algorithm">
            Specifies the <see cref="T:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm"/> to use.
            </param>
            <returns>
            The convolution of <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para>
            <paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            <para>
            -or-
            </para>
            <para>
            <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            <para>
            -or-
            </para>
            <para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="algorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Convolve(System.Double[],System.Double[])"/> method computes the convolution of <paramref name="inputXData"/> and <paramref name="inputYData"/> as
            <para indent="true">
            <image src="Convolve1.gif"/>
            </para>
            <list type="table" bordered="false">
            <listheader><term></term><description></description></listheader>
            <item>
            <term>
            where
            </term>
            <description>
                            * denotes convolution,
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">x</format> represents <paramref name="inputXData"/>, and
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">y</format> represents <paramref name="inputYData"/>.
            </description>
            </item>
            </list>
            <para>
            For the discrete implementation of the convolution, 
            <list type="table" bordered="false">
            <listheader><term></term><description></description></listheader>
            <item>
            <term>
            let
            </term>
            <description>
            <format type="italics">h</format> represent the return value, 
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">n</format> represent the number of elements in <paramref name="inputXData"/>, and
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">m</format> represent the number of elements in <paramref name="inputYData"/>.
            </description>
            </item>
            </list>
            Assuming that indexed elements of <format type="italics">X</format> and <format type="italics">Y</format> that lie outside their range are zero,
            </para>
            <para indent="true">
            <image src="Convolve2.gif"/>
            </para>
            and
            <para indent="true">
            <image src="Convolve3.gif"/>
            </para>
            then you obtain the elements of <format type="italics">h</format> using
            <para indent="true">
            <image src="Convolve4.gif"/>
            </para>
            <list type="table" bordered="false">
            <listheader><term></term><description></description></listheader>
            <item>
            <term>
            where
            </term>
            <description>
            <format type="italics">i</format> = 0, 1,..., size<entity value="ndash"/>1, 
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            size = <format type="italics">n</format> + <format type="italics">m </format>
            <entity value="ndash"/> 1, and
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            size represents the total number of elements in the output sequence <format type="italics">X * Y</format>.
            </description>
            </item>
            </list>
            <note type="note">
            This is not a circular convolution.  
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>5/28/2012 5:41:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.AutoCorrelate(System.Double[])">
            <summary>
            Calculates the autocorrelation of the input array.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <returns>
            The autocorrelation of the input array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The autocorrelation <format type="italics">Rxx</format>(<format type="italics">t</format>) of a function <format type="italics">x</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
                    <image src="AutoCorrelate1.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <image src="otimes.gif"/> represents correlation, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">x</format> represents <paramref name="inputData"/>.
            </description>
                    </item>
                </list>
                <para>
            For the discrete implementation of the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.AutoCorrelate(System.Double[])"/> method,
            </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            Let
            </term>
                        <description>
                            <format type="italics">Y</format> represent a sequence whose indexing can be negative, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">n</format> be the number of elements in <paramref name="inputData"/>.
            </description>
                    </item>
                </list>
                <para>
            Assume that the indexed elements of <format type="italics">X</format> that lie outside its range are equal to zero,
            </para>
                <para indent="true">
                    <image src="AutoCorrelate2.gif"/>
                </para>
            Then the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.AutoCorrelate(System.Double[])"/> method obtains the elements of <format type="italics">Y</format> using
            <para indent="true">
                    <image src="AutoCorrelate3.gif"/>
                </para>
            for <format type="italics">j</format> = (<format type="italics">n</format>1), (<format type="italics">n</format>2),..., 2, 1, 0, 1, 2,..., <format type="italics">n</format>1.
            <para>
            The elements of the output sequence <format type="italics">Rxx</format> are related to the elements in the sequence Y by
            </para>
                <para indent="true">
                    <image src="AutoCorrelate4.gif"/>
                </para>
            for <format type="italics">i</format> = 0, 1, 2,..., 2<format type="italics">n</format><entity value="ndash"/>2.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/25/2003 4:33:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.AutoCorrelate(System.Double[],NationalInstruments.Analysis.Dsp.NormalizationMethod)">
            <summary>
            Finds the autocorrelation of the input array.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <param name="normalizationMethod">
            The normalization method to use to compute the autocorrelation of <paramref name="inputData"/>.
            </param>
            <returns>
            The autocorrelation of the input array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The autocorrelation <format type="italics">Rxx</format>(<format type="italics">t</format>) of a function <format type="italics">x</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            <image src="AutoCorrelate1.gif"/>
            </para>
            <list type="table" bordered="false">
            <listheader><term></term><description></description></listheader>
            <item>
            <term>
            where
            </term>
            <description>
            <image src="otimes.gif"/> represents correlation, and
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">x</format> represents <paramref name="inputData"/>.
            </description>
            </item>
            </list>
            <para>
            For the discrete implementation of the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.AutoCorrelate(System.Double[])"/> method,
            </para>
            <list type="table" bordered="false">
            <listheader><term></term><description></description></listheader>
            <item>
            <term>
            let
            </term>
            <description>
            <format type="italics">Y</format> represent a sequence whose indexing can be negative and 
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">n</format> be the number of elements in <paramref name="inputData"/>.
            </description>
            </item>
            </list>
            <para>
            Assume that the indexed elements of <format type="italics">X</format> that lie outside its range are equal to zero,
            </para>
            <para indent="true">
            <image src="AutoCorrelate2.gif"/>
            </para>
            then the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.AutoCorrelate(System.Double[])"/> method obtains the elements of <format type="italics">Y</format> using
            <para indent="true">
            <image src="AutoCorrelate3.gif"/>
            </para>
            for <format type="italics">j</format> = (<format type="italics">n</format>1), (<format type="italics">n</format>2),..., 2, 1, 0, 1, 2,..., <format type="italics">n</format>1.
            <para>
            The elements of the output sequence <format type="italics">Rxx</format> are related to the elements in the sequence Y by
            </para>
            <para indent="true">
            <image src="AutoCorrelate4.gif"/>
            </para>
            for <format type="italics">i</format> = 0, 1, 2,..., 2<format type="italics">n</format><entity value="ndash"/>2.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>5/28/2012 5:40:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.AutoCorrelate2D(System.Double[0:,0:])">
            <summary>Finds the 2D autocorrelation of the complex input array.
            </summary>
            <param name="inputData">The complex input array for which to compute the autocorrelation operation.
            </param>
            <returns>The autocorrelation of <paramref name="inputData"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>2/23/2012 10:55:43 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.AutoCorrelate(NationalInstruments.ComplexDouble[],NationalInstruments.Analysis.Dsp.NormalizationMethod)">
            <summary>
            Finds the autocorrelation of the complex input array.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <param name="normalizationMethod">
            The normalization method to use to compute the autocorrelation of <paramref name="inputData"/>.
            </param>
            <returns>
            The autocorrelation of the input array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The autocorrelation <format type="italics">Rxx</format>(<format type="italics">t</format>) of a function <format type="italics">x</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            <image src="AutoCorrelate1.gif"/>
            </para>
            <list type="table" bordered="false">
            <listheader><term></term><description></description></listheader>
            <item>
            <term>
            where
            </term>
            <description>
            <image src="otimes.gif"/> represents correlation and
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">x</format> represents <paramref name="inputData"/>.
            </description>
            </item>
            </list>
            <para>
            For the discrete implementation of the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.AutoCorrelate(System.Double[])"/> method,
            </para>
            <list type="table" bordered="false">
            <listheader><term></term><description></description></listheader>
            <item>
            <term>
            Let
            </term>
            <description>
            <format type="italics">Y</format> represent a sequence whose indexing can be negative and 
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">n</format> be the number of elements in <paramref name="inputData"/>.
            </description>
            </item>
            </list>
            <para>
            Assume that the indexed elements of <format type="italics">X</format> that lie outside its range are equal to zero,
            </para>
            <para indent="true">
            <image src="AutoCorrelate2.gif"/>
            </para>
            Then the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.AutoCorrelate(System.Double[])"/> method obtains the elements of <format type="italics">Y</format> using
            <para indent="true">
            <image src="AutoCorrelate3.gif"/>
            </para>
            for <format type="italics">j</format> = (<format type="italics">n</format>1), (<format type="italics">n</format>2),..., 2, 1, 0, 1, 2,..., <format type="italics">n</format>1.
            <para>
            The elements of the output sequence <format type="italics">Rxx</format> are related to the elements in the sequence Y by
            </para>
            <para indent="true">
            <image src="AutoCorrelate4.gif"/>
            </para>
            for <format type="italics">i</format> = 0, 1, 2,..., 2<format type="italics">n</format><entity value="ndash"/>2.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>5/28/2012 5:40:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.AutoCorrelate2D(NationalInstruments.ComplexDouble[0:,0:])">
            <summary>Finds the 2D autocorrelation of the input array.
            </summary>
            <param name="inputData">The input array for which to compute the autocorrelation operation.
            </param>
            <returns>The autocorrelation of <paramref name="inputData"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>2/23/2012 10:55:38 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[])">
            <summary>
            Calculates the cross correlation of the input arrays.
            </summary>
            <param name="inputXData">
            The first input array.
            </param>
            <param name="inputYData">
            The second input array.
            </param>
            <returns>
            The cross correlation of the input arrays, <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The cross correlation <format type="italics">Rxy</format> of the signals <format type="italics">x</format>(<format type="italics">t</format>) and <format type="italics">y</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            		<image src="CrossCorrelate1.gif"/>
            	</para>
            where the symbol <image src="otimes.gif"/> represents correlation.
            <para>
            The discrete implementation of the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[])"/> method is as follows: 
            <list type="table" bordered="false">
            			<listheader><term></term><description></description></listheader>
            			<item>
            				<term>
            Let
            </term>
            				<description>
            					<format type="italics">h</format> represent a sequence whose indexing can be negative,
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">n</format> be the number of elements in <paramref name="inputXData"/>, and
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">m</format> be the number of elements in <paramref name="inputYData"/>.
            </description>
            			</item>
            		</list>
            	</para>
            	<para>
            Assume that the indexed elements of <format type="italics">X</format> and <format type="italics">Y</format> that lie outside their range are equal to zero,
            </para>
            	<para indent="true">
            		<image src="CrossCorrelate2.gif"/>
            	</para>
            and
            <para indent="true">
            		<image src="CrossCorrelate3.gif"/>
            	</para>
            then the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[])"/> method obtains the elements of <format type="italics">h</format> using
            <para indent="true">
            		<image src="CrossCorrelate4.gif"/>
            	</para>
            for <format type="italics">j</format> = <entity value="ndash"/>(<format type="italics">n</format><entity value="ndash"/>1), <entity value="ndash"/>(<format type="italics">n</format><entity value="ndash"/>2),..., <entity value="ndash"/>1, 0, 1,..., <format type="italics">m</format><entity value="ndash"/>1
            <para>
            The elements of the output sequence <format type="italics">Rxy</format> are related to the elements in the sequence <format type="italics">h</format> by
            </para>
            	<para indent="true">
            		<image src="CrossCorrelate5.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., size<entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size = <format type="italics">n</format> + <format type="italics">m</format><entity value="ndash"/>1, and</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size represents the number of elements in the output sequence <format type="italics">Rxy</format>.</description>
            		</item>
            	</list>
            This algorithm uses <see cref="F:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm.FrequencyDomain" crefType="Unqualified"/>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/19/2009 3:01:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[],NationalInstruments.Analysis.Dsp.CorrelationAlgorithm)">
            <summary>
            Calculates the cross correlation of the input arrays with the specified <see cref="T:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm" crefType="Unqualified"/>.
            </summary>
            <param name="inputXData">
            The first input array.
            </param>
            <param name="inputYData">
            The second input array.
            </param>
            <param name="algorithm">
            Specifies the <see cref="T:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm"/> to use.
            </param>
            <returns>
            The cross correlation of the input arrays, <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="algorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The cross correlation <format type="italics">Rxy</format> of the signals <format type="italics">x</format>(<format type="italics">t</format>) and <format type="italics">y</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            		<image src="CrossCorrelate1.gif"/>
            	</para>
            where the symbol <image src="otimes.gif"/> represents correlation.
            <para>
            The discrete implementation of the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[])"/> method is as follows: 
            <list type="table" bordered="false">
            			<listheader><term></term><description></description></listheader>
            			<item>
            				<term>
            let
            </term>
            				<description>
            					<format type="italics">h</format> represent a sequence whose indexing can be negative,
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">n</format> be the number of elements in <paramref name="inputXData"/>, and
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">m</format> be the number of elements in <paramref name="inputYData"/>.
            </description>
            			</item>
            		</list>
            	</para>
            	<para>
            Assume that the indexed elements of <format type="italics">X</format> and <format type="italics">Y</format> that lie outside their range are equal to zero,
            </para>
            	<para indent="true">
            		<image src="CrossCorrelate2.gif"/>
            	</para>
            and
            <para indent="true">
            		<image src="CrossCorrelate3.gif"/>
            	</para>
            then the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[])"/> method obtains the elements of <format type="italics">h</format> using
            <para indent="true">
            		<image src="CrossCorrelate4.gif"/>
            	</para>
            for <format type="italics">j</format> = <entity value="ndash"/>(<format type="italics">n</format><entity value="ndash"/>1), <entity value="ndash"/>(<format type="italics">n</format><entity value="ndash"/>2),..., <entity value="ndash"/>1, 0, 1,..., <format type="italics">m</format><entity value="ndash"/>1
            <para>
            The elements of the output sequence <format type="italics">Rxy</format> are related to the elements in the sequence <format type="italics">h</format> by
            </para>
            	<para indent="true">
            		<image src="CrossCorrelate5.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., size<entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size = <format type="italics">n</format> + <format type="italics">m</format><entity value="ndash"/>1, and</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size represents the number of elements in the output sequence <format type="italics">Rxy</format>.</description>
            		</item>
            	</list>
            This algorithm uses <see cref="F:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm.FrequencyDomain" crefType="Unqualified"/>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/19/2009 3:01:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate2D(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Dsp.CorrelationAlgorithm)">
            <summary>Finds the 2D correlation of the input matrices.
            </summary>
            <param name="inputXData">First input matrix.
            </param>
            <param name="inputYData">Second input matrix.
            </param>
            <param name="algorithm">Specifies the correlation method to use.
            </param>
            <returns>The correlation of the input matrices.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="algorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>2/23/2012 10:59:28 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[],NationalInstruments.Analysis.Dsp.CorrelationAlgorithm)">
            <summary>
            Calculates the cross correlation of the complex input arrays with the specified <see cref="T:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm" crefType="Unqualified"/>.
            </summary>
            <param name="inputXData">
            The first input array.
            </param>
            <param name="inputYData">
            The second input array.
            </param>
            <param name="algorithm">
            Specifies the <see cref="T:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm"/> to use.
            </param>
            <returns>
            The cross correlation of the input arrays, <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="algorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The cross correlation <format type="italics">Rxy</format> of the signals <format type="italics">x</format>(<format type="italics">t</format>) and <format type="italics">y</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            		<image src="CrossCorrelate1.gif"/>
            	</para>
            where the symbol <image src="otimes.gif"/> represents correlation.
            <para>
            The discrete implementation of the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[])"/> method is as follows: 
            <list type="table" bordered="false">
            			<listheader><term></term><description></description></listheader>
            			<item>
            				<term>
            let
            </term>
            				<description>
            					<format type="italics">h</format> represent a sequence whose indexing can be negative,
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">n</format> be the number of elements in <paramref name="inputXData"/>, and
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">m</format> be the number of elements in <paramref name="inputYData"/>.
            </description>
            			</item>
            		</list>
            	</para>
            	<para>
            Assume that the indexed elements of <format type="italics">X</format> and <format type="italics">Y</format> that lie outside their range are equal to zero,
            </para>
            	<para indent="true">
            		<image src="CrossCorrelate2.gif"/>
            	</para>
            and
            <para indent="true">
            		<image src="CrossCorrelate3.gif"/>
            	</para>
            then the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[])"/> method obtains the elements of <format type="italics">h</format> using
            <para indent="true">
            		<image src="CrossCorrelate4.gif"/>
            	</para>
            for <format type="italics">j</format> = <entity value="ndash"/>(<format type="italics">n</format><entity value="ndash"/>1), <entity value="ndash"/>(<format type="italics">n</format><entity value="ndash"/>2),..., <entity value="ndash"/>1, 0, 1,..., <format type="italics">m</format><entity value="ndash"/>1
            <para>
            The elements of the output sequence <format type="italics">Rxy</format> are related to the elements in the sequence <format type="italics">h</format> by
            </para>
            	<para indent="true">
            		<image src="CrossCorrelate5.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., size<entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size = <format type="italics">n</format> + <format type="italics">m</format><entity value="ndash"/>1, and</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size represents the number of elements in the output sequence <format type="italics">Rxy</format>.</description>
            		</item>
            	</list>
            This algorithm uses <see cref="F:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm.FrequencyDomain" crefType="Unqualified"/>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/20/2011 7:42:18 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate2D(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Dsp.CorrelationAlgorithm)">
            <summary>Finds the 2D correlation of the input matrices.
            </summary>
            <param name="inputXData">First input matrix.
            </param>
            <param name="inputYData">Second input matrix.
            </param>
            <param name="algorithm">Specifies the correlation method to use.
            </param>
            <returns>The correlation of the input matrices.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="algorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>2/23/2012 10:59:24 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[],NationalInstruments.Analysis.Dsp.CorrelationAlgorithm,NationalInstruments.Analysis.Dsp.NormalizationMethod)">
            <summary>
            Calculates the cross correlation of the input arrays with the specified <see cref="T:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm" crefType="Unqualified"/> and <see cref="T:NationalInstruments.Analysis.Dsp.NormalizationMethod" crefType="Unqualified"/>.
            </summary>
            <param name="inputXData">
            The first input array.
            </param>
            <param name="inputYData">
            The second input array.
            </param>
            <param name="algorithm">
            Specifies the <see cref="T:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm"/> to use.
            </param>
            <param name="method">
            Specifies the <see cref="T:NationalInstruments.Analysis.Dsp.NormalizationMethod" crefType="Unqualified"/> to use.
            </param>
            <returns>
            The cross correlation of the input arrays, <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<para>
            		<paramref name="algorithm"/> is invalid.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="method"/> is invalid.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The cross correlation <format type="italics">Rxy</format> of the signals <format type="italics">x</format>(<format type="italics">t</format>) and <format type="italics">y</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            		<image src="CrossCorrelate1.gif"/>
            	</para>
            where the symbol <image src="otimes.gif"/> represents correlation.
            <para>
            The discrete implementation of the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[])"/> method is as follows: 
            <list type="table" bordered="false">
            			<listheader><term></term><description></description></listheader>
            			<item>
            				<term>
            let
            </term>
            				<description>
            					<format type="italics">h</format> represent a sequence whose indexing can be negative,
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">n</format> be the number of elements in <paramref name="inputXData"/>, and
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">m</format> be the number of elements in <paramref name="inputYData"/>.
            </description>
            			</item>
            		</list>
            	</para>
            	<para>
            Assume that the indexed elements of <format type="italics">X</format> and <format type="italics">Y</format> that lie outside their range are equal to zero,
            </para>
            	<para indent="true">
            		<image src="CrossCorrelate2.gif"/>
            	</para>
            and
            <para indent="true">
            		<image src="CrossCorrelate3.gif"/>
            	</para>
            then the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[])"/> method obtains the elements of <format type="italics">h</format> using
            <para indent="true">
            		<image src="CrossCorrelate4.gif"/>
            	</para>
            for <format type="italics">j</format> = <entity value="ndash"/>(<format type="italics">n</format><entity value="ndash"/>1), <entity value="ndash"/>(<format type="italics">n</format><entity value="ndash"/>2),..., <entity value="ndash"/>1, 0, 1,..., <format type="italics">m</format><entity value="ndash"/>1
            <para>
            The elements of the output sequence <format type="italics">Rxy</format> are related to the elements in the sequence <format type="italics">h</format> by
            </para>
            	<para indent="true">
            		<image src="CrossCorrelate5.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., size<entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size = <format type="italics">n</format> + <format type="italics">m</format><entity value="ndash"/>1, and</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size represents the number of elements in the output sequence <format type="italics">Rxy</format>.</description>
            		</item>
            	</list>
            This algorithm uses <see cref="F:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm.FrequencyDomain" crefType="Unqualified"/>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2009 11:27:00 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[],NationalInstruments.Analysis.Dsp.CorrelationAlgorithm,NationalInstruments.Analysis.Dsp.NormalizationMethod)">
            <summary>
            Calculates the cross correlation of the complex input arrays with the specified <see cref="T:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm" crefType="Unqualified"/> and <see cref="T:NationalInstruments.Analysis.Dsp.NormalizationMethod" crefType="Unqualified"/>.
            </summary>
            <param name="inputXData">
            The first input array.
            </param>
            <param name="inputYData">
            The second input array.
            </param>
            <param name="algorithm">
            Specifies the <see cref="T:NationalInstruments.Analysis.Dsp.CorrelationAlgorithm"/> to use.
            </param>
            <param name="method">
            Specifies the <see cref="T:NationalInstruments.Analysis.Dsp.NormalizationMethod" crefType="Unqualified"/> to use.
            </param>
            <returns>
            The cross correlation of the input arrays, <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<para>
            		<paramref name="algorithm"/> is invalid.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="method"/> is invalid.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The cross correlation <format type="italics">Rxy</format> of the signals <format type="italics">x</format>(<format type="italics">t</format>) and <format type="italics">y</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            		<image src="CrossCorrelate1.gif"/>
            	</para>
            where the symbol <image src="otimes.gif"/> represents correlation.
            <para>
            The discrete implementation of the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[])"/> method is as follows: 
            <list type="table" bordered="false">
            			<listheader><term></term><description></description></listheader>
            			<item>
            				<term>
            let
            </term>
            				<description>
            					<format type="italics">h</format> represent a sequence whose indexing can be negative,
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">n</format> be the number of elements in <paramref name="inputXData"/>, and
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">m</format> be the number of elements in <paramref name="inputYData"/>.
            </description>
            			</item>
            		</list>
            	</para>
            	<para>
            Assume that the indexed elements of <format type="italics">X</format> and <format type="italics">Y</format> that lie outside their range are equal to zero,
            </para>
            	<para indent="true">
            		<image src="CrossCorrelate2.gif"/>
            	</para>
            and
            <para indent="true">
            		<image src="CrossCorrelate3.gif"/>
            	</para>
            then the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.CrossCorrelate(System.Double[],System.Double[])"/> method obtains the elements of <format type="italics">h</format> using
            <para indent="true">
            		<image src="CrossCorrelate4.gif"/>
            	</para>
            for <format type="italics">j</format> = <entity value="ndash"/>(<format type="italics">n</format><entity value="ndash"/>1), <entity value="ndash"/>(<format type="italics">n</format><entity value="ndash"/>2),..., <entity value="ndash"/>1, 0, 1,..., <format type="italics">m</format><entity value="ndash"/>1
            <para>
            The elements of the output sequence <format type="italics">Rxy</format> are related to the elements in the sequence <format type="italics">h</format> by
            </para>
            	<para indent="true">
            		<image src="CrossCorrelate5.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., size<entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size = <format type="italics">n</format> + <format type="italics">m</format><entity value="ndash"/>1, and</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            size represents the number of elements in the output sequence <format type="italics">Rxy</format>.</description>
            		</item>
            	</list>
            This algorithm uses <see cref="F:NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm.FrequencyDomain" crefType="Unqualified"/>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/20/2011 7:43:01 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Integrate(System.Double[],System.Double,System.Double,System.Double)">
            <summary>Performs the discrete integration of the sampled signal. 
            </summary>
            <param name="inputData">
            The array to be integrated using Simpson's Rule.
            </param>
            <param name="dt">
            The sampling interval used in the integration.
            </param>
            <param name="initialCondition">
            The value preceding the first element of the input array. 
            </param>
            <param name="finalCondition">
            The value following the last element of the input array.
            </param>
            <returns>
            The integral values of the input array, <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputData"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="dt"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method integrates <paramref name="inputData"/> using Simpson's Rule for discrete evaluation.
            The values are accumulated in the output array. The last element of the output array contains the area under the curve.
            <para>
            The integral <format type="italics">F</format>(<format type="italics">t</format>) of a function <format type="italics">f</format>(<format type="italics">t</format>) is defined as
            </para>
                <para indent="true">
                    <image src="Integrate1.gif"/>
                </para>
            Let <format type="italics">Y</format> represent the sampled return value. The <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Integrate(System.Double[],System.Double,System.Double,System.Double)"/> method obtains the elements of <format type="italics">Y</format> using
            <para indent="true">
                    <image src="Integrate2.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">n</format> represents the number of samples in <format type="italics">x</format>(<format type="italics">t</format>),
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">x</format><format type="subscript"><entity value="ndash"/>1</format> is specified by <paramref name="initialCondition"/> when <format type="italics">j</format> = 0, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">x</format><format type="subscript">n</format> is specified by <paramref name="finalCondition"/> when <format type="italics">j</format> = <format type="italics">n</format><entity value="ndash"/>1.
            </description>
                    </item>
                </list>
                <paramref name="initialCondition"/> and <paramref name="finalCondition"/> minimize the overall error by increasing the accuracy at the boundaries, especially when the number of samples is small. Determining boundary conditions before the fact enhances accuracy. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/20/2003 11:55:50 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Differentiate(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            The discrete derivative of the input array.
            </summary>
            <param name="inputData">
            The array to be differentiated.
            </param>
            <param name="dt">
            The sampling interval of the data in the input array.  The sampling interval must be greater than 0.</param>
            <param name="initialCondition">
            The value preceding the first element of the input array. Refer to the Remarks section for more information on when this parameter is used.
            </param>
            <param name="finalCondition">
            The value following the last element of the input array. Refer to the Remarks section for more information on when this parameter is used.
             
            </param>
            <returns>
            The differentiated array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="dt"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The differentiation <format type="italics">f</format>(<format type="italics">t</format>) of a function <format type="italics">F</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            		<image src="Differentiate1.gif"/>
            	</para>
            Let <format type="italics">X </format> represent the sampled output sequence of the function <format type="italics">F(t)</format>.  Then the discrete derivative <format type="italics">d/dt X </format> is given by the sequence <format type="italics">Y</format>, 
            where
            <para indent="true">
            		<image src="Differentiate2.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., n<entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> is the number of samples in <format type="italics">x</format>(<format type="italics">t</format>),
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format><format type="subscript"><entity value="ndash"/>1</format> is specified by <paramref name="initialCondition"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format><format type="subscript">n</format> is specified by <paramref name="finalCondition"/>.
            </description>
            		</item>
            	</list>
            	The <paramref name="initialCondition"/> and <paramref name="finalCondition"/> values minimize the error at the boundaries. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>3/26/2008 5:25:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Differentiate(System.Double[],System.Double,System.Double[],System.Double[],NationalInstruments.Analysis.Dsp.DifferentiationMethod)">
            <summary>The discrete derivative of the input array using the specified <see cref="T:NationalInstruments.Analysis.Dsp.DifferentiationMethod"/>.</summary>
            <param name="inputData">
            The array to be differentiated.
            </param>
            <param name="dt">
            The sampling interval of the data in the input array.  The sampling interval must be greater than 0.</param>
            <param name="initialConditions">
            The values preceding the first element of the input array. Refer to the Remarks section for more information on the number of values required by each <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Differentiate(System.Double[],System.Double,System.Double,System.Double)"/>.
            </param>
            <param name="finalConditions">
            The final condition array of <paramref name="inputData"/>. The function uses the first element in <paramref name="finalConditions"/> to calculate the derivative if the <see cref="T:NationalInstruments.Analysis.Dsp.DifferentiationMethod"/> is either SecondOrderCentral or Forward. The function uses the first two elements in <paramref name="initialConditions"/> to calculate the derivative if <see cref="T:NationalInstruments.Analysis.Dsp.DifferentiationMethod"/> is FourthOrderCentral.
            </param>
            <param name="method">
            The <see cref="T:NationalInstruments.Analysis.Dsp.DifferentiationMethod"/> to use to differential the <paramref name="inputData"/>.
            </param>
            <returns>
            The differentiated array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="method"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Each <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Differentiate(System.Double[],System.Double,System.Double,System.Double)"/> uses a different set of elements from the <paramref name="initialConditions"/> and <paramref name="finalConditions"/> arrays.  When elements are required, the first elements in the array are used.
            <list type="table">
            		<listheader>
            			<term>DifferentiationMethod</term>
            			<description>Required Initial and Final Elements</description>
            		</listheader>
            		<item>
            			<term>
            Backward
            </term>
            			<description>
            1, -
            </description>
            		</item>
            		<item>
            			<term>
            Forward
            </term>
            			<description>
            -, 1
            </description>
            		</item>
            		<item>
            			<term>
            FourthOrderCentral
            </term>
            			<description>
            2, 2
            </description>
            		</item>
            		<item>
            			<term>
            SecondOrderCentral
            </term>
            			<description>
            1, 1
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            			</description>
            		</item>
            	</list>
            For an example of how the SecondOrderCentral method is calculated, refer to the Remarks section of <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Differentiate(System.Double[],System.Double,System.Double,System.Double)"/>.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/16/2008 12:54:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Decimate(System.Double[],System.Int32,System.Boolean)">
            <summary>Decimates the input array by a decimating factor.
            </summary>
            <param name="inputData">
            The input array to be decimated.
            </param>
            <param name="decimatingFactor">
            The factor by which <paramref name="inputData"/> is decimated. <paramref name="decimatingFactor"/> must be greater than zero. 
            </param>
            <param name="averagingOn">
            The Boolean that decides how the data points in <paramref name="inputData"/> are handled. When <paramref name="averagingOn"/> is set to <see langword="false"/>, 
            every decimating factor point is kept from <paramref name="inputData"/>. When <paramref name="averagingOn"/> is set to <see langword="true"/>, 
            each output point is the mean of the <paramref name="decimatingFactor"/> input points. 
            </param>
            <returns>
            The decimated array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputData"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="decimatingFactor"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="decimatingFactor"/> is greater than the number of samples in <paramref name="inputData"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>
            If <format type="italics">Y</format> represents the return value, the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Decimate(System.Double[],System.Int32,System.Boolean)"/> method obtains the elements of the sequence <format type="italics">Y</format> using
            </para>
                <para indent="true">
                    <image src="Decimate1.gif"/>
                </para>
            for <format type="italics">i</format> = 0, 1,..., size<entity value="ndash"/>1
            <para indent="true">
                    <image src="Decimate2.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">n</format> represents the number of elements in <format type="italics">X</format>, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">m</format> represents <paramref name="decimatingFactor"/>, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            ave represents <paramref name="averagingOn"/>, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            size represents the number of elements in the return value.
            </description>
                    </item>
                </list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2004 1:30:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Decimate(NationalInstruments.ComplexDouble[],System.Int32,System.Boolean)">
            <summary>Decimates the <see cref="T:NationalInstruments.ComplexDouble"/> input array by a decimating factor.
            </summary>
            <param name="inputData">
            The <see cref="T:NationalInstruments.ComplexDouble"/> input array to be decimated.
            </param>
            <param name="decimatingFactor">
            The factor by which <paramref name="inputData"/> is decimated. <paramref name="decimatingFactor"/> must be greater than zero. 
            </param>
            <param name="averagingOn">
            The Boolean that decides how the data points in <paramref name="inputData"/> are handled. When <paramref name="averagingOn"/> is set to <see langword="false"/>, 
            every decimating factor point is kept from <paramref name="inputData"/>. When <paramref name="averagingOn"/> is set to <see langword="true"/>, 
            each output point is the mean of the <paramref name="decimatingFactor"/> input points. 
            </param>
            <returns>
            The decimated array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputData"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="decimatingFactor"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="decimatingFactor"/> is greater than the number of samples in <paramref name="inputData"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>
            If <format type="italics">Y</format> represents the return value, the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Decimate(System.Double[],System.Int32,System.Boolean)"/> method obtains the elements of the sequence <format type="italics">Y</format> using
            </para>
                <para indent="true">
                    <image src="Decimate1.gif"/>
                </para>
            for <format type="italics">i</format> = 0, 1,..., size<entity value="ndash"/>1
            <para indent="true">
                    <image src="Decimate2.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">n</format> represents the number of elements in <format type="italics">X</format>, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">m</format> represents <paramref name="decimatingFactor"/>, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            ave represents <paramref name="averagingOn"/>, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            size represents the number of elements in the return value.
            </description>
                    </item>
                </list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:15:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.DecimateContinuous(System.Double[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Continuously decimates the input array by a decimating factor.
            </summary>
            <param name="inputData">The input array to be decimated.
            </param>
            <param name="startIndex">Determines from which sample in <paramref name="inputData"/> the decimation starts.
            </param>
            <param name="decimatingFactor">The factor by which <paramref name="inputData"/> is decimated. <paramref name="decimatingFactor"/> must be greater than zero. 
            </param>
            <param name="averagingOn">The Boolean that decides how the data points in <paramref name="inputData"/> are handled. When <paramref name="averagingOn"/> is set to <see langword="false"/>, 
            every decimating factor point is kept from <paramref name="inputData"/>. When <paramref name="averagingOn"/> is set to <see langword="true"/>, 
            each output point is the mean of the <paramref name="decimatingFactor"/> input points. 
            </param>
            <param name="initialize">Controls the initialization of the decimation.
            </param>
            <returns>The length of the decimated sequence.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="decimatingFactor"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="decimatingFactor"/> is greater than the number of samples in <paramref name="inputData"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            	<paramref name="startIndex"/> is not within the range of <paramref name="inputData"/>.
            </exception>
            <lastupdated>2/23/2012 10:27:00 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.DecimateContinuous(NationalInstruments.ComplexDouble[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Continuously decimates the complex input array by a decimating factor.
            </summary>
            <param name="inputData">The <see cref="T:NationalInstruments.ComplexDouble"/> input array to be decimated.
            </param>
            <param name="startIndex">Determines from which sample in <paramref name="inputData"/> the decimation starts.
            </param>
            <param name="decimatingFactor">The factor by which <paramref name="inputData"/> is decimated. <paramref name="decimatingFactor"/> must be greater than zero. 
            </param>
            <param name="averagingOn">The Boolean that decides how the data points in <paramref name="inputData"/> are handled. When <paramref name="averagingOn"/> is set to <see langword="false"/>, 
            every decimating factor point is kept from <paramref name="inputData"/>. When <paramref name="averagingOn"/> is set to <see langword="true"/>, 
            each output point is the mean of the <paramref name="decimatingFactor"/> input points. 
            </param>
            <param name="initialize">Controls the initialization of the decimation.
            </param>
            <returns>The length of the decimated sequence.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                    The number of samples in <paramref name="inputData"/> is equal to zero.
            </para>
            <para>
            -or-
            </para>
            <para>
            <paramref name="decimatingFactor"/> is less than or equal to zero.
            </para>
            <para>
            -or-
            </para>
            <para>
            <paramref name="decimatingFactor"/> is greater than the number of samples in <paramref name="inputData"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="startIndex"/> is not within the range of <paramref name="inputData"/>.
            </exception>
            <lastupdated>5/28/2012 5:49:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.PulseParameters(System.Double[],System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Analyzes an input pulse and generates the parameters which best describe the pulse.
            </summary>
            <param name="inputData">
            The values that represent the input pulse signal. 
            </param>
            <param name="amplitude90Percent">
            Upon return, contains the ninety percent value of the pulse amplitude.
            </param>
            <param name="amplitude50Percent">
            Upon return, contains the fifty percent value of the pulse amplitude.
            </param>
            <param name="amplitude10Percent">
            Upon return, contains the ten percent value of the pulse amplitude.
            </param>
            <param name="topValue">
            Upon return, contains the top value of the input pulse.
            </param>
            <param name="baseValue">
            Upon return, contains the base value of the input pulse.
            </param>
            <param name="overshoot">
            Upon return, contains the value of the pulse overshoot.
            </param>
            <param name="undershoot">
            Upon return, contains the value of the pulse undershoot.
            </param>
            <param name="delay">
            Upon return, contains the number of elements before the pulse is detected.
            </param>
            <param name="width">
            Upon return, contains the number of elements representing the duration of the pulse.
            </param>
            <param name="riseTime">
            Upon return, contains the value of the pulse rise time computed by taking the index of the <paramref name="amplitude90Percent"/>
            value minus the index of the <paramref name="amplitude10Percent"/> value.
            </param>
            <param name="fallTime">
            Upon return, contains the value of the pulse fall time computed by taking the index of the <paramref name="amplitude10Percent"/> 
            value minus the index of the <paramref name="amplitude90Percent"/> value.
            </param>
            <param name="slewRate">
            Upon return, contains the value of the pulse slew rate.
            </param>
            <returns>
            The amplitude of the pulse.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The input array is assumed to have a bimodal distribution. Because the input is a discrete representation of the pulse, the <paramref name="delay"/>, <paramref name="width"/>, <paramref name="riseTime"/>, and <paramref name="fallTime"/> parameters are integers.
            <para>
            When <paramref name="inputData"/> is a constant value c, this method sets the pulse parameters to the following values:</para>
            	<list type="bullet">
            		<item>
            			<description>
            amplitude = <paramref name="overshoot"/> = <paramref name="undershoot"/> = <paramref name="delay"/> = <paramref name="width"/> = 0
            </description>
            		</item>
            		<item>
            			<description>
            				<paramref name="topValue"/> = <paramref name="baseValue"/> = c
            </description>
            		</item>
            		<item>
            			<description>
            				<paramref name="riseTime"/> = <paramref name="fallTime"/> = <paramref name="slewRate"/> = NaN
            </description>
            		</item>
            	</list>
            	<para>
            This method uses the following steps to calculate the output parameters. 
            <list type="bullet">
            			<item>
            				<description>
            Find the maximum and minimum values in the <paramref name="inputData"/>.
            </description>
            			</item>
            			<item>
            				<description>
            Generate the histogram of the pulse with 1% range resolution. 
            </description>
            			</item>
            			<item>
            				<description>
            Determine the upper and lower modes to establish the <paramref name="topValue"/> and <paramref name="baseValue"/>. 
            </description>
            			</item>
            			<item>
            				<description>
            Find the <paramref name="overshoot"/>, amplitude, and <paramref name="undershoot"/> from <paramref name="topValue"/>, <paramref name="baseValue"/>, maximum, and minimum values. 
            </description>
            			</item>
            			<item>
            				<description>
            Scans <paramref name="inputData"/> and determines the <paramref name="slewRate"/>, <paramref name="riseTime"/>,
             <paramref name="fallTime"/>, <paramref name="width"/>, and <paramref name="delay"/>.
            </description>
            			</item>
            		</list>
            	</para>
            	<para>
            This method interpolates <paramref name="width"/> and <paramref name="delay"/> to obtain a more accurate result not only 
            of <paramref name="width"/> and <paramref name="delay"/> but also of <paramref name="slewRate"/>, <paramref name="riseTime"/>, 
            and <paramref name="fallTime"/>.
            </para>
            	<para>
            If <paramref name="inputData"/> contains a train of pulses, the method uses the train to determine <paramref name="overshoot"/>, <paramref name="topValue"/>, 
            amplitude, <paramref name="baseValue"/>, and <paramref name="undershoot"/> but uses only the first pulse in the train to 
            establish <paramref name="slewRate"/>, <paramref name="riseTime"/>, <paramref name="fallTime"/>, <paramref name="width"/>, and <paramref name="delay"/>.
            </para>
            	<note type="note">
            Because pulses commonly occur in the negative direction, this method can discriminate between positive and negative pulses and can analyze the <paramref name="inputData"/> sequence correctly. You do not need to preprocess the sequence before analyzing it. 
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso example="Analysis/Enterprise/PulseAnalyzer" launch="false">Pulse Analyzer Example</seealso>
            <lastupdated>1/30/2013 12:18:32 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Deconvolve(System.Double[],System.Double[])">
            <summary>
            Calculates the deconvolution of the input arrays. The deconvolution operation 
            is realized using Fourier transform pairs.
            </summary>
            <param name="convolvedData">
            The set of input data. The number of elements must be greater than or equal to the number of elements in <paramref name="inputYData"/>.
            If the number of elements is less than the number of elements in <paramref name="inputYData"/>,  no data is returned.
            </param>
            <param name="inputYData">
            The input array with which <paramref name="convolvedData"/> is deconvolved. 
            </param>
            <returns>
            The deconvolution of <paramref name="convolvedData"/> and <paramref name="inputYData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="convolvedData"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="convolvedData"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Deconvolve(System.Double[],System.Double[])"/> method can use Fourier identities to realize the convolution operation because
            <para indent="true">
                    <format type="italics">x</format>(<format type="italics">t</format>) * <format type="italics">y</format>(<format type="italics">t</format>) <image src="doublearrow.gif"/>
                    <format type="italics"> X</format>(<format type="italics">f</format>) <format type="italics">Y</format>(<format type="italics">f</format>) 
            </para>
            is a Fourier transform pair, where the symbol * denotes convolution, and the deconvolution is the inverse of the convolution operation. If <format type="italics">h</format>(<format type="italics">t</format>) is the signal resulting from the deconvolution of the signals <format type="italics">x</format>(<format type="italics">t</format>) and <format type="italics">y</format>(<format type="italics">t</format>), the <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Deconvolve(System.Double[],System.Double[])"/> method obtains <format type="italics">h</format>(<format type="italics">t</format>)  using the equation
            <para indent="true">
                    <image src="Deconvolve.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">X</format>(<format type="italics">f</format>) is the Fourier transform of <format type="italics">x</format>(<format type="italics">t</format>), and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">Y</format>(<format type="italics">f</format>) is the Fourier transform of <format type="italics">y</format>(<format type="italics">t</format>).
            </description>
                    </item>
                </list>
            The <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Deconvolve(System.Double[],System.Double[])"/> method performs the discrete implementation of the deconvolution using the following steps.
            <list type="number">
                    <item>
                        <description>
            Compute the Fourier transform of <paramref name="convolvedData"/>.
            </description>
                    </item>
                    <item>
                        <description>
            Compute the Fourier transform of <paramref name="inputYData"/>. 
            </description>
                    </item>
                    <item>
                        <description>
            Divide the Fourier transform of <format type="italics">X</format> * <format type="italics">Y</format> by the Fourier transform of <format type="italics">Y</format>. Call the new sequence <format type="italics">h</format>. 
            </description>
                    </item>
                    <item>
                        <description>
            Compute the inverse Fourier transform of <format type="italics">h</format> to obtain the deconvoluted sequence <format type="italics">X</format>.
            </description>
                    </item>
                </list>
                <note type="note">
            The deconvolution operation is a numerically unstable operation, and it is not always possible to solve the system numerically. Computing the deconvolution by FFTs is perhaps the most stable, generic algorithm that does not require sophisticated DSP techniques. However, it is not free of errors, for example, when there are zeros in the Fourier transform of <paramref name="inputYData"/>. 
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/18/2003 2:56:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.UnwrapPhase(System.Double[])">
            <summary>
            Unwraps the phase array by eliminating discontinuities whose absolute values exceed 2 Pi radians. 
            </summary>
            <param name="phase">
            On input, an array of discontinuous phase values, in radians. On output, an array of continuous phase values, in radians. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="phase"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="phase"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/26/2008 9:49:34 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SignalProcessing.UnwrapPhase(System.Double[],NationalInstruments.Analysis.Dsp.PhaseUnit)">
            <summary>
            Unwraps the phase array by eliminating discontinuities whose absolute values exceed 2 Pi radians or 360 degrees. 
            </summary>
            <param name="phase">
            On input, an array of discontinuous phase values. On output, an array of continuous phase values. 
            </param>
            <param name="unit">
            The units of the phase data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="phase"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="phase"/> is equal to zero.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="unit"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/26/2008 9:50:17 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.SymmetricWindow">
            <summary>
            Applies a symmetric window to the time-domain signal.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>Symmetric windows are often used in digital filter design, whereas asymmetrical windows are 
            often used in spectrum estimation. For a given window type, the coefficients of the <format type="italics">n</format>-point 
            asymmetrical window are the same as the first <format type="italics">n</format> coefficients of the (<format type="italics">n</format>+1)-point symmetric window.
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.UnscaledWindow"/>
            <seealso example="Analysis/Professional/ComplexWindowing" launch="false">Comnplex Windowing (Enterprise and Professional editions)</seealso>
            <seealso example="Analysis/Professional/Windowing" launch="false">Windowing (Enterprise and Professional editions)</seealso>
            <lastupdated>1/31/2013 11:38:20 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateRectangularWindow">
            <summary>
            Initializes a new instance of a Rectangular symmetric window.
            </summary>
            <returns>
            The Rectangular symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 11:41:26 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateHanningWindow">
            <summary>
            Initializes a new instance of a Hanning symmetric window.
            </summary>
            <returns>
            The Hanning symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Hanning{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = 0.5<format type="italics">x<format type="subscript">i</format></format> [1 <entity value="ndash"/> cos(<format type="italics">w</format>)]
            </para>
            	<para indent="true">
            		<image src="Hamming.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:14:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateHammingWindow">
            <summary>
            Initializes a new instance of a Hamming symmetric window.
            </summary>
            <returns>
            The Hamming symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Hamming{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = <format type="italics">x<format type="subscript">i</format></format> [0.54 <entity value="ndash"/> 0.46cos(<format type="italics">w</format>)]
            </para>
            	<para indent="true">
            		<image src="Hamming.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:13:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateBlackmanHarrisWindow">
            <summary>
            Initializes a new instance of a Blackman-Harris symmetric window.
            </summary>
            <returns>
            The Blackman-Harris symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Blackman-Harris{<format type="italics">X</format>}, this method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="BlackmanHarris.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Blackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:07:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateExactBlackmanWindow">
            <summary>
            Initializes a new instance of an exact Blackman symmetric window.
            </summary>
            <returns>
            The exact Blackman symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence exact 
            Blackman{<format type="italics">X</format>}, this method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="ExactBlackman1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="ExactBlackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>,
            </description>
            		</item>
            	</list>
            	<para indent="true">
            		<format type="italics">a</format><format type="subscript">0</format> = 7938/18608,
            </para>
            	<para indent="true">
            		<format type="italics">a</format><format type="subscript">1</format> = 9240/18608, and
            </para>
            	<para indent="true">
            		<format type="italics">a</format><format type="subscript">2</format> = 1430/18608.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:11:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateBlackmanWindow">
            <summary>
            Initializes a new instance of a Blackman symmetric window.
            </summary>
            <returns>
            The Blackman symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence 
            Blackman{<format type="italics">X</format>}, this method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="Blackman1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Blackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:06:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateFlatTopWindow">
            <summary>
            Initializes a new instance of a flat top symmetric window.
            </summary>
            <returns>
            The flat top symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence flat top{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="FlatTop1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="FlatTop2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:11:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateBlackmanHarris4TermWindow">
            <summary>
            Initializes a new instance of a 4-term Blackman-Harris symmetric window.
            </summary>
            <returns>
            The 4-term Blackman-Harris symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Blackman-Harris{<format type="italics">X</format>}, this method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="BlackmanHarris.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Blackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:08:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateBlackmanHarris7TermWindow">
            <summary>
            Initializes a new instance of a 7-term Blackman-Harris symmetric window.
            </summary>
            <returns>
            The 7-term Blackman-Harris symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Blackman-Harris{<format type="italics">X</format>}, this method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="BlackmanHarris.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Blackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:08:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateLowSideLobeWindow">
            <summary>
            Initializes a new instance of a low side lobe symmetric window.
            </summary>
            <returns>
            The low side lobe symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 11:42:14 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateBlackmanNuttallWindow">
            <summary>
            Initializes a new instance of a Blackman-Nuttall symmetric window.
            </summary>
            <returns>
            The Blackman-Nuttall symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Blackman-Nuttall window is defined as follows:
            <para indent="true">
            		<image src="BlkmanNuttallWinform_0.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">N</format> is the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:09:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateTriangleWindow">
            <summary>
            Initializes a new instance of a triangle symmetric window.
            </summary>
            <returns>
            The triangle symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence triangular{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="Triangular1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Triangular2.gif"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            tr(<format type="italics">w</format>) = 1 <entity value="ndash"/> |<format type="italics">w</format>|, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:17:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateKaiserWindow">
            <summary>
            Initializes a new instance of a Kaiser symmetric window using a default value of beta.
            </summary>
            <returns>
            The Kaiser symmetric window.
            </returns>
            <remarks><para>
            This method uses a beta value of 0.0. 
            </para>
            If <format type="italics">y</format> represents the output sequence Kaiser-Bessel{<format type="italics">X</format>(<format type="italics">t</format>)}, 
            this method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="Kaiser1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Kaiser2.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Kaiser3.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>(<format type="italics">t</format>), and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">I</format><format type="subscript">o</format> represents the zero-order modified Bessel function. 
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:15:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateKaiserWindow(System.Double)">
            <summary>
            Initializes a new instance of a Kaiser symmetric window.
            </summary>
            <param name="beta">
            The beta parameter for the Kaiser window. <paramref name="beta"/> is proportional to the side lobe attenuation, such that, 
            the larger beta is, the greater the side lobe attenuation. 
            </param>
            <returns>
            The Kaiser symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Kaiser-Bessel{<format type="italics">X</format>(<format type="italics">t</format>)}, 
            this method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="Kaiser1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Kaiser2.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Kaiser3.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>(<format type="italics">t</format>), and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">I</format><format type="subscript">o</format> represents the zero-order modified Bessel function. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:16:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateDolphChebyshevWindow">
            <summary>
            Initializes a new instance of a Dolph-Chebyshev symmetric window using a default value of the main lobe-to-side lobe ratio.
            </summary>
            <returns>
            The Dolph-Chebyshev symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            This method uses a main lobe-to-side lobe ratio of 60 dB.
            </para>
            If <format type="italics">y</format> represents the output sequence Chebyshev{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from the following equation:
            <para indent="true">
            		<image src="ChebWinform_1.png"/>
            	</para>
            where the <format type="italics">m</format><format type="superscript">th</format>-order polynomial is
            <para indent="true">
            		<image src="ChebWinform_2.png"/>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/29/2005 10:50:12 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateDolphChebyshevWindow(System.Double)">
            <summary>
            Initializes a new instance of a Dolph-Chebyshev symmetric window.
            </summary>
            <param name="mainLobeToSideLobeRatio">
            The ratio of the main lobe to the side lobe, in decibels.
            </param>
            <returns>
            The Dolph-Chebyshev symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Chebyshev{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from the following equation:
            <para indent="true">
            		<image src="ChebWinform_1.png"/>
            	</para>
            where the <format type="italics">m</format><format type="superscript">th</format>-order polynomial is
            <para indent="true">
            		<image src="ChebWinform_2.png"/>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:25:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateGaussianWindow">
            <summary>
            Initializes a new instance of a Gaussian symmetric window using a default value for standard deviation.
            </summary>
            <returns>
            The Gaussian symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method uses a standard deviation of 0.2.
            	<para>
            A Gaussian window is defined as follows:
            </para>
            	<para indent="true">
            		<image src="GaussWinform_6.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/29/2005 10:52:57 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateGaussianWindow(System.Double)">
            <summary>
            Initializes a new instance of a Gaussian symmetric window.
            </summary>
            <param name="standardDeviation">
            The standard deviation for the Gaussian window.
            </param>
            <returns>
            The Gaussian symmetric window.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            A Gaussian window is defined as follows:
            </para>
            	<para indent="true">
            		<image src="GaussWinform_6.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 5:12:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.Apply(System.Double[])">
            <summary>
            Applies a symmetric window to the time-domain signal.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method scales the result so that when the power or amplitude spectrum of the windowed waveform is computed, all windows provide the same level within the accuracy constraints of the window. The method also returns important window constants for the selected window. These constants are useful when you use methods that perform computations on the power spectrum. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 11:38:45 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.Apply(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies a symmetric window to the time-domain complex signal.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method scales the result so that when the power or amplitude spectrum of the windowed waveform is computed, all windows provide the same level within the accuracy constraints of the window. The method also returns important window constants for the selected window. These constants are useful when you use methods that perform computations on the power spectrum. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/20/2011 10:19:02 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/7/2004 4:41:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.SymmetricWindow.WindowType">
            <summary>
            Gets or sets the type of symmetric window that was created.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindowType"/>. The default value is <see cref="F:NationalInstruments.Analysis.Dsp.ScaledWindowType.Hanning"/>.
            </value>
            <lastupdated>9/13/2005 2:53:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.SymmetricWindow.Beta">
            <summary>
            Gets or sets the beta (shape) used by the symmetric <see cref="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateKaiserWindow"/> method.
            </summary>
            <value>
            The beta value. A larger beta value results in a narrower window.
            </value>
            <remarks>
            The following are common beta values:
            <list type="bullet">
            		<item>
            			<description>
            Rectangular window (beta = 0.0)
            </description>
            		</item>
            		<item>
            			<description>
            Triangle window (beta = 1.33)
            </description>
            		</item>
            		<item>
            			<description>
            Hanning window (beta = 3.86)
            </description>
            		</item>
            		<item>
            			<description>
            Hamming window (beta = 4.86)
            </description>
            		</item>
            		<item>
            			<description>
            Blackman window (beta = 7.04)
            </description>
            		</item>
            	</list>
            </remarks>
            <lastupdated>9/27/2005 12:33:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.SymmetricWindow.MainLobeToSideLobeRatio">
            <summary>
            Gets or sets the main lobe-to-side lobe ratio used by the 
            symmetric <see cref="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateDolphChebyshevWindow"/> method.
            </summary>
            <value>
            The height ratio of the main lobe to the side lobe, in decibels.
            </value>
            <lastupdated>9/27/2005 5:34:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Dsp.SymmetricWindow.StandardDeviation">
            <summary>
            Gets or sets the standard deviation used by the symmetric <see cref="M:NationalInstruments.Analysis.Dsp.SymmetricWindow.CreateGaussianWindow"/> method.
            </summary>
            <value>
            The value of the standard deviation. The default value is 0.2. If the standard deviation is <entity value="le"/> 0, the default value is used.
            </value>
            <lastupdated>9/27/2005 12:01:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.SymmetricWindowType">
            <summary>
            Specifies the symmetric window type to be used by the <see cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/> class.
            </summary>
            <lastupdated>9/13/2005 1:36:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Rectangular">
            <summary>
            Applies a rectangular symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Hanning">
            <summary>
            Applies a Hanning symmetric window. This is the default value.
            </summary>
            <lastupdated>9/13/2005 1:37:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Hamming">
            <summary>
            Applies a Hamming symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.BlackmanHarris">
            <summary>
            Applies a Blackman-Harris symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.ExactBlackman">
            <summary>
            Applies an exact Blackman symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Blackman">
            <summary>
            Applies a Blackman symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:36:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.FlatTop">
            <summary>
            Applies a flat top symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.BlackmanHarris4Term">
            <summary>
            Applies a 4-term Blackman-Harris symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.BlackmanHarris7Term">
            <summary>
            Applies a 7-term Blackman-Harris symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.LowSidelobe">
            <summary>
            Applies a low side lobe symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.BlackmanNuttall">
            <summary>
            Applies a Blackman-Nuttall symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Triangle">
            <summary>
            Applies a triangle symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Kaiser">
            <summary>
            Applies a Kaiser symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.DolphChebyshev">
            <summary>
            Applies a Dolph-Chebyshev symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.SymmetricWindowType.Gaussian">
            <summary>
            Applies a Gaussian symmetric window.
            </summary>
            <lastupdated>9/13/2005 1:37:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.Transforms">
            <summary>
            Provides a set of methods that transform data between the time and frequency domain.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This class has methods that perform frequency domain transformations, frequency domain analysis, time domain analysis, and other transforms, such as 
            the Hartley and Hilbert transforms.
            </remarks>
            <lastupdated>5/27/2003 1:04:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.#ctor">
            <exclude/>
            <lastupdated>9/28/2005 9:55:20 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.#cctor">
            <exclude/>
            <lastupdated>9/28/2005 9:55:16 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])">
            <summary>
            This member is obsolete. Use an overload of this method to achieve the same functionality.
            </summary>
            <param name="realData">This parameter is not documented because the member is obsolete.
            </param>
            <param name="imaginaryData">This parameter is not documented because the member is obsolete.
            </param>
            <lastupdated>9/16/2009 4:19:19 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(NationalInstruments.ComplexDouble[])">
            <summary>
            Computes, in place, the one-dimensional Fast Fourier Transform (FFT) of a complex time-domain signal. 
            </summary>
            <param name="data">
            On input, contains the data whose FFT is to be computed. On output, contains the FFT of the time-domain signal.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/28/2005 9:45:49 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(NationalInstruments.ComplexDouble[],System.Boolean)">
            <summary>Computes the one-dimensional Fast Fourier Transform (FFT) of a complex time-domain signal with 
            the specified shift. 
            </summary>
            <param name="inputData">
            The complex time-domain signal.
            </param>
            <param name="shiftDC">
            Specifies whether to shift the DC component to the center of the FFT. If <paramref name="shiftDC"/> is set to <see langword="true"/>, the FFT
            is DC-centered. The first element of the FFT is the -PI frequency element. 
            The floor(number of elements in FFT / 2)<format type="superscript">th</format> element of FFT is the DC component. 
            </param>
            <returns>
            The FFT of the time-domain signal.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/28/2005 9:46:14 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(NationalInstruments.ComplexDouble[],System.Boolean,System.Int32)">
            <summary>Computes the one-dimensional Fast Fourier Transform (FFT) of a complex time-domain signal, based on the size specified for the FFT.
            </summary>
            <param name="inputData">
            The complex time-domain signal.
            </param>
            <param name="shiftDC">
            Specifies whether to shift the DC component to the center of the FFT. If <paramref name="shiftDC"/> is set to <see langword="true"/>, the FFT
            is DC-centered. The first element of the FFT is the -PI frequency element. 
            The floor(number of elements in FFT / 2)<format type="superscript">th</format> element of FFT is the DC component. 
            </param>
            <param name="fftSize">
            The desired FFT size. If <paramref name="fftSize"/> is greater than the number of elements in <paramref name="inputData"/>,
             this method pads <paramref name="inputData"/> with zeros to match <paramref name="fftSize"/>.
             If <paramref name="fftSize"/> is smaller than the length of <paramref name="inputData"/>, only the first <paramref name="fftSize"/> 
            elements are used. 
            If <paramref name="fftSize"/> is less than 1, this method sets the length of <paramref name="inputData"/> as <paramref name="fftSize"/>. 
            </param>
            <returns>
            The FFT of the time-domain signal.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/28/2005 9:47:09 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.RealFft(System.Double[])">
            <summary>
            Computes, in place, the Fast Fourier Transform (FFT) of a real-valued array. Performing a real-valued FFT yields a complex result.
            </summary>
            <param name="realData">
            On input, the real part of the values used to compute the real-valued FFT. 
            On output, the calculated real-valued FFT.  <note type="note">
            The input array is modified by this method. If you need the original data, you must make a copy if it before invoking this method.
            </note>
            </param>
            <returns>
            The calculated real-valued FFT.
            </returns>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="realData"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/28/2005 9:54:36 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.RealFft(System.Double[],System.Boolean,System.Int32)">
            <summary>
            Computes the Fast Fourier Transform (FFT) of a real, one-dimensional time-domain signal with the specified 
            FFT size.
            </summary>
            <param name="realData">
            The real time-domain signal. 
            </param>
            <param name="shiftDC">
            Specifies whether <paramref name="realData"/> is DC-centered. If <paramref name="shiftDC"/> is set to <see langword="true"/>, <paramref name="realData"/>
            is DC-centered. If set to <see langword="false"/>, <paramref name="realData"/> is not DC-centered. 
            The first element of <paramref name="realData"/> is the DC component.
            </param>
            <param name="fftSize">The desired FFT size. If <paramref name="fftSize"/> is greater than 
            the number of elements in <paramref name="realData"/>, this method pads <paramref name="realData"/> with trailing zeros to get a time-domain signal that 
            has <paramref name="fftSize"/> elements. If <paramref name="fftSize"/> is smaller than the number of elements in <paramref name="realData"/>, 
            this method truncates <paramref name="realData"/>. If <paramref name="fftSize"/> is less than 1, this method uses 
            the number of elements in <paramref name="realData"/> for this parameter. 
            </param>
            <returns>
            The one-dimensional FFT of the time-domain signal.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="realData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/28/2005 9:55:05 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.RealFft(System.Double[],System.Boolean)">
            <summary>
            Computes the Fast Fourier Transform (FFT) of a real, one-dimensional time-domain signal.
            </summary>
            <param name="realData">
            The real time-domain signal. 
            </param>
            <param name="shiftDC">
            Specifies whether <paramref name="realData"/> is DC-centered. If <paramref name="shiftDC"/> is set to <see langword="true"/>, <paramref name="realData"/>
            is DC-centered. If set to <see langword="false"/>, <paramref name="realData"/> is not DC-centered. 
            The first element of <paramref name="realData"/> is the DC component.
            </param>
            <returns>
            The one-dimensional FFT of the time-domain signal.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="realData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/28/2005 9:54:53 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.RealFft2D(System.Double[0:,0:],System.Boolean)">
            <summary>
            Computes the Fast Fourier Transform (FFT) of a real, two-dimensional time-domain signal.
            </summary>
            <param name="realData">
            The real time-domain signal. 
            </param>
            <param name="shiftDC">
            Specifies whether <paramref name="realData"/> is DC-centered. If <paramref name="shiftDC"/> is set to <see langword="true"/>, <paramref name="realData"/>
            is DC-centered. If set to <see langword="false"/>, <paramref name="realData"/> is not DC-centered. 
            The first element of <paramref name="realData"/> is the DC component.
            </param>
            <returns>
            The two-dimensional FFT of the time-domain signal.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="realData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 10:34:42 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.RealFft2D(System.Double[0:,0:],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Computes the Fast Fourier Transform (FFT) of a real, two-dimensional time-domain signal with the specified 
            number of rows and columns.
            </summary>
            <param name="realData">
            The real time-domain signal. 
            </param>
            <param name="shiftDC">
            Specifies whether <paramref name="realData"/> is DC-centered. If <paramref name="shiftDC"/> is set to <see langword="true"/>, <paramref name="realData"/>
            is DC-centered. If set to <see langword="false"/>, <paramref name="realData"/> is not DC-centered. 
            The first element of <paramref name="realData"/> is the DC component.
            </param>
            <param name="rowsForFft"> The number of rows on which to perform the FFT. 
            If <paramref name="rowsForFft"/> is less than 1, this method uses the number of rows of <paramref name="realData"/> for this parameter. 
            If <paramref name="rowsForFft"/> does not equal the number of rows of <paramref name="realData"/>, this method truncates <paramref name="realData"/> or 
            pads <paramref name="realData"/> with zeros to create a <paramref name="rowsForFft"/> by <paramref name="columnsForFft"/> matrix for 
            which it calculates the FFT. 
            </param>
            <param name="columnsForFft">
            The number of columns on which to perform the FFT. 
            If <paramref name="columnsForFft"/> is less than 1, this method uses the number of rows of <paramref name="realData"/> for this parameter. 
            If <paramref name="columnsForFft"/> does not equal the number of rows of <paramref name="realData"/>, this method truncates <paramref name="realData"/> or 
            pads <paramref name="realData"/> with zeros to create a <paramref name="rowsForFft"/> by <paramref name="columnsForFft"/> matrix for 
            which it calculates the FFT. 
            </param>
            <returns>
            The two-dimensional FFT of the time-domain signal.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="realData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 10:37:25 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFft(System.Double[],System.Double[])">
            <summary>
            This member is obsolete. Use an overload of this method to achieve the same functionality.
            </summary>
            <param name="realData">
            	This parameter is not documented because the member is obsolete.
            </param>
            <param name="imaginaryData">
            This parameter is not documented because the member is obsolete.
            </param>
            <lastupdated>9/16/2009 3:33:13 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFft(NationalInstruments.ComplexDouble[])">
            <summary>Computes, in place, the complex, one-dimensional inverse Fast Fourier Transform (FFT) of an input sequence.
            </summary>
            <param name="fft">
            On input, contains the data whose transform is to be calculated.
            On output, contains the calculated transform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="fft"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/28/2005 9:48:04 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFft(NationalInstruments.ComplexDouble[],System.Boolean)">
            <summary>
            Computes the complex, one-dimensional inverse Fast Fourier Transform (FFT) of an input sequence with the specified shift.
            </summary>
            <param name="fft">
            The input frequency domain sequence. 
            </param>
            <param name="shiftDC">
            Specifies whether <paramref name="fft"/> is DC-centered. If <paramref name="shiftDC"/> is set to 
            <see langword="true"/>, <paramref name="fft"/>
            is DC-centered. If set to <see langword="false"/>, <paramref name="fft"/> is not DC-centered. The 
            first element of <paramref name="fft"/> is the DC component.
            </param>
            <returns>
            The frequency-domain signal. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="fft"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/28/2005 9:53:35 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseRealFft(System.Double[],System.Double[])">
            <summary>
            This member is obsolete. Use an overload of this method to achieve the same functionality.
            </summary>
            <param name="realData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="imaginaryData">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <lastupdated>9/16/2009 4:22:48 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseRealFft(NationalInstruments.ComplexDouble[])">
            <summary>
            Computes the real inverse Fast Fourier Transform (FFT) of an input sequence. 
            </summary>
            <param name="fft">
            Contains the <see cref="T:NationalInstruments.ComplexDouble"/> values used to compute the real inverse FFT.
            </param>
            <returns>
            The real part of the transform. There is no imaginary part.
            </returns>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="fft"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/28/2005 9:53:55 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseRealFft(NationalInstruments.ComplexDouble[],System.Boolean)">
            <summary>
            Computes the real inverse Fast Fourier Transform (FFT) of an input sequence with the specified shift.
            </summary>
            <param name="fft">
            The input frequency-domain signal. 
            </param>
            <param name="shiftDC">
            Specifies whether <paramref name="fft"/> is DC-centered. If <paramref name="shiftDC"/> is set to 
            <see langword="true"/>, <paramref name="fft"/>
            is DC-centered. If set to <see langword="false"/>, <paramref name="fft"/> is not DC-centered. The 
            first element of <paramref name="fft"/> is the DC component.
            </param>
            <returns>
            The frequency-domain signal. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="fft"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/28/2005 9:54:16 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.PowerSpectrum(System.Double[])">
            <summary>
            Calculates the power spectrum of an array.  
            </summary>
            <param name="data">
            Contains the values used to compute the power spectrum. On output, contains the power spectrum.
            </param>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Power Spectrum <format type="italics">S<format type="subscript">xx</format>(f)</format> of a function <format type="italics">x(t)</format> is defined as
            <para indent="true">
            <image src="PowerSpectrum1.gif"/>
            </para>
            <list type="table" bordered="false">
            <listheader><term></term><description></description></listheader>
            <item>
            <term>
            where
            </term>
            <description>
            <format type="italics">X(f)</format> = <format type="italics">F</format>{<format type="italics">x(t)</format>}, and
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">X*(f)</format> represents the complex conjugate of <format type="italics">X(f)</format>.
            </description>
            </item>
            </list>
            <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.PowerSpectrum(System.Double[])"/> uses the FFT and DFT routines to compute the power spectrum, which is given by
            <para indent="true">
            <image src="PowerSpectrum2.gif"/>
            </para>
            <list type="table" bordered="false">
            <listheader><term></term><description></description></listheader>
            <item>
            <term>
            where
            </term>
            <description>
            <format type="italics">S<format type="subscript">xx</format></format> represents the output sequence power spectrum, and
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">n</format> represents the number of samples in <paramref name="data"/>.
            </description>
            </item>
            </list>
            When the number of samples, <format type="italics">n</format>, in <paramref name="data"/> is a valid power of 2
            <para indent="true">
            <format type="italics">n</format> = 2<format type="italics"><format type="superscript">m</format></format>
            </para>
            for <format type="italics">m</format> = 1, 2,..., 23,
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.PowerSpectrum(System.Double[])"/> method computes the fast Fourier transform of a real-valued sequence using the split-radix algorithm and efficiently scales the magnitude square. The largest power spectrum that the method can compute using the FFT is 
            <para indent="true">
            2<format type="superscript">23</format>(8,388,608 or 8M).
            </para>
            When the number of samples in <paramref name="data"/> is not a valid power of 2
            <para indent="true">
            <format type="italics">n</format>
            <entity value="ne"/> 2<format type="italics"><format type="superscript">m</format></format>
            </para>
            <list type="table" bordered="false">
            <listheader><term></term><description></description></listheader>
            <item>
            <term>
            where
            </term>
            <description>
            <format type="italics">m</format> = 1, 2,..., 23, and
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">n</format> represents the number of samples,
            </description>
            </item>
            </list>
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.PowerSpectrum(System.Double[])"/> method computes the discrete Fourier transform of a real-valued sequence using an efficient DFT algorithm and scales the magnitude square. The largest power spectrum that the method can compute using the fast DFT is
            <para indent="true">
            2<format type="superscript">22</format><entity value="ndash"/>1(4,194,303 or 4M<entity value="ndash"/>1).
            </para> 
            Let <format type="italics">Y</format> be the Fourier transform of <paramref name="data"/> and <format type="italics">n</format> be the number of samples in it. You can show that
            <para indent="true">
            <image src="PowerSpectrum3.gif"/>
            </para>
            You can interpret the power in the (<format type="italics">n</format><entity value="ndash"/>1)<format type="superscript">th</format> element of <format type="italics">Y</format> as the power in the <entity value="ndash"/><format type="italics">i</format><format type="superscript">th</format> element of the sequence, which represents the power in the negative <entity value="ndash"/><format type="italics">i</format><format type="superscript">th</format> harmonic. You can find the total power for the <format type="italics">i</format><format type="superscript">th</format> harmonic (DC and Nyquist component not included) using
            <para indent="true">
            <image src="PowerSpectrum4.gif"/>
            </para>
            The total power in the DC and Nyquist components are <image src="PowerSpectrum5.gif"/> respectively.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>5/28/2012 5:53:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.PowerSpectrum(NationalInstruments.ComplexDouble[])">
            <summary>
            Calculates the power spectrum of an array.  
            </summary>
            <param name="data">
            Values used to compute the power spectrum.</param>
            <returns>The computed power spectrum.</returns>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Power Spectrum <format type="italics">S<format type="subscript">xx</format>(f)</format> of a function <format type="italics">x(t)</format> is defined as
            <para indent="true">
            		<image src="PowerSpectrum1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">X(f)</format> = <format type="italics">F</format>{<format type="italics">x(t)</format>}, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">X*(f)</format> represents the complex conjugate of <format type="italics">X(f)</format>.
            </description>
            		</item>
            	</list>
            	<see cref="M:NationalInstruments.Analysis.Dsp.Transforms.PowerSpectrum(System.Double[])"/> uses the FFT and DFT routines to compute the power spectrum, which is given by
            <para indent="true">
            		<image src="PowerSpectrum2.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">S<format type="subscript">xx</format></format> represents the output sequence power spectrum, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples in <paramref name="data"/>.
            </description>
            		</item>
            	</list>
            When the number of samples, <format type="italics">n</format>, in <paramref name="data"/> is a valid power of 2
            <para indent="true">
            		<format type="italics">n</format> = 2<format type="italics"><format type="superscript">m</format></format>
            	</para>
            for <format type="italics">m</format> = 1, 2,..., 23,
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.PowerSpectrum(System.Double[])"/> method computes the fast Fourier transform of a real-valued sequence using the split-radix algorithm and efficiently scales the magnitude square. The largest power spectrum that the method can compute using the FFT is 
            <para indent="true">
            2<format type="superscript">23</format>(8,388,608 or 8M).
            </para>
            When the number of samples in <paramref name="data"/> is not a valid power of 2
            <para indent="true">
            		<format type="italics">n</format>
            		<entity value="ne"/> 2<format type="italics"><format type="superscript">m</format></format>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">m</format> = 1, 2,..., 23, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples,
            </description>
            		</item>
            	</list>
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.PowerSpectrum(System.Double[])"/> method computes the discrete Fourier transform of a real-valued sequence using an efficient DFT algorithm and scales the magnitude square. The largest power spectrum that the method can compute using the fast DFT is
            <para indent="true">
            2<format type="superscript">22</format><entity value="ndash"/>1(4,194,303 or 4M<entity value="ndash"/>1).
            </para> 
            Let <format type="italics">Y</format> be the Fourier transform of <paramref name="data"/> and <format type="italics">n</format> be the number of samples in it. You can show that
            <para indent="true">
            		<image src="PowerSpectrum3.gif"/>
            	</para>
            You can interpret the power in the (<format type="italics">n</format><entity value="ndash"/>1)<format type="superscript">th</format> element of <format type="italics">Y</format> as the power in the <entity value="ndash"/><format type="italics">i</format><format type="superscript">th</format> element of the sequence, which represents the power in the negative <entity value="ndash"/><format type="italics">i</format><format type="superscript">th</format> harmonic. You can find the total power for the <format type="italics">i</format><format type="superscript">th</format> harmonic (DC and Nyquist component not included) using
            <para indent="true">
            		<image src="PowerSpectrum4.gif"/>
            	</para>
            The total power in the DC and Nyquist components are <image src="PowerSpectrum5.gif"/> respectively.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>11/21/2011 3:23:19 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.FastHartley(System.Double[])">
            <summary>
            Calculates, in place, the Fast Hartley transform of the input array.
            </summary>
            <param name="data">
            On input, contains the data to be transformed. The number of elements in <paramref name="data"/> must be a 
            valid power of two. On output, contains the calculated Hartley Transform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="data"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="data"/> must be a power of two.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Hartley transform of a function <format type="italics">x</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            		<image src="FastHartley1.gif"/>
            	</para>
            where cas(<format type="italics">x</format>) = cos(<format type="italics">x</format>) + sin(<format type="italics">x</format>).
            <para>
            If <format type="italics">Y</format> represents the output sequence Hartley{<format type="italics">X</format>} obtained by the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.FastHartley(System.Double[])"/>, then <format type="italics">Y</format> is obtained through the discrete implementation of the Hartley integral
            </para>
            	<para indent="true">
            		<image src="FastHartley2.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">k</format> = 1, 2,..., <format type="italics">n</format><entity value="ndash"/>1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            	<para>
            The Hartley transform maps real-valued sequences into real-valued frequency domain sequences. It can be used instead of 
            the Fourier transform to convolve signals, deconvolve signals, correlate signals, and to find the power spectrum. 
            The Fourier transform can be also be derived from the Hartley transform.
            </para>
            	<para>
            When the sequences to be processed are real-valued sequences, the Fourier transform produces complex-valued sequences 
            in which half of the information is redundant.  The advantage of using the Hartley transform instead of the 
            Fourier transform is that the Hartley transform uses half the memory to produce the same information the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])"/> produces. 
            Further, the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.FastHartley(System.Double[])"/> is calculated in place and is as efficient as the Fourier transform. 
            The disadvantage of the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.FastHartley(System.Double[])"/> is that the size of the input sequence must be a valid power of 2. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 12:19:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFastHartley(System.Double[])">
            <summary>Computes, in place, the Inverse Fast Hartley transform of the input array.
            </summary>
            <param name="data">
            On input, contains the real array to be transformed. On output, contains the transform. To properly calculate the Inverse Fast Hartley transform of <paramref name="data"/>,
            the number of elements in the input array must be a valid power of 2. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="data"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="data"/> must be a power of two.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The inverse Hartley transform of a function <format type="italics">X</format>(<format type="italics">f</format>) is defined as
            <para indent="true">
            		<image src="InverseFastHartley1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            cas(<format type="italics">x</format>) = cos(<format type="italics">x</format>) + sin(<format type="italics">x</format>)
            </description>
            		</item>
            	</list>
            	<para>
            If <format type="italics">Y</format> represents the output sequence Inv FHT{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFastHartley(System.Double[])"/> method calculates <format type="italics">Y</format> through the discrete implementation of the inverse Hartley integral
            </para>
            	<para indent="true">
            		<image src="InverseFastHartley2.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">k</format> = 1, 2,..., <format type="italics">n</format><entity value="ndash"/>1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> is the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            The inverse Hartley transform maps real-valued frequency sequences into real-valued sequences. You can use it instead of the inverse Fourier transform to convolve, deconvolve, and correlate signals. You also can derive the Fourier transform from the Hartley transform.
            <para>
            Refer to the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.FastHartley(System.Double[])"/> method for a comparison of the Fourier and Hartley transforms.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 12:22:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.FastHilbert(System.Double[])">
            <summary>
            Calculates, in place, the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.FastHilbert(System.Double[])"/> Transform of the input array.
            </summary>
            <param name="data">
            On input, contains the input array to be transformed. On output, contains the Hilbert Transform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Hilbert transform of a function <format type="italics">x</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            		<image src="FastHilbert1.gif"/>
            	</para>
            Using Fourier identities, you can show the Fourier transform of the Hilbert transform of <format type="italics">x</format>(<format type="italics">t</format>) is
            <para indent="true">
            		<format type="italics">h</format>(<format type="italics">t</format>) <image src="doublearrow.gif"/>
            		<format type="italics">H</format>(<format type="italics">f</format>) = <entity value="ndash"/>j sgn(<format type="italics">f</format>) <format type="italics">X</format>(<format type="italics">f</format>),
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">x</format>(<format type="italics">t</format>) <image src="doublearrow.gif"/>
            				<format type="italics">X</format>(<format type="italics">f</format>) is a Fourier transform pair, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="FastHilbert2.gif"/>
            			</description>
            		</item>
            	</list>
            The <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.FastHilbert(System.Double[])"/> method performs the discrete implementation of the Hilbert transform with the aid of the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])"/> routines based upon the <format type="italics">h</format>(<format type="italics">t</format>) <image src="doublearrow.gif"/>
            	<format type="italics"> H</format>(<format type="italics">f</format>) Fourier transform pair by taking the following steps:
            <list type="number">
            		<item>
            			<description>
            Fourier transform <paramref name="data"/><para>
            					<format type="italics">Y = F{X}</format>
            				</para>
            			</description>
            		</item>
            		<item>
            			<description>
            Set the DC component to zero
            <para>
            					<format type="italics">Y<format type="subscript">0</format></format> = 0.0 
            </para>
            			</description>
            		</item>
            		<item>
            			<description>
            If the sequence <format type="italics">Y</format> is an even size, set the Nyquist component to zero
            <para>
            					<format type="italics">Y<format type="subscript">Nyq</format></format> = 0 
            </para>
            			</description>
            		</item>
            		<item>
            			<description>
            Multiply the positive harmonics by <entity value="ndash"/><format type="italics">j</format>. 
            </description>
            		</item>
            		<item>
            			<description>
            Multiply the negative harmonics by <format type="italics">j</format>. Call the new sequence <format type="italics">H</format>, which is of the form
            <para>
            					<format type="italics">H<format type="subscript">k</format> = <entity value="ndash"/>jsgn(k)Y<format type="subscript">k</format></format>
            				</para>
            			</description>
            		</item>
            		<item>
            			<description>
            Inverse Fourier transform <format type="italics">H</format> to obtain the Hilbert transform of <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            Refer to the output format of the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])"/> method for more information. 
            <para>
            You use the Hilbert transform to extract instantaneous phase information, obtain the envelope of an oscillating signal, obtain single-sideband spectra, detect echoes, and reduce sampling rates.
            </para>
            The output sequence <format type="italics">Y</format> = InverseFft[<format type="italics">X</format>] is complex and it is returned in one complex array: 
            <para indent="true">
            		<format type="italics">Y</format> = (Yre,Yim)
            </para>
            	<note type="note">
            Because the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.FastHilbert(System.Double[])"/> method sets the DC and Nyquist components to zero when the number of elements in the input sequence is even, you cannot always recover the original signal with an inverse Hilbert transform. The Hilbert transform works well with bandpass limited signals, which exclude the DC and the Nyquist components. 
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 12:20:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFastHilbert(System.Double[])">
            <summary>Computes, in place, the Inverse Fast Hilbert transform of the input array.
            </summary>
            <param name="data">
            On input, contains the values used to compute the Inverse Fast Hilbert transform. 
            On output, contains the transform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFastHilbert(System.Double[])"/> transform of a function <format type="italics">h</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            		<image src="InverseFastHilbert1.gif"/>
            	</para>
            Using the definition of the Hilbert transform
            <para indent="true">
            		<image src="InverseFastHilbert2.gif"/>
            	</para>
            you can obtain the inverse Hilbert transform by negating the forward Hilbert transform
            <para indent="true">
            		<image src="InverseFastHilbert3.gif"/>
            	</para>
            Therefore, the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFastHilbert(System.Double[])"/> method performs the discrete implementation of the inverse Hilbert transform with the aid of the Hilbert transform by taking the following steps:
            <list type="number">
            		<item>
            			<description>
            Hilbert transform the input sequence, <paramref name="data"/>
            				<para>
            					<format type="italics">Y = H{X}</format>.
            </para>
            			</description>
            		</item>
            		<item>
            			<description>
            Negate <format type="italics">Y</format> to obtain the inverse Hilbert transform
            <para>
            					<image src="InverseFastHilbert4.gif"/>.
            </para>
            			</description>
            		</item>
            	</list>
            The Hilbert transform works best with AC coupled, band-limited signals. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 12:23:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])">
            <summary>
            Calculates the double-sided cross power spectrum of the input arrays and returns the complex double array.
            </summary>
            <param name="inputXData">
            The first time domain signal.
            </param>
            <param name="inputYData">
            The second time domain signal.
            </param>
            <returns>
            The double-sided cross power spectrum between signals <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The cross power, <format type="italics">S<format type="subscript">xy</format></format>(<format type="italics">f</format>) of the signals <format type="italics">x</format>(<format type="italics">t</format>) and <format type="italics">y</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            		<format type="italics">S<format type="subscript">xy</format></format>(<format type="italics">f</format>) = <format type="italics">X</format>*(<format type="italics">f</format>)<format type="italics">Y</format>(<format type="italics">f</format>)
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">X</format>*(<format type="italics">f</format>) is the complex conjugate of <format type="italics">X</format>(<format type="italics">f</format>),
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">X</format>(<format type="italics">f</format>) = <format type="italics">F</format>{<format type="italics">x</format>(<format type="italics">t</format>)}, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">Y</format>(<format type="italics">f</format>) = <format type="italics">F</format>{<format type="italics">y</format>(<format type="italics">t</format>)}.
            </description>
            		</item>
            	</list>
            This method uses the FFT or DFT routine to compute the cross spectrum, which is given by
            <para indent="true">
            		<image src="CrossSpectrum.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where 
            </term>
            			<description>
            				<format type="italics">S<format type="subscript">xy</format></format> represents the cross power spectrum of <paramref name="inputXData"/> and <paramref name="inputYData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples that can accommodate both <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </description>
            		</item>
            	</list>
            The largest cross power that the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method can compute by the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])"/> is 
            <para indent="true">
            2<format type="superscript">23</format> (8,388,608 or 8M).
            </para>
            When the number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> are equal and are a valid power of 2,
            <para indent="true">
            		<format type="italics">n = m</format> = 2<format type="italics"><format type="superscript">k</format></format>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">k</format> = 1, 2,...,23,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples in <paramref name="inputXData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the number of samples in <paramref name="inputYData"/>,
            </description>
            		</item>
            	</list>
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method makes direct calls to the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])"/> routine to compute the complex, cross power sequence. This method is extremely efficient in both execution time and memory management, because the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method performs the operations in place.
            <para>
            When the number of samples in X and Y are not equal,
            </para>
            	<para indent="true">
            n <entity value="ne"/> m
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of samples in <paramref name="inputXData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the number of samples in <paramref name="inputYData"/>, 
            </description>
            		</item>
            	</list>
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method first resizes the smaller sequence by padding it with zeros to match the size of the larger sequence. If this size is a valid power of 2,
            <para indent="true">
            max(<format type="italics">n,m</format>) = 2<format type="italics">k</format>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">k</format> = 1, 2,..., 23,
            </description>
            		</item>
            	</list>
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method computes the cross power spectrum using the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])"/>. Otherwise, the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method uses the slower DFT to compute the cross power spectrum. Thus, the size of the complex return value is
            <para indent="true">
            size = max(<format type="italics">n,m</format>).
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 2:22:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
            <summary>
            Calculates the double-sided cross power spectrum of the input arrays and returns the complex double array.
            </summary>
            <param name="inputXData">
            The first time domain signal.
            </param>
            <param name="inputYData">
            The second time domain signal.
            </param>
            <returns>
            The double-sided cross power spectrum between signals <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The cross power, <format type="italics">S<format type="subscript">xy</format></format>(<format type="italics">f</format>) of the signals <format type="italics">x</format>(<format type="italics">t</format>) and <format type="italics">y</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            		<format type="italics">S<format type="subscript">xy</format></format>(<format type="italics">f</format>) = <format type="italics">X</format>*(<format type="italics">f</format>)<format type="italics">Y</format>(<format type="italics">f</format>)
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">X</format>*(<format type="italics">f</format>) is the complex conjugate of <format type="italics">X</format>(<format type="italics">f</format>),
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">X</format>(<format type="italics">f</format>) = <format type="italics">F</format>{<format type="italics">x</format>(<format type="italics">t</format>)}, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">Y</format>(<format type="italics">f</format>) = <format type="italics">F</format>{<format type="italics">y</format>(<format type="italics">t</format>)}.
            </description>
            		</item>
            	</list>
            This method uses the FFT or DFT routine to compute the cross spectrum, which is given by
            <para indent="true">
            		<image src="CrossSpectrum.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where 
            </term>
            			<description>
            				<format type="italics">S<format type="subscript">xy</format></format> represents the cross power spectrum of <paramref name="inputXData"/> and <paramref name="inputYData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples that can accommodate both <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </description>
            		</item>
            	</list>
            The largest cross power that the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method can compute by the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])"/> is 
            <para indent="true">
            2<format type="superscript">23</format> (8,388,608 or 8M).
            </para>
            When the number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> are equal and are a valid power of 2,
            <para indent="true">
            		<format type="italics">n = m</format> = 2<format type="italics"><format type="superscript">k</format></format>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">k</format> = 1, 2,...,23,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples in <paramref name="inputXData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the number of samples in <paramref name="inputYData"/>,
            </description>
            		</item>
            	</list>
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method makes direct calls to the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])"/> routine to compute the complex, cross power sequence. This method is extremely efficient in both execution time and memory management, because the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method performs the operations in place.
            <para>
            When the number of samples in X and Y are not equal,
            </para>
            	<para indent="true">
            n <entity value="ne"/> m
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of samples in <paramref name="inputXData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the number of samples in <paramref name="inputYData"/>, 
            </description>
            		</item>
            	</list>
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method first resizes the smaller sequence by padding it with zeros to match the size of the larger sequence. If this size is a valid power of 2,
            <para indent="true">
            max(<format type="italics">n,m</format>) = 2<format type="italics">k</format>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">k</format> = 1, 2,..., 23,
            </description>
            		</item>
            	</list>
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method computes the cross power spectrum using the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])"/>. Otherwise, the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method uses the slower DFT to compute the cross power spectrum. Thus, the size of the complex return value is
            <para indent="true">
            size = max(<format type="italics">n,m</format>).
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 2:22:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Calculates the double-sided cross power spectrum of the input arrays.
            </summary>
            <param name="inputXData">
            The first time domain signal.
            </param>
            <param name="inputYData">
            The second time domain signal.
            </param>
            <param name="realData">
            Upon return, contains the real part of the double-sided cross power spectrum between signals <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </param>
            <param name="imaginaryData">
            Upon return, contains the imaginary part of the double-sided cross power spectrum between signals <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The cross power, <format type="italics">S<format type="subscript">xy</format></format>(<format type="italics">f</format>) of the signals <format type="italics">x</format>(<format type="italics">t</format>) and <format type="italics">y</format>(<format type="italics">t</format>) is defined as
            <para indent="true">
            		<format type="italics">S<format type="subscript">xy</format></format>(<format type="italics">f</format>) = <format type="italics">X</format>*(<format type="italics">f</format>)<format type="italics">Y</format>(<format type="italics">f</format>)
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">X</format>*(<format type="italics">f</format>) is the complex conjugate of <format type="italics">X</format>(<format type="italics">f</format>),
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">X</format>(<format type="italics">f</format>) = <format type="italics">F</format>{<format type="italics">x</format>(<format type="italics">t</format>)}, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">Y</format>(<format type="italics">f</format>) = <format type="italics">F</format>{<format type="italics">y</format>(<format type="italics">t</format>)}.
            </description>
            		</item>
            	</list>
            This method uses the FFT or DFT routine to compute the cross spectrum, which is given by
            <para indent="true">
            		<image src="CrossSpectrum.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where 
            </term>
            			<description>
            				<format type="italics">S<format type="subscript">xy</format></format> represents the cross power spectrum of <paramref name="inputXData"/> and <paramref name="inputYData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples that can accommodate both <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </description>
            		</item>
            	</list>
            The largest cross power that the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method can compute by the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])"/> is 
            <para indent="true">
            2<format type="superscript">23</format> (8,388,608 or 8M).
            </para>
            When the number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> are equal and are a valid power of 2,
            <para indent="true">
            		<format type="italics">n = m</format> = 2<format type="italics"><format type="superscript">k</format></format>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">k</format> = 1, 2,...,23,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples in <paramref name="inputXData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the number of samples in <paramref name="inputYData"/>,
            </description>
            		</item>
            	</list>
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method makes direct calls to the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])"/> routine to compute the complex, cross power sequence. This method is extremely efficient in both execution time and memory management, because the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method performs the operations in place.
            <para>
            When the number of samples in X and Y are not equal,
            </para>
            	<para indent="true">
            n <entity value="ne"/> m
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of samples in <paramref name="inputXData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the number of samples in <paramref name="inputYData"/>, 
            </description>
            		</item>
            	</list>
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method first resizes the smaller sequence by padding it with zeros to match the size of the larger sequence. If this size is a valid power of 2,
            <para indent="true">
            max(<format type="italics">n,m</format>) = 2<format type="italics">k</format>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">k</format> = 1, 2,..., 23,
            </description>
            		</item>
            	</list>
            the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method computes the cross power spectrum using the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.Fft(System.Double[],System.Double[])"/>. Otherwise, the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.CrossSpectrum(System.Double[],System.Double[])"/> method uses the slower DFT to compute the cross power spectrum. Thus, the size of the complex return value is
            <para indent="true">
            size = max(<format type="italics">n,m</format>).
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 2:22:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.ImpulseResponse(System.Double[],System.Double[])">
            <summary>
            Calculates the impulse response of a network based on time-domain signals, stimulus, and response. 
            </summary>
            <param name="stimulus">
            A time-domain signal, usually the network stimulus.
            </param>
            <param name="response">
            A time-domain signal, usually the network response.
            </param>
            <returns>
            The impulse response of the network based on time-domain signals, <paramref name="stimulus"/> and <paramref name="response"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="stimulus"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="response"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="stimulus"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    The number of samples in <paramref name="response"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    The number of samples in <paramref name="stimulus"/> must be a valid power of two and equal to the number
            of samples in <paramref name="response"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The impulse response is in the time domain. The impulse response is the inverse Fourier transform of the transfer function
            <para indent="true">
                    <para indent="true">
                        <image src="ImpulseResponse.gif"/>
                    </para>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">Sxy(f)</format> is the two-sided cross power spectrum of the stimulus (<format type="italics">x</format>) 
            with the response (<format type="italics">y</format>), and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">Sxx(f)</format> is the two-sided auto power spectrum of the stimulus.
            </description>
                    </item>
                </list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 4:51:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.NetworkFunctions(System.Double[0:,0:],System.Double[0:,0:],System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double@)">
            <summary>
            Calculates network transfer functions from stimulus and response data.
            </summary>
            <param name="stimulus">
            The network stimulus data. Each row represents one frame of the network stimulus and is associated with the corresponding row in <paramref name="response"/>. 
            </param>
            <param name="response">
            The network response data. Each row represents one frame of the network response and is associated with the corresponding row in <paramref name="stimulus"/>. Specify
            this value in the same units as <paramref name="stimulus"/>. 
            </param>
            <param name="dt">
            The sample period of the time-domain signal. The sample period is equivalent to 1/<format type="italics">f</format>, where <format type="italics">f</format> is the frequency of the <paramref name="stimulus"/> and <paramref name="response"/>. 
            You typically specify this value in units of seconds.
            </param>
            <param name="crossPowerSpectrumMagnitude">
            Upon return, contains the magnitude component of the averaged single-sided cross power spectrum between <paramref name="stimulus"/> and <paramref name="response"/>. 
            This value is in input units rms squared, where input units are the units of <paramref name="stimulus"/>.
            </param>
            <param name="crossPowerSpectrumPhase">
            Upon return, contains the phase component of the the averaged single-sided cross power spectrum between <paramref name="stimulus"/> and <paramref name="response"/>. 
            This value is in units of radians.
            </param>
            <param name="frequencyResponseMagnitude">
            Upon return, contains the magnitude component of the averaged single-sided transfer function between <paramref name="stimulus"/> and <paramref name="response"/>. 
            </param>
            <param name="frequencyResponsePhase">
            Upon return, contains the phase component of the averaged single-sided transfer function between <paramref name="stimulus"/> and <paramref name="response"/>. 
            </param>
            <param name="coherence">
            Upon return, contains the single-sided coherence function spectrum. The coherence function shows the frequency content of <paramref name="response"/> due to <paramref name="stimulus"/> 
            and measures the validity of the network frequency response measurement. This value is unitless and ranges 
            from 0(no coherence) to 1(complete coherence). 
            </param>
            <param name="impulseResponse">
            Upon return, contains the impulse response of the network based on <paramref name="stimulus"/> and <paramref name="response"/>. 
            This value is in units of input units, where input units are the units of <paramref name="stimulus"/>.
            </param>
            <param name="df">
            Upon return, contains the frequency interval. This value is in units of hertz if <paramref name="dt"/> is in units of seconds.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="stimulus"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="response"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="stimulus"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="response"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="stimulus"/> and <paramref name="response"/> must have the same dimensions.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.NetworkFunctions(System.Double[0:,0:],System.Double[0:,0:],System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double@)"/> method computes <paramref name="coherence"/>, averaged <paramref name="crossPowerSpectrumMagnitude"/> and <paramref name="crossPowerSpectrumPhase"/>, averaged transfer function, or <paramref name="frequencyResponseMagnitude"/> and <paramref name="frequencyResponsePhase"/>, and averaged <paramref name="impulseResponse"/>.
            <note type="note">
            For a valid result, the coherence function requires an average of two or more readings of the <paramref name="stimulus"/>and <paramref name="response"/> signals. For only one reading, it registers unity at all frequencies.   
            </note>
            	<para>
            You usually compute these functions on the <paramref name="stimulus"/> and <paramref name="response"/> signals from a network under test. 
            </para>
            The <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.NetworkFunctions(System.Double[0:,0:],System.Double[0:,0:],System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double@)"/> are computed as
            <para indent="true">
            avg Cross Power Spectrum = avg of <format type="italics">S<format type="subscript">xy</format>(f)</format>
            	</para>
            	<para indent="true">
            		<image src="NetworkFunctions1.gif"/>
            	</para>
            	<para indent="true">
            		<image src="NetworkFunctions2.gif"/>
            	</para>
            	<para indent="true">
            avg <paramref name="impulseResponse"/> = Inverse Real FFT(avg Frequency Response),
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="stimulus"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">y</format> represents <paramref name="response"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">S<format type="subscript">xy</format>(f)</format> represents the two-sided cross power spectrum of <format type="italics">x</format> and <format type="italics">y</format>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">S<format type="subscript">xx</format>(f)</format> represents the two-sided auto power spectrum of <format type="italics">x</format>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">S<format type="subscript">yy</format>(f)</format> represents the two-sided auto power spectrum of <format type="italics">y</format>. 
            </description>
            		</item>
            	</list>
            	<paramref name="coherence"/> shows the frequency content of <paramref name="response"/>, <format type="italics">y</format>, due to <paramref name="stimulus"/>, <format type="italics">x</format>, and measures the validity of the network frequency response measurement. 
            <para>
            You can use the <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.NetworkFunctions(System.Double[0:,0:],System.Double[0:,0:],System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double@)"/> method to measure <paramref name="coherence"/> between any two signals. The <see cref="M:NationalInstruments.Analysis.Dsp.Transforms.NetworkFunctions(System.Double[0:,0:],System.Double[0:,0:],System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double@)"/> method averages multiple <paramref name="stimulus"/> and <paramref name="response"/> signals to get valid <paramref name="coherence"/> measurements. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso example="Analysis/Enterprise/NetworkFunction" launch="false">Network Function Example</seealso>
            <lastupdated>1/30/2013 12:22:07 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.Fft2D(NationalInstruments.ComplexDouble[0:,0:],System.Boolean,System.Int32,System.Int32)">
            <summary>
            Computes the two-dimensional Fast Fourier Transform (FFT) of a complex time-domain signal, based on the 
            number of rows and columns specified for the FFT.
            </summary>
            <param name="inputData">
            The complex time-domain signal. 
            </param>
            <param name="shiftDC">
            Specifies whether to shift the DC component to the center of FFT. If <paramref name="shiftDC"/> is 
            <see langword="true"/>, the resulting FFT is DC-centered.
            If <paramref name="shiftDC"/> is <see langword="false"/>, the first element of the resulting FFT is 
            the DC component.
            </param>
            <param name="rowsForFft">
            The number of rows on which to perform the FFT. If <paramref name="rowsForFft"/> is greater than the number of rows in <paramref name="inputData"/>, 
            this method pads <paramref name="inputData"/> with zeros to match <paramref name="rowsForFft"/>. 
            If <paramref name="rowsForFft"/> is less than the number of rows in <paramref name="inputData"/>, this method uses only the leading <paramref name="rowsForFft"/> rows to perform the FFT. 
            If <paramref name="rowsForFft"/> is less than one, this method sets the number of rows in <paramref name="inputData"/> as <paramref name="rowsForFft"/>. 
            </param>
            <param name="columnsForFft">
            The number of columns on which to perform the FFT. If <paramref name="columnsForFft"/> is greater than the number of columns in <paramref name="inputData"/>, 
            this method pads <paramref name="inputData"/> with zeros to match <paramref name="columnsForFft"/>. 
            If <paramref name="columnsForFft"/> is less than the number of columns in <paramref name="inputData"/>, this method uses only the leading <paramref name="columnsForFft"/> columns 
            to perform the FFT. If <paramref name="columnsForFft"/> is less than one, this method sets the number of columns in <paramref name="inputData"/> as <paramref name="columnsForFft"/>. 
            </param>
            <returns>
            The two-dimensional FFT of the complex time-domain signal.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/12/2005 5:46:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.Fft2D(NationalInstruments.ComplexDouble[0:,0:],System.Boolean)">
            <summary>
            Computes the two-dimensional Fast Fourier Transform (FFT) of a complex time-domain signal.
            </summary>
            <param name="inputData">
            The complex time-domain signal. 
            </param>
            <param name="shiftDC">
            Specifies whether to shift the DC component to the center of FFT. If <paramref name="shiftDC"/> is 
            <see langword="true"/>, the resulting FFT is DC-centered.
            If <paramref name="shiftDC"/> is <see langword="false"/>, the first element of the resulting FFT 
            is the DC component.
            </param>
            <returns>
            The two-dimensional FFT of the complex time-domain signal.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/12/2005 5:42:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseFft2D(NationalInstruments.ComplexDouble[0:,0:],System.Boolean)">
            <summary>
            Computes the complex, two-dimensional inverse Fast Fourier Transform (FFT) of the input signal.
            </summary>
            <param name="fft">
            The result of the inverse FFT.
            </param>
            <param name="shiftDC">
            Specifies whether <paramref name="fft"/> is DC-centered. If <paramref name="shiftDC"/> is set to 
            <see langword="true"/>, <paramref name="fft"/>
            is DC-centered. If set to <see langword="false"/>, <paramref name="fft"/> is not DC-centered. The 
            first element of <paramref name="fft"/> is the DC component.
            </param>
            <returns>
            The frequency-domain signal. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="fft"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 10:40:00 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseRealFft2D(NationalInstruments.ComplexDouble[0:,0:],System.Boolean)">
            <summary>
            Computes the real, two-dimensional inverse Fast Fourier Transform (FFT) of the input signal.
            </summary>
            <param name="fft">
            The input frequency-domain signal. 
            </param>
            <param name="shiftDC">
            Specifies whether <paramref name="fft"/> is DC-centered. If <paramref name="shiftDC"/> is set to 
            <see langword="true"/>, <paramref name="fft"/>
            is DC-centered. If set to <see langword="false"/>, <paramref name="fft"/> is not DC-centered. The 
            first element of <paramref name="fft"/> is the DC component.
            </param>
            <returns>
            The frequency-domain signal. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="fft"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/13/2005 10:39:13 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.DiscreteCosineTransform1D(System.Double[])">
            <summary>
            Computes the one-dimensional Discrete Cosine Transform (DCT) of the input sequence.
            </summary>
            <param name="inputData">
            The input sequence. 
            </param>
            <returns>
            The one-dimensional DCT of <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The one-dimensional DCT of the input sequence is defined as follows: 
            <para indent="true">
            		<image src="DCTform_0.png"/>
            	</para>
            and
            <para indent="true">
            		<image src="DCTform_1.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            number of elements is the length of <paramref name="inputData"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="DCTform_2.png"/> represents the <format type="italics">n</format><format type="superscript">th</format> 
            element of <paramref name="inputData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="DCTform_3.png"/> represents the <format type="italics">k</format><format type="superscript">th</format> 
            element of the output array. 
            </description>
            		</item>
            	</list>
            	<para>
            This method applies the fast DCT algorithm instead of calculating the DCT directly. The fast DCT algorithm 
            is implemented using the Fast Fourier Transform (FFT) technique.
            </para>
            </remarks>
            <lastupdated>9/13/2005 10:03:49 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.DiscreteCosineTransform1D(System.Double[],System.Int32)">
            <summary>
            Computes the one-dimensional Discrete Cosine Transform (DCT) of the input sequence with a specified DCT size.
            </summary>
            <param name="inputData">
            The input sequence. 
            </param>
            <param name="dctSize">The length of the DCT to be performed. If <paramref name="dctSize"/> is greater than the number of elements in <paramref name="inputData"/>,
             the method pads <paramref name="inputData"/> with zeros to make its number of elements equal to <paramref name="dctSize"/>.
             If <paramref name="dctSize"/> is less than the number of elements in <paramref name="inputData"/>, then 
            <paramref name="inputData"/> is truncated. Only the leading <paramref name="dctSize"/> elements in <paramref name="inputData"/>
            are used to perform the DCT. If <paramref name="dctSize"/> is less than or equal to zero, the method uses the length of <paramref name="inputData"/>
            as <paramref name="dctSize"/>. 
            </param>
            <returns>
            The one-dimensional DCT of <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The one-dimensional DCT of the input sequence is defined as follows: 
            <para indent="true">
            		<image src="DCTform_0.png"/>
            	</para>
            and
            <para indent="true">
            		<image src="DCTform_1.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            number of elements is the length of <paramref name="inputData"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="DCTform_2.png"/> represents the <format type="italics">n</format><format type="superscript">th</format> 
            element of <paramref name="inputData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="DCTform_3.png"/> represents the <format type="italics">k</format><format type="superscript">th</format> 
            element of the output array. 
            </description>
            		</item>
            	</list>
            	<para>
            This method applies the fast DCT algorithm instead of calculating the DCT directly. The fast DCT algorithm 
            is implemented using the Fast Fourier Transform (FFT) technique.
            </para>
            </remarks>
            <lastupdated>9/13/2005 10:04:24 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseDiscreteCosineTransform1D(System.Double[])">
            <summary>
            Computes the one-dimensional inverse Discrete Cosine Transform (DCT) of the input sequence.
            </summary>
            <param name="inputData">
            The input sequence.
            </param>
            <returns>
            The one-dimensional inverse DCT of <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            If <paramref name="inputData"/> represents the input sequence of DCT{<format type="italics">x</format>}, the one-dimensional inverse 
            DCT of <paramref name="inputData"/> is defined as follows: 
            <para indent="true">
            		<image src="InvDCTform_8.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="InvDCTform_1.png"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">y</format> represents <paramref name="inputData"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents the output array, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">N</format> represents the number of elements.
            </description>
            		</item>
            	</list>
            </remarks>
            <lastupdated>9/13/2005 9:41:15 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.DiscreteSineTransform1D(System.Double[])">
            <summary>
            Computes the one-dimensional Discrete Sine Transform (DST) of the input sequence.
            </summary>
            <param name="inputData">
            The input sequence. 
            </param>
            <returns>
            The one-dimensional DST of <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The one-dimensional DST of the input sequence is defined as follows: 
            <para>
            		<image src="DSTform_5.png"/>
            	</para>
            and
            <para>
            		<image src="DSTform_6.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            number of elements is the length of <paramref name="inputData"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="DSTform_2.png"/> represents the <format type="italics">n</format><format type="superscript">th</format> 
            element of <paramref name="inputData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="DSTform_3.png"/> represents the <format type="italics">k</format><format type="superscript">th</format> 
            element of the output array. 
            </description>
            		</item>
            	</list>
            	<para>
            This method applies the fast DST algorithm instead of calculating the DST directly. The fast DST 
            algorithm is implemented using the Fast Fourier Transform (FFT) technique.
            </para>
            </remarks>
            <lastupdated>9/13/2005 10:05:00 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.DiscreteSineTransform1D(System.Double[],System.Int32)">
            <summary>
            Computes the one-dimensional Discrete Sine Transform (DST) of the input sequence with a specified DST size.
            </summary>
            <param name="inputData">
            The input sequence. 
            </param>
            <param name="dstSize">The length of the DST to be performed. If <paramref name="dstSize"/> is greater than the number of elements in <paramref name="inputData"/>,
             the method pads <paramref name="inputData"/> with zeros to make its number of elements equal to <paramref name="dstSize"/>.
             If <paramref name="dstSize"/> is less than the number of elements in <paramref name="inputData"/>, then 
            <paramref name="inputData"/> is truncated. Only the leading <paramref name="dstSize"/> elements in <paramref name="inputData"/>
            are used to perform the DST. If <paramref name="dstSize"/> is less than or equal to zero, the method uses the length of <paramref name="inputData"/>
            as <paramref name="dstSize"/>. 
            </param>
            <returns>
            The one-dimensional DST of <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The one-dimensional DST of the input sequence is defined as follows: 
            <para>
            		<image src="DSTform_5.png"/>
            	</para>
            and
            <para>
            		<image src="DSTform_6.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            number of elements is the length of <paramref name="inputData"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="DSTform_2.png"/> represents the <format type="italics">n</format><format type="superscript">th</format> 
            element of <paramref name="inputData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="DSTform_3.png"/> represents the <format type="italics">k</format><format type="superscript">th</format> 
            element of the output array. 
            </description>
            		</item>
            	</list>
            	<para>
            This method applies the fast DST algorithm instead of calculating the DST directly. The fast DST 
            algorithm is implemented using the Fast Fourier Transform (FFT) technique.
            </para>
            </remarks>
            <lastupdated>9/13/2005 10:05:27 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseDiscreteSineTransform1D(System.Double[])">
            <summary>
            Computes the one-dimensional inverse Discrete Sine Transform (DST) of the input sequence.
            </summary>
            <param name="inputData">
            The input sequence.
            </param>
            <returns>
            The one-dimensional inverse DST of <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            If <paramref name="inputData"/> represents the input sequence of DST{<format type="italics">x</format>}, 
            the one-dimensional inverse DST of <paramref name="inputData"/> is defined as follows: 
            <para indent="true">
            		<image src="InvDSTform_10.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">y</format> represents <paramref name="inputData"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents the output array, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">N</format> represents the number of elements.
            </description>
            		</item>
            	</list>
            </remarks>
            <lastupdated>9/13/2005 9:59:05 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.DiscreteCosineTransform2D(System.Double[0:,0:])">
            <summary>
            Computes the two-dimensional Discrete Cosine Transform (DCT) of the input signal.
            </summary>
            <param name="inputMatrix">
            The input signal.
            </param>
            <returns>
            The two-dimensional DCT of <paramref name="inputMatrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The two-dimensional DCT of the input signal is defined as follows: 
            <para indent="true">
            		<image src="DCT2Dform_4.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">M</format> represents the number of rows in <paramref name="inputMatrix"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">N</format> represents the number of columns in <paramref name="inputMatrix"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format>(<format type="italics">m</format>, <format type="italics">n</format>) 
            represents the element in <paramref name="inputMatrix"/> with row number <format type="italics">m</format> 
            and column number <format type="italics">n</format>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">y</format>(<format type="italics">u</format>, <format type="italics">v</format>) 
            represents the element in the output matrix with row number <format type="italics">u</format> 
            and column number <format type="italics">v</format>.
            </description>
            		</item>
            	</list>
            	<para>
            This method performs the following two steps to compute the two-dimensional DCT:
            <list type="number">
            			<item>
            				<description>
            Performs a one-dimensional DCT row-by-row on <paramref name="inputMatrix"/>. 
            </description>
            			</item>
            			<item>
            				<description>
            Performs a one-dimensional DCT column-by-column. 
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <lastupdated>9/13/2005 10:06:39 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseDiscreteCosineTransform2D(System.Double[0:,0:])">
            <summary>
            Computes the two-dimensional inverse Discrete Cosine Transform (DCT) of the input signal.
            </summary>
            <param name="inputMatrix">
            The input signal.
            </param>
            <returns>
            The two-dimensional inverse DCT of <paramref name="inputMatrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            If <paramref name="inputMatrix"/> represents the input matrix DCT{<format type="italics">x</format>}, 
            the two-dimensional inverse DCT of <paramref name="inputMatrix"/> is defined as follows: 
            <para indent="true">
            		<image src="InvDCT2Dform_9.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">M</format> represents the number of rows in <paramref name="inputMatrix"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">N</format> represents the number of columns in <paramref name="inputMatrix"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format>(<format type="italics">m</format>, <format type="italics">n</format>) 
            represents the element in the output matrix with row number <format type="italics">m</format> 
            and column number <format type="italics">n</format>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">y</format>(<format type="italics">u</format>, <format type="italics">v</format>) 
            represents the element in <paramref name="inputMatrix"/> with row number <format type="italics">u</format> 
            and column number <format type="italics">v</format>.
            </description>
            		</item>
            	</list>
            	<para>
            This method performs the following two steps to compute the two-dimensional inverse DCT:
            <list type="number">
            			<item>
            				<description>
            Performs a one-dimensional inverse DCT row-by-row on <paramref name="inputMatrix"/>. 
            </description>
            			</item>
            			<item>
            				<description>
            Performs a one-dimensional inverse DCT column-by-column. 
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <lastupdated>9/13/2005 9:56:18 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.DiscreteSineTransform2D(System.Double[0:,0:])">
            <summary>
            Computes the two-dimensional Discrete Sine Transform (DST) of the input signal.
            </summary>
            <param name="inputMatrix">
            The input signal.
            </param>
            <returns>
            The two-dimensional DST of <paramref name="inputMatrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The two-dimensional DST of the input signal is defined as follows: 
            <para indent="true">
            		<image src="DST2Dform_7.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">M</format> represents the number of rows in <paramref name="inputMatrix"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">N</format> represents the number of columns in <paramref name="inputMatrix"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format>(<format type="italics">m</format>, <format type="italics">n</format>) 
            represents the element in <paramref name="inputMatrix"/> with row number <format type="italics">m</format> 
            and column number <format type="italics">n</format>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">y</format>(<format type="italics">u</format>, <format type="italics">v</format>) 
            represents the element in the output matrix with row number <format type="italics">u</format> 
            and column number <format type="italics">v</format>.
            </description>
            		</item>
            	</list>
            	<para>
            This method performs the following two steps to compute the two-dimensional DST:
            <list type="number">
            			<item>
            				<description>
            Performs a one-dimensional DST row-by-row on <paramref name="inputMatrix"/>. 
            </description>
            			</item>
            			<item>
            				<description>
            Performs a one-dimensional DST column-by-column. 
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <lastupdated>9/13/2005 10:07:03 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseDiscreteSineTransform2D(System.Double[0:,0:])">
            <summary>
            Computes the two-dimensional inverse Discrete Sine Transform (DST) of the input signal.
            </summary>
            <param name="inputMatrix">
            The input signal.
            </param>
            <returns>
            The two-dimensional inverse DST of <paramref name="inputMatrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            If <paramref name="inputMatrix"/> represents the input matrix DST{<format type="italics">x</format>}, 
            the two-dimensional inverse DST of <paramref name="inputMatrix"/> is defined as follows: 
            <para indent="true">
            		<image src="InvDST2Dform_9.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">M</format> represents the number of rows in <paramref name="inputMatrix"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">N</format> represents the number of columns in <paramref name="inputMatrix"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format>(<format type="italics">m</format>, <format type="italics">n</format>) 
            represents the element in the output matrix with row number <format type="italics">m</format> 
            and column number <format type="italics">n</format>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">y</format>(<format type="italics">u</format>, <format type="italics">v</format>) 
            represents the element in <paramref name="inputMatrix"/> with row number <format type="italics">u</format> 
            and column number <format type="italics">v</format>.
            </description>
            		</item>
            	</list>
            	<para>
            This method performs the following two steps to compute the two-dimensional inverse DST:
            <list type="number">
            			<item>
            				<description>
            Performs a one-dimensional inverse DST row-by-row on <paramref name="inputMatrix"/>. 
            </description>
            			</item>
            			<item>
            				<description>
            Performs a one-dimensional inverse DST column-by-column. 
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <lastupdated>9/13/2005 10:01:35 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm)">
            <summary>
            Calculates the Z transform along a spiral in the z-plane for a complex input sequence, based on the size of the input sequence.
            </summary>
            <param name="inputData">
            The complex input sequence.
            </param>
            <param name="startingPoint">
            The point at which to begin evaluating the Chirp-Z Transform.
            </param>
            <param name="increment">
            The increment between each point to evaluate for the Chirp-Z Transform. 
            </param>
            <param name="algorithm">
            A value from the <see cref="T:NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm"/> that represents the method to use to compute the Chirp-Z Transform. 
            </param>
            <returns>
            The Chirp-Z Transform of sequence <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="algorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The Chirp-Z Transform calculates the Z transform along a spiral in the z-plane at the following points:
            <para indent="true">
            		<image src="CxChirpZTform_11.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">k</format> = 0, 1,..., <format type="italics">M</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">M</format> represents the number of elements in <paramref name="inputData"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">A</format> represents <paramref name="startingPoint"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">W</format> represents <paramref name="increment"/>.
            </description>
            		</item>
            	</list>
            	<para>
            The Direct method computes the Chirp-Z Transform as follows:
            </para>
            	<para indent="true">
            		<image src="CxChirpZTform_12.png"/>
            	</para>
            for <format type="italics">k</format> = 0, 1,..., <format type="italics">M</format><entity value="ndash"/>1.
            <para>
            For the Frequency domain method, the Direct form can be reformulated with the convolution, as follows:
            </para>
            	<para indent="true">
            		<image src="CxChirpZTform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="CxChirpZTform_14.png"/>
            			</description>
            		</item>
            	</list>
            	<para>
            The convolution operation can be performed in the Frequency Domain method, which uses an FFT-based technique.
            </para>
            </remarks>
            <lastupdated>4/7/2011 2:16:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm,System.Int32)">
            <summary>
            Calculates the Z transform along a spiral in the z-plane for a complex input sequence, based on the size of the transform.
            </summary>
            <param name="inputData">
            The complex input sequence.
            </param>
            <param name="startingPoint">
            The point at which to begin evaluating the Chirp-Z Transform.
            </param>
            <param name="increment">
            The increment between each point to evaluate for the Chirp-Z Transform. 
            </param>
            <param name="algorithm">
            A value from the <see cref="T:NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm"/> that represents the method to use to compute the Chirp-Z Transform. 
            </param>
            <param name="numberOfBins">
            The length of the transform. If <paramref name="numberOfBins"/> is less than 1, this method sets the length of <paramref name="inputData"/> as <paramref name="numberOfBins"/>.
            </param>
            <returns>
            The Chirp-Z Transform of sequence <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="algorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The Chirp-Z Transform calculates the Z transform along a spiral in the z-plane at the following points:
            <para indent="true">
            		<image src="CxChirpZTform_11.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">k</format> = 0, 1,..., <format type="italics">M</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">M</format> represents <paramref name="numberOfBins"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">A</format> represents <paramref name="startingPoint"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">W</format> represents <paramref name="increment"/>.
            </description>
            		</item>
            	</list>
            	<para>
            The Direct method computes the Chirp-Z Transform as follows:
            </para>
            	<para indent="true">
            		<image src="CxChirpZTform_12.png"/>
            	</para>
            for <format type="italics">k</format> = 0, 1,..., <format type="italics">M</format><entity value="ndash"/>1.
            <para>
            For the Frequency domain method, the Direct form can be reformulated with the convolution, as follows:
            </para>
            	<para indent="true">
            		<image src="CxChirpZTform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="CxChirpZTform_14.png"/>
            			</description>
            		</item>
            	</list>
            	<para>
            The convolution operation can be performed in the Frequency Domain method, which uses an FFT-based technique.
            </para>
            </remarks>
            <lastupdated>10/23/2006 3:56:39 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(System.Double[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm)">
            <summary>
            Calculates the Z transform along a spiral in the z-plane, based on the size of the input sequence.
            </summary>
            <param name="inputData">
            The input sequence.
            </param>
            <param name="startingPoint">
            The point at which to begin evaluating the Chirp-Z Transform.
            </param>
            <param name="increment">
            The increment between each point to evaluate for the Chirp-Z Transform. 
            </param>
            <param name="algorithm">
            A value from the <see cref="T:NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm"/> that represents the method to use to compute the Chirp-Z Transform. 
            </param>
            <returns>
            The Chirp-Z Transform of sequence <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="algorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The Chirp-Z Transform calculates the Z transform along a spiral in the z-plane at the following points:
            <para indent="true">
            		<image src="ChirpZTform_11.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">k</format> = 0, 1,..., <format type="italics">M</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">M</format> represents the number of elements in <paramref name="inputData"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">A</format> represents <paramref name="startingPoint"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">W</format> represents <paramref name="increment"/>.
            </description>
            		</item>
            	</list>
            	<para>
            The Direct method computes the Chirp-Z Transform as follows:
            </para>
            	<para indent="true">
            		<image src="ChirpZTform_12.png"/>
            	</para>
            for <format type="italics">k</format> = 0, 1,..., <format type="italics">M</format><entity value="ndash"/>1.
            <para>
            For the frequency domain method, the Direct form can be reformulated with the convolution, as follows:
            </para>
            	<para indent="true">
            		<image src="ChirpZTform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="ChirpZTform_14.png"/>
            			</description>
            		</item>
            	</list>
            	<para>
            The convolution operation can be performed in the Frequency Domain method, which uses an FFT-based technique.
            </para>
            </remarks>
            <lastupdated>4/7/2011 2:17:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(System.Double[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm,System.Int32)">
            <summary>
            Calculates the Z transform along a spiral in the z-plane, based on the size of the transform.
            </summary>
            <param name="inputData">
            The input sequence.
            </param>
            <param name="startingPoint">
            The point at which to begin evaluating the Chirp-Z Transform.
            </param>
            <param name="increment">
            The increment between each point to evaluate for the Chirp-Z Transform. 
            </param>
            <param name="algorithm">
            A value from the <see cref="T:NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm"/> that represents the method to use to compute the Chirp-Z Transform. 
            </param>
            <param name="numberOfBins">
            The length of the transform. If <paramref name="numberOfBins"/> is less than 1, this method sets the length of <paramref name="inputData"/> as <paramref name="numberOfBins"/>. 
            </param>
            <returns>
            The Chirp-Z Transform of sequence <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="algorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The Chirp-Z Transform calculates the Z transform along a spiral in the z-plane at the following points:
            <para indent="true">
            		<image src="ChirpZTform_11.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">k</format> = 0, 1,..., <format type="italics">M</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">M</format> represents <paramref name="numberOfBins"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">A</format> represents <paramref name="startingPoint"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">W</format> represents <paramref name="increment"/>.
            </description>
            		</item>
            	</list>
            	<para>
            The Direct method computes the Chirp-Z Transform as follows:
            </para>
            	<para indent="true">
            		<image src="ChirpZTform_12.png"/>
            	</para>
            for <format type="italics">k</format> = 0, 1,..., <format type="italics">M</format><entity value="ndash"/>1.
            <para>
            For the frequency domain method, the Direct form can be reformulated with the convolution, as follows:
            </para>
            	<para indent="true">
            		<image src="ChirpZTform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="ChirpZTform_14.png"/>
            			</description>
            		</item>
            	</list>
            	<para>
            The convolution operation can be performed in the Frequency Domain method, which uses an FFT-based technique.
            </para>
            </remarks>
            <lastupdated>10/23/2006 3:57:06 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
            <summary>
            Calculates the inverse Z transform along a spiral in the z-plane for a complex input sequence, based on the size of the input sequence.
            </summary>
            <param name="inputData">
            The complex input sequence.
            </param>
            <param name="startingPoint">
            The point at which to begin evaluating the Chirp-Z Transform.
            </param>
            <param name="increment">
            The increment between each point to evaluate for the Chirp-Z Transform. 
            </param>
            <returns>
            The inverse Chirp-Z Transform of sequence <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The Inverse Chirp-Z Transform calculates the inverse Z transform along a spiral in the z-plane at the following points:
            <para indent="true">
            		<image src="InvChirpZform_17.png"/></para>
            with 
            <para indent="true">
            		<image src="InvChirpZform_18.png"/></para>
            where 
            <para indent="true">
            		<image src="InvChirpZform_19.png"/></para>
            and 
            <para indent="true">
            		<image src="InvChirpZform_20.png"/></para>
            with <image src="InvChirpZform_21.png"/> being <paramref name="startingPoint"/>
            and  <image src="InvChirpZform_22.png"/> being <paramref name="increment"/>; and
            <para indent="true">
            		<image src="InvChirpZform_23.png"/></para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm)"/>
            <lastupdated>10/15/2006 4:17:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.Transforms.InverseChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,System.Int32)">
            <summary>
            Calculates the inverse Z transform along a spiral in the z-plane for a complex input sequence, based on the size specified for the transform.
            </summary>
            <param name="inputData">
            The complex input sequence.
            </param>
            <param name="startingPoint">
            The point at which to begin evaluating the Chirp-Z Transform.
            </param>
            <param name="increment">
            The increment between each point to evaluate for the Chirp-Z Transform. 
            </param>
            <param name="numberOfBins">
            The length of the transform. <paramref name="numberOfBins"/> must be less than or equal to the number of elements in <paramref name="inputData"/>.
            If <paramref name="numberOfBins"/> is less than 1, this method sets the length of <paramref name="inputData"/> as <paramref name="numberOfBins"/>.
            </param>
            <returns>
            The inverse Chirp-Z Transform of sequence <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="numberOfBins"/> is greater than the number of elements in <paramref name="inputData"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The Inverse Chirp-Z Transform calculates the inverse Z transform along a spiral in the z-plane at the following points:
            <para indent="true">
            		<image src="InvChirpZform_17.png"/></para>
            with 
            <para indent="true">
            		<image src="InvChirpZform_18.png"/></para>
            where 
            <para indent="true">
            		<image src="InvChirpZform_19.png"/></para>
            and 
            <para indent="true">
            		<image src="InvChirpZform_20.png"/></para>
            with <image src="InvChirpZform_21.png"/> being <paramref name="startingPoint"/>
            and  <image src="InvChirpZform_22.png"/> being <paramref name="increment"/>; and
            <para indent="true">
            		<image src="InvChirpZform_23.png"/></para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.Dsp.Transforms.ChirpZTransform(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble,NationalInstruments.Analysis.Dsp.ChirpZTransformAlgorithm)"/>
            <lastupdated>10/15/2006 4:17:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.UnscaledWindow">
            <summary>Provides a set of methods that apply unscaled windows to an input signal.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Windows are used to reduce the truncation effect normally encountered in data acquisition.
            To use a scaled window use the <see cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/> class.
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <seealso example="Analysis/Professional/ComplexWindowing" launch="false">Comnplex Windowing (Enterprise and Professional editions)</seealso>
            <seealso example="Analysis/Professional/Windowing" launch="false">Windowing (Enterprise and Professional editions)</seealso>
            <lastupdated>1/31/2013 11:38:31 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.#ctor">
            <exclude/>
            <lastupdated>9/13/2005 12:24:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.#cctor">
            <exclude/>
            <lastupdated>9/13/2005 12:24:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Triangular(System.Double[])">
            <summary>
            Applies an asymmetric triangular window to the input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the triangular window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence triangular{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Triangular(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="Triangular1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Triangular2.gif"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            tr(<format type="italics">w</format>) = 1 <entity value="ndash"/> |<format type="italics">w</format>|, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:55:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Triangular(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an asymmetric triangular window (Barlett window) to the complex input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the triangular window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence triangular{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Triangular(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            <image src="Triangular1.gif"/>
            </para>
            <list type="table" bordered="false">
            <listheader><term></term><description></description></listheader>
            <item>
            <term>
            where
            </term>
            <description>
            <format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <image src="Triangular2.gif"/>,
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            tr(<format type="italics">w</format>) = 1 <entity value="ndash"/> |<format type="italics">w</format>|, and
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">n</format> represents the number of elements in <format type="italics">X</format>. 
            </description>
            </item>
            </list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>5/28/2012 6:10:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Hanning(System.Double[])">
            <summary>
            Applies an asymmetric Hanning window to the input signal.</summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Hanning window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Hanning{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Hanning(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = 0.5<format type="italics">x<format type="subscript">i</format></format> [1 <entity value="ndash"/> cos(<format type="italics">w</format>)]
            </para>
            	<para indent="true">
            		<image src="Hamming.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <paramref name="data"/>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:55:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Hanning(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an asymmetric Hanning window to the complex input signal.</summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Hanning window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Hanning{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Hanning(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = 0.5<format type="italics">x<format type="subscript">i</format></format> [1 <entity value="ndash"/> cos(<format type="italics">w</format>)]
            </para>
            	<para indent="true">
            		<image src="Hamming.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <paramref name="data"/>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:22:37 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Hamming(System.Double[])">
            <summary>
            Applies an asymmetric Hamming window to the input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, contains the signal smoothed by the Hamming window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Hamming{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Hamming(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = <format type="italics">x<format type="subscript">i</format></format> [0.54 <entity value="ndash"/> 0.46cos(<format type="italics">w</format>)]
            </para>
            	<para indent="true">
            		<image src="Hamming.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <paramref name="data"/>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:54:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Hamming(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an asymmetric Hamming window to the complex input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, contains the signal smoothed by the Hamming window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Hamming{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Hamming(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = <format type="italics">x<format type="subscript">i</format></format> [0.54 <entity value="ndash"/> 0.46cos(<format type="italics">w</format>)]
            </para>
            	<para indent="true">
            		<image src="Hamming.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <paramref name="data"/>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:22:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Blackman(System.Double[])">
            <summary>
            Applies an asymmetric Blackman window to the input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Blackman window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Blackman{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Blackman(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="Blackman1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Blackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:53:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Blackman(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an asymmetric Blackman window to the complex input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Blackman window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Blackman{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Blackman(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="Blackman1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Blackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:14:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Kaiser(System.Double[],System.Double)">
            <summary>
            Applies an asymmetric Kaiser-Bessel window to the input signal.</summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Kaiser-Bessel window.
            </param>
            <param name="beta">
            The window shape parameter used in the Kaiser-Bessel window function. A larger beta results in a narrower window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Kaiser-Bessel{<format type="italics">X</format>(<format type="italics">t</format>)}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Kaiser(System.Double[],System.Double)"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="Kaiser1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Kaiser2.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Kaiser3.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>(<format type="italics">t</format>), and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">I</format><format type="subscript">o</format> represents the zero-order modified Bessel function. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:55:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Kaiser(NationalInstruments.ComplexDouble[],System.Double)">
            <summary>
            Applies an asymmetric Kaiser-Bessel window to the complex input signal.</summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Kaiser-Bessel window.
            </param>
            <param name="beta">
            The window shape parameter used in the Kaiser-Bessel window function. A larger beta results in a narrower window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Kaiser-Bessel{<format type="italics">X</format>(<format type="italics">t</format>)}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Kaiser(System.Double[],System.Double)"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="Kaiser1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Kaiser2.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Kaiser3.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>(<format type="italics">t</format>), and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">I</format><format type="subscript">o</format> represents the zero-order modified Bessel function. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:22:55 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.BlackmanHarris(System.Double[])">
            <summary>
            Applies an asymmetric Blackman-Harris window to the input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Blackman-Harris window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Blackman-Harris{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.BlackmanHarris(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="BlackmanHarris.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Blackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:53:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.BlackmanHarris(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an asymmetric Blackman-Harris window to the complex input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Blackman-Harris window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Blackman-Harris{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.BlackmanHarris(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="BlackmanHarris.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Blackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:16:03 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.CosineTapered(System.Double[])">
            <summary>
            This method is obsolete. Use an overload of this method to achieve the same functionality.
            </summary>
            <param name="data">
            This parameter is not documented because the member is obsolete.
            </param>
            <lastupdated>9/16/2009 4:24:28 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.CosineTapered(System.Double[],System.Double)">
            <summary>
            Applies an asymmetric cosine tapered window to a real signal.
            </summary>
            <param name="signal">
            On input, contains the input signal.
            On output, contains the output signal with a cosine tapered window applied. 
            </param>
            <param name="ratio">
            The ratio of the total length of the tapered section to the whole signal length. The window is a 
            cosine tapered window only if 0 &lt; ratio &lt; 1. If 
            ratio &lt; 0, the window is equivalent to a rectangular window. If 
            ratio <entity value="ge"/> 1, the window is equivalent to a 
            <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Hanning(System.Double[])"/> window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            A cosine tapered window is defined as follows:
            <para indent="true">
            		<image src="CosTaperedWinExform_4.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <paramref name="signal"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="CosTaperedWinExform_5.png"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:53:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.CosineTapered(NationalInstruments.ComplexDouble[],System.Double)">
            <summary>
            Applies an asymmetric cosine-tapered window to a complex signal.
            </summary>
            <param name="signal">
            On input, contains the input signal.
            On output, contains the output signal with a cosine-tapered window applied. 
            </param>
            <param name="ratio">
            The ratio of the total length of the tapered section to the whole signal length. The window is a 
            cosine-tapered window only if 0 &lt; ratio &lt; 1. If 
            ratio &lt; 0, the window is equivalent to a rectangular window. If 
            ratio <entity value="ge"/> 1, the window is equivalent to a 
            <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Hanning(System.Double[])"/> window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            A cosine-tapered window is defined as follows:
            <para indent="true">
            <image src="CosTaperedWinExform_4.png"/>
            </para>
            <list type="table" bordered="false">
            <listheader>
            <term></term>
            <description></description>
            </listheader>
            <item>
            <term>
            where
            </term>
            <description>
            <format type="italics">n</format> represents the number of elements in <paramref name="signal"/>, and
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <image src="CosTaperedWinExform_5.png"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <security condition="unmanagedcode"/>
            <lastupdated>5/28/2012 5:57:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.ExactBlackman(System.Double[])">
            <summary>
            Applies an asymmetric exact Blackman window to the input signal.</summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the exact Blackman window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence exact Blackman{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.ExactBlackman(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="ExactBlackman1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="ExactBlackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>,
            </description>
            		</item>
            	</list>
            	<para indent="true">
            		<format type="italics">a</format><format type="subscript">0</format> = 7938/18608,
            </para>
            	<para indent="true">
            		<format type="italics">a</format><format type="subscript">1</format> = 9240/18608, and
            </para>
            	<para indent="true">
            		<format type="italics">a</format><format type="subscript">2</format> = 1430/18608.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:54:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.ExactBlackman(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an asymmetric exact Blackman window to the complex input signal.</summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the exact Blackman window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence exact Blackman{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.ExactBlackman(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from 
            <para indent="true">
            		<image src="ExactBlackman1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="ExactBlackman2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>,
            </description>
            		</item>
            	</list>
            	<para indent="true">
            		<format type="italics">a</format><format type="subscript">0</format> = 7938/18608,
            </para>
            	<para indent="true">
            		<format type="italics">a</format><format type="subscript">1</format> = 9240/18608, and
            </para>
            	<para indent="true">
            		<format type="italics">a</format><format type="subscript">2</format> = 1430/18608.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>12/1/2011 10:43:54 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Exponential(System.Double[],System.Double)">
            <summary>
            Applies an asymmetric exponential window to the input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the exponential window.
            </param>
            <param name="finalValue">
            The final value of the exponential window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If y represents the output sequence exponential{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Exponential(System.Double[],System.Double)"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = <format type="italics">x<format type="subscript">i </format></format>exp (<format type="italics">ai</format>)
            </para>
            	<para indent="true">
            		<image src="Exponential.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format> is the final value, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            You can use the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Exponential(System.Double[],System.Double)"/> method to analyze transients. 
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:54:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Exponential(NationalInstruments.ComplexDouble[],System.Double)">
            <summary>
            Applies an asymmetric exponential window to the complex input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the exponential window.
            </param>
            <param name="finalValue">
            The final value of the exponential window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If y represents the output sequence exponential{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Exponential(System.Double[],System.Double)"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = <format type="italics">x<format type="subscript">i </format></format>exp (<format type="italics">ai</format>)
            </para>
            	<para indent="true">
            		<image src="Exponential.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format> is the final value, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            You can use the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Exponential(System.Double[],System.Double)"/> method to analyze transients. 
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:19:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.FlatTop(System.Double[])">
            <summary>
            Applies an asymmetric flat top window to the input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the flat top window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence flat top{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.FlatTop(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="FlatTop1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="FlatTop2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:54:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.FlatTop(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an asymmetric flat top window to the complex input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the flat top window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence flat top{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.FlatTop(System.Double[])"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="FlatTop1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="FlatTop2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:20:16 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Force(System.Double[],System.Double)">
            <summary>
            Applies an asymmetric force window to the input signal.</summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the force window.
            </param>
            <param name="dutyCycle">
            The duty cycle of the force window. <paramref name="dutyCycle"/> must be a percentage. If your 
            duty cycle is expressed as a fraction of a completed record, you must convert your duty cycle 
            to a percentage before using the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Force(System.Double[],System.Double)"/> method.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> must be greater than or equal to two.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence force{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Force(System.Double[],System.Double)"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="Force.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">d</format> = (0.01)(<format type="italics">n</format>)(<paramref name="dutyCycle"/>), and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> is the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            You can use the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Force(System.Double[],System.Double)"/> method to analyze transients. 
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:54:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Force(NationalInstruments.ComplexDouble[],System.Double)">
            <summary>
            Applies an asymmetric force window to the complex input signal.</summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the force window.
            </param>
            <param name="dutyCycle">
            The duty cycle of the force window. <paramref name="dutyCycle"/> must be a percentage. If your 
            duty cycle is expressed as a fraction of a completed record, you must convert your duty cycle 
            to a percentage before using the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Force(System.Double[],System.Double)"/> method.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> must be greater than or equal to two.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence force{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Force(System.Double[],System.Double)"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="Force.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">d</format> = (0.01)(<format type="italics">n</format>)(<paramref name="dutyCycle"/>), and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> is the number of elements in <format type="italics">X</format>.
            </description>
            		</item>
            	</list>
            You can use the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Force(System.Double[],System.Double)"/> method to analyze transients. 
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:20:32 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.GeneralCosine(System.Double[],System.Double[])">
            <summary>
            Applies an asymmetric general cosine window to the input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, contains the signal smoothed by the general cosine window.
            </param>
            <param name="coefficients">
            The coefficients used in the general cosine window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="data"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="coefficients"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="data"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="coefficients"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">a</format> represents <paramref name="coefficients"/> and <format type="italics">y</format> represents the output sequence GenCos{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.GeneralCosine(System.Double[],System.Double[])"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="GeneralCosine1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralCosine2.gif"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the number of <paramref name="coefficients"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:54:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.GeneralCosine(NationalInstruments.ComplexDouble[],System.Double[])">
            <summary>
            Applies an asymmetric general cosine window to the complex input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, contains the signal smoothed by the general cosine window.
            </param>
            <param name="coefficients">
            The coefficients used in the general cosine window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="data"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="coefficients"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="data"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="coefficients"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">a</format> represents <paramref name="coefficients"/> and <format type="italics">y</format> represents the output sequence GenCos{<format type="italics">X</format>}, the <see cref="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.GeneralCosine(System.Double[],System.Double[])"/> method obtains the elements of <format type="italics">y</format> from
            <para indent="true">
            		<image src="GeneralCosine1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralCosine2.gif"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <format type="italics">X</format>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the number of <paramref name="coefficients"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:21:34 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.BlackmanNuttall(System.Double[])">
            <summary>
            Applies an asymmetric Blackman-Nuttall window to a real signal.
            </summary>
            <param name="data">
            On input, contains the input signal.
            On output, contains the output signal with a Blackman-Nuttall window applied. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Blackman-Nuttall window is defined as follows:
            <para indent="true">
            		<image src="BlkmanNuttallWinform_0.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">N</format> is the number of elements in <paramref name="data"/>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:53:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.BlackmanNuttall(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an asymmetric Blackman-Nuttall window to a complex signal.
            </summary>
            <param name="data">
            On input, contains the input signal.
            On output, contains the output signal with a Blackman-Nuttall window applied. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Blackman-Nuttall window is defined as follows:
            <para indent="true">
            		<image src="BlkmanNuttallWinform_0.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">N</format> is the number of elements in <paramref name="data"/>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <security condition="unmanagedcode"/>
            <lastupdated>12/1/2011 10:43:29 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.DolphChebyshev(System.Double[],System.Double)">
            <summary>
            Applies an asymmetric Dolph-Chebyshev window to a real signal.
            </summary>
            <param name="data">
            On input, contains the input signal.
            On output, contains the output signal with a Dolph-Chebyshev window applied. 
            </param>
            <param name="mainlobeToSideLobeRatio">
            The height ratio of the main lobe to the side lobe, in decibels.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Chebyshev{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from the following equation:
            <para indent="true">
            		<image src="ChebWinform_1.png"/>
            	</para>
            where the <format type="italics">m</format><format type="superscript">th</format>-order polynomial is
            <para indent="true">
            		<image src="ChebWinform_2.png"/>
            	</para>
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 5:25:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.DolphChebyshev(NationalInstruments.ComplexDouble[],System.Double)">
            <summary>
            Applies an asymmetric Dolph-Chebyshev window to a complex signal.
            </summary>
            <param name="data">
            On input, contains the input signal.
            On output, contains the output signal with a Dolph-Chebyshev window applied. 
            </param>
            <param name="mainlobeToSideLobeRatio">
            The height ratio of the main lobe to the side lobe, in decibels.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <format type="italics">y</format> represents the output sequence Chebyshev{<format type="italics">X</format>}, 
            this method obtains the elements of <format type="italics">y</format> from the following equation:
            <para indent="true">
            		<image src="ChebWinform_1.png"/>
            	</para>
            where the <format type="italics">m</format><format type="superscript">th</format>-order polynomial is
            <para indent="true">
            		<image src="ChebWinform_2.png"/>
            	</para>
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <security condition="unmanagedcode"/>
            <lastupdated>12/1/2011 10:43:45 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Gauss(System.Double[],System.Double)">
            <summary>
            Applies an asymmetric Gaussian window to a real signal.
            </summary>
            <param name="data">
            On input, contains the input signal.
            On output, contains the output signal with a Gaussian window applied. 
            </param>
            &gt;
            <param name="standardDeviation">
            The standard deviation of the Gaussian window. The default value is 0.2. If 
            <paramref name="standardDeviation"/>
            	<entity value="le"/> 0, the default value is used.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            A Gaussian window is defined as follows:
            </para>
            	<para indent="true">
            		<image src="GaussWinform_6.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <paramref name="data"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:54:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Gauss(NationalInstruments.ComplexDouble[],System.Double)">
            <summary>
            Applies an asymmetric Gaussian window to a complex signal.
            </summary>
            <param name="data">
            On input, contains the input signal.
            On output, contains the output signal with a Gaussian window applied. 
            </param>
            &gt;
            <param name="standardDeviation">
            The standard deviation of the Gaussian window. The default value is 0.2. If 
            <paramref name="standardDeviation"/>
            <entity value="le"/> 0, the default value is used.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            <para>
            A Gaussian window is defined as follows:
            </para>
            <para indent="true">
            <image src="GaussWinform_6.png"/>
            </para>
            <list type="table" bordered="false">
            <listheader>
            <term></term>
            <description></description>
            </listheader>
            <item>
            <term>
            where
            </term>
            <description>
            <format type="italics">n</format> represents the number of elements in <paramref name="data"/>.
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <security condition="unmanagedcode"/>
            <lastupdated>5/28/2012 6:02:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Gauss(System.Double[])">
            <summary>
            Applies an asymmetric Gaussian window to a real signal using a default value for the standard deviation.
            </summary>
            <param name="data">
            On input, contains the input signal.
            On output, contains the output signal with a Gaussian window applied. 
            </param>
            <remarks>
            This method uses a default standard deviation of 0.2.
            <para>
            A Gaussian window is defined as follows:
            </para>
            	<para indent="true">
            		<image src="GaussWinform_6.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <paramref name="data"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/27/2005 3:54:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnscaledWindow.Gauss(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an asymmetric Gaussian window to a complex signal using a default value for the standard deviation.
            </summary>
            <param name="data">
            On input, contains the input signal.
            On output, contains the output signal with a Gaussian window applied. 
            </param>
            <remarks>
            This method uses a default standard deviation of 0.2.
            <para>
            A Gaussian window is defined as follows:
            </para>
            	<para indent="true">
            		<image src="GaussWinform_6.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <paramref name="data"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <security condition="unmanagedcode"/>
            <lastupdated>12/1/2011 10:44:33 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.UnsymmetricWindow">
            <summary>Provides a set of methods that apply unsymmetric windows to an input signal.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Windows are used to reduce the truncation effect normally encountered in data acquisition.
            To use a symmetric window, use the <see cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/> class.
            </remarks>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <seealso example="Analysis/Professional/ComplexWindowing" launch="false">Comnplex Windowing (Enterprise and Professional editions)</seealso>
            <seealso example="Analysis/Professional/Windowing" launch="false">Windowing (Enterprise and Professional editions)</seealso>
            <lastupdated>1/31/2013 11:38:40 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnsymmetricWindow.BartlettHann(System.Double[])">
            <summary>
            Applies an unsymmetric Bartlett-Hann window to the input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Bartlett-Hann window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks> The Bartlett-Hann window is defined as follows:
            <para indent="true">
            		<image src="BartlettHannform_10.png"/>
            	</para>
            where <format type="italics">N</format> is the number of elements in <format type="italics">x</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>10/15/2006 4:18:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnsymmetricWindow.BartlettHann(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an unsymmetric Bartlett-Hann window to the complex input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Bartlett-Hann window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks> The Bartlett-Hann window is defined as follows:
            <para indent="true">
            		<image src="BartlettHannform_10.png"/>
            	</para>
            where <format type="italics">N</format> is the number of elements in <format type="italics">x</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:23:51 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnsymmetricWindow.Bohman(System.Double[])">
            <summary>
            Applies an unsymmetric Bohman window to the input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Bohman window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Bohman window is defined as follows:
            <para indent="true">
            		<image src="Bohmanform_11.png"/>
            	</para>
            where <format type="italics">N</format> is the number of elements in <format type="italics">x</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>10/15/2006 4:18:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnsymmetricWindow.Bohman(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an unsymmetric Bohman window to the complex input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Bohman window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Bohman window is defined as follows:
            <para indent="true">
            		<image src="Bohmanform_11.png"/>
            	</para>
            where <format type="italics">N</format> is the number of elements in <format type="italics">x</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:24:05 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnsymmetricWindow.Parzen(System.Double[])">
            <summary>
            Applies an unsymmetric Parzen window to the input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Parzen window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Parzen window is defined as follows:
            <para indent="true">
            		<image src="Parzenform_12.png"/>
            	</para>
            where <format type="italics">N</format> is the number of elements in <format type="italics">x</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>10/15/2006 4:18:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnsymmetricWindow.Parzen(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an unsymmetric Parzen window to the complex input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Parzen window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Parzen window is defined as follows:
            <para indent="true">
            		<image src="Parzenform_12.png"/>
            	</para>
            where <format type="italics">N</format> is the number of elements in <format type="italics">x</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:24:17 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnsymmetricWindow.Welch(System.Double[])">
            <summary>
            Applies an unsymmetric Welch window to the input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Welch window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Welch window is defined as follows:
            <para indent="true">
            		<image src="Welchform_13.png"/>
            	</para>
            where <format type="italics">N</format> is the number of elements in <format type="italics">x</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>10/15/2006 4:18:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Dsp.UnsymmetricWindow.Welch(NationalInstruments.ComplexDouble[])">
            <summary>
            Applies an unsymmetric Welch window to the complex input signal.
            </summary>
            <param name="data">
            On input, contains the input signal. On output, 
            contains the signal smoothed by the Welch window.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="data"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Welch window is defined as follows:
            <para indent="true">
            		<image src="Welchform_13.png"/>
            	</para>
            where <format type="italics">N</format> is the number of elements in <format type="italics">x</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>
            <seealso cref="T:NationalInstruments.Analysis.Dsp.SymmetricWindow"/>
            <lastupdated>9/19/2011 6:24:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Dsp.OutputSizeMode">
            <summary>
            Specifies the size of the output for a <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Convolve2D(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Dsp.ConvolutionAlgorithm,NationalInstruments.Analysis.Dsp.OutputSizeMode)" crefType="Unqualified"/> method.
            </summary>
            <lastupdated>5/28/2012 6:26:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.OutputSizeMode.FullSize">
            <summary>
            The size of the output matrix is the sum of the number of rows minus one by the sum of the number of columns minus one.
            </summary>
            <lastupdated>11/21/2011 2:16:22 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.OutputSizeMode.SizeX">
            <summary>
            The size of the output matrix is the size of the first input matrix.
            </summary>
            <lastupdated>11/21/2011 2:13:41 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Dsp.OutputSizeMode.Compact">
            <summary>The size of the output matrix is the difference of the number of rows plus one by the difference of the number of columns plus one.
            </summary>
            <lastupdated>11/21/2011 2:16:11 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.VectorNormType">
            <summary>
            Specifies the norm type used to calculate the norm of the input vector. 
            </summary>
            <lastupdated>5/29/2012 2:10:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.VectorNormType.OneNorm">
            <summary>
            Calculates the norm of the given vector with one norm.
            </summary>
            <lastupdated>5/29/2012 2:14:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.VectorNormType.TwoNorm">
            <summary>
            Calculates the norm of the given vector with two norm.
            </summary>
            <lastupdated>5/29/2012 2:14:30 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.VectorNormType.InfiniteNorm">
            <summary>
            Calculates the norm of the given vector with infinite norm.
            </summary>
            <lastupdated>5/29/2012 2:13:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.VectorNormType.NegativeInfiniteNorm">
            <summary>
            Calculates the norm of the given vector with negative infinite norm.
            </summary>
            <lastupdated>5/29/2012 2:13:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.AutocorrelationMatrixMethod">
            <summary>
            Specifies the method used to compute the autocorrelation matrix.
            </summary>
            <lastupdated>5/29/2012 2:09:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.AutocorrelationMatrixMethod.Autocorrelation">
            <summary>
            Compute the autocorrelation matrix.
            </summary>
            <lastupdated>9/19/2011 3:46:04 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.AutocorrelationMatrixMethod.PreWindowed">
            <summary>
            Compute the pre-windowed autocorrelation matrix.
            </summary>
            <lastupdated>9/19/2011 3:47:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.AutocorrelationMatrixMethod.PostWindowed">
            <summary>
            Compute the post-windowed autocorrelation matrix.
            </summary>
            <lastupdated>9/19/2011 3:47:31 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.AutocorrelationMatrixMethod.Covariance">
            <summary>
            Compute the covariance matrix.
            </summary>
            <lastupdated>9/19/2011 3:46:38 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.AutocorrelationMatrixMethod.ModifiedCovariance">
            <summary>
            Compute the modified-covariance matrix.
            </summary>
            <lastupdated>9/19/2011 3:46:56 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Internal.CheckParameters.Frequency(System.Double)">
            <exclude/>
            <lastupdated>10/3/2002 3:49:53 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Internal.CheckParameters.DutyCycle(System.Double)">
            <exclude/>
            <lastupdated>10/3/2002 3:49:53 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Internal.CheckParameters.NumberOfSamples(System.Double)">
            <exclude/>
            <lastupdated>10/3/2002 3:49:53 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Internal.CheckParameters.SamplingRate(System.Double)">
            <exclude/>
            <lastupdated>10/3/2002 3:49:53 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Internal.CheckParameters.Timing(System.Double,System.Int64)">
            <exclude/>
            <lastupdated>10/3/2002 3:49:53 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Internal.ExceptionBuilder.TranslateAnalysisException(NationalInstruments.Analysis.AnalysisException)">
            <summary>
                Translates an Analysis exception to a standard .NET exception (i.e. 
                InvalidArgumentException), if the translation is appropriate.
            </summary>
            <param name="exp">
                AnalysisException to translate
            </param>
            <returns>
                The AnalysisException exp, or a new standard .NET exception with exp set as the
                inner exception.
            </returns>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.AnovaModel">
            <summary>
            Specifies whether a fixed or random effect is to be used in the analysis of variance.
            </summary>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>7/23/2004 1:49:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.AnovaModel.FixedEffect">
            <summary> 
            Uses fixed effect.
            </summary>
            <lastupdated>5/28/2003 11:35:14 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.AnovaModel.RandomEffect">
            <summary>
            Uses random effect.
            </summary>
            <lastupdated>5/28/2003 11:35:17 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.ArrayOperation">
            <summary>Provides a set of methods that perform array operations.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>12/1/2011 12:28:02 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.#ctor">
            <exclude/>
            <lastupdated>9/20/2002 9:43:57 AM</lastupdated>
            <updatedby>David Rohacek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.#cctor">
            <exclude/>
            <lastupdated>9/20/2002 9:44:15 AM</lastupdated>
            <updatedby>David Rohacek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.LinearEvaluation1D(System.Double[],System.Double,System.Double)">
            <summary>Performs a linear evaluation of the specified array.
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="slope">
            The multiplicative constant.
            </param>
            <param name="offset">
            The additive constant.
            </param>
            <returns>
            The linear evaluation of the input array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The output array 
            <para indent="true">
            		<format type="italics">Y<format type="subscript">i</format></format> = <format type="italics">aX<format type="subscript">i</format></format> + <format type="italics">b</format>
            	</para>		
            is given by
            <para indent="true">
            		<format type="italics">Y</format> = <format type="italics">aX</format> + <format type="italics">b</format>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="slope"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="offset"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.LinearEvaluation1D(System.Double[],System.Double,System.Double)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim linearData() As Double
            Dim slope, offset As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            slope = 0.5
            offset = 1
            linearData = ArrayOperation.LinearEvaluation1D(inputData, slope, offset)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double[] linearData;
            double slope, offset;
            Random rnd = new Random();
             
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
                inputData[i] = rnd.NextDouble();
             
            slope = 0.5;
            offset = 1;
            linearData = ArrayOperation.LinearEvaluation1D(inputData, slope, offset);
             
            </code>
            </example>
            <lastupdated>7/30/2007 1:52:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.LinearEvaluation2D(System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            Performs a linear evaluation  of the specified matrix.
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="slope">
            The multiplicative constant.
            </param>
            <param name="offset">
            The additive constant.
            </param>
            <returns>
            The linear evaluation of the input matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The output matrix 
            <para indent="true">
            		<format type="italics">Y<format type="subscript">ij</format></format> = <format type="italics">aX<format type="subscript">ij</format></format> + <format type="italics">b</format>
            	</para>
            is given by
            <para indent="true">
            		<format type="italics">Y</format> = <format type="italics">aX</format> + <format type="italics">b</format>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="slope"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="offset"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.LinearEvaluation2D(System.Double[0:,0:],System.Double,System.Double)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9, 9) As Double
            Dim linearData(,) As Double
            Dim slope, offset As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate a 2D array of random numbers between 0.0 and 1.0
            For j As Integer = 0 To 9
                For i As Integer = 0 To 9
                    inputData(i, j) = rnd.NextDouble
                Next i
            Next j
             
            slope = 0.5
            offset = 1
            linearData = ArrayOperation.LinearEvaluation2D(inputData, slope, offset)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] inputData = new double[10, 10];
            double[,] linearData;
            double slope, offset;
            Random rnd = new Random();
             
            // Use a For loop to generate a 2D array of random numbers between 0.0 and 1.0
            for (int j = 0; j &lt; 10; j++)
                for (int i = 0; i &lt; 10; i++)
                    inputData[i, j] = rnd.NextDouble();
             
            slope = 0.5;
            offset = 1;
            linearData = ArrayOperation.LinearEvaluation2D(inputData, slope, offset);
            </code>
            </example>
            <lastupdated>7/30/2007 2:14:53 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.LinearEvaluation1D(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble,NationalInstruments.ComplexDouble)">
            <summary>Performs a linear evaluation of the complex array.
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="slope">
            The multiplicative constant.
            </param>
            <param name="offset">
            The additive constant.
            </param>
            <returns>
            The linear evaluation of the input array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The output array
            <para indent="true">
            		<format type="italics">Y<format type="subscript">i</format></format> = <format type="italics">aX<format type="subscript">i</format></format> + <format type="italics">b</format>
            	</para>
             is given by
            <para indent="true">
            		<format type="italics">Y</format> = <format type="italics">aX</format> + <format type="italics">b</format>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="slope"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="offset"/>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/24/2007 3:04:53 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.PolynomialEvaluation1D(System.Double[],System.Double[])">
            <summary>
            Performs a <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.PolynomialEvaluation1D(System.Double[],System.Double[])"/> on the input array.
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="coefficients">
            The coefficients of the polynomial to use in the evaluation of the input array. 
            If there are k coefficients, the order of the polynomial is k<entity value="ndash"/>1.
            </param>
            <returns>
            The <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.PolynomialEvaluation1D(System.Double[],System.Double[])"/> of the input array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="coefficients"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The output array Y is given by
            <para indent="true">
            		<image src="PolynomialEvaluation.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">m</format> represents the polynomial order,
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> = 0, 1,..., <format type="italics">m</format>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the coefficient array, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the number of coefficients. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.PolynomialEvaluation1D(System.Double[],System.Double[])"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim polyData() As Double
            Dim coefficientArray() As Double
            Dim signal As New UniformNoiseSignal(25)
            Dim rnd As New Random
             
            ' Generate coefficient array to use in the evaluation of the input data
            coefficientArray = signal.Generate(1000.0, 10)
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            polyData = ArrayOperation.PolynomialEvaluation1D(inputData, coefficientArray)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double[] polyData;
            double[] coefficientArray;
            UniformNoiseSignal signal  = new UniformNoiseSignal(25);
            Random rnd = new Random();
             
            // Generate coefficient array to use in the evaluation of the input data
            coefficientArray = signal.Generate(1000.0, 10);
             
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
                inputData[i] = rnd.NextDouble();
             
            polyData = ArrayOperation.PolynomialEvaluation1D(inputData, coefficientArray);
            </code>
            </example>
            <lastupdated>7/30/2007 1:54:50 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.PolynomialEvaluation2D(System.Double[0:,0:],System.Double[])">
            <summary>
            Performs a <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.PolynomialEvaluation2D(System.Double[0:,0:],System.Double[])"/> on the input matrix.
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="coefficients">
            The coefficients of the polynomial to use in the evaluation of the input matrix. 
            If there are <format type="italics">k</format> coefficients, the order of the polynomial is <format type="italics">k</format><entity value="ndash"/>1.
            </param>
            <returns>
            The <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.PolynomialEvaluation2D(System.Double[0:,0:],System.Double[])"/> of the input matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="coefficients"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The output matrix <format type="italics">Y</format> is given by
            <para indent="true">
            		<image src="PolynomialEvaluation.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">m</format> represents the polynomial order, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a<format type="subscript">n</format></format> represents the <format type="italics">n</format><format type="superscript">th</format> polynomial coefficient. 
            </description>
            		</item>
            	</list> 
            Each element of <format type="italics">Y</format> is given by
            <para indent="true">
            		<image src="PolynomialEvaluationMatrix.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">n</format> = 0, 1,..., <format type="italics">m</format>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the coefficient array, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the number of coefficients. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.PolynomialEvaluation2D(System.Double[0:,0:],System.Double[])"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9, 9) As Double
            Dim polyData(,) As Double
            Dim coefficientArray() As Double
            Dim signal As New UniformNoiseSignal(25)
            Dim rnd As New Random
             
            ' Generate coefficient array to use in the evaluation of the input array.
            coefficientArray = signal.Generate(1000.0, 10)
             
            ' Use a For loop to generate a 2D array of random numbers between 0.0 and 1.0
            For j As Integer = 0 To 9
                For i As Integer = 0 To 9
                    inputData(i, j) = rnd.NextDouble
                Next i
            Next j
             
            polyData = ArrayOperation.PolynomialEvaluation2D(inputData, coefficientArray)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] inputData = new double[10, 10];
            double[,] polyData;
            UniformNoiseSignal signal = new UniformNoiseSignal(25);
            double[] coefficientArray;
            Random rnd = new Random();
             
            // Generate coefficient array to use in the evaluation of the input array. 
            coefficientArray = signal.Generate(1000.0, 10);
             
            // Use a For loop to generate a 2D array of random numbers between 0.0 and 1.0
            for (int j = 0; j &lt; 10; j++)
                for (int i = 0; i &lt; 10; i++)
                    inputData[i, j] = rnd.NextDouble();
             
            polyData = ArrayOperation.PolynomialEvaluation2D(inputData, coefficientArray);
            </code>
            </example>
            <lastupdated>7/30/2007 2:13:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Scale1D(System.Double[],System.Double@,System.Double@)">
            <summary>Scales the input array to be in the range [<entity value="ndash"/>1:1] and returns the scale and offset.
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="offset">
            Upon return, contains the calculated offset.
            </param>
            <param name="scale">
            Upon return, contains the scaling factor.
            </param>
            <returns>
            The scaled array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The output array is given by
            <para indent="true">
            		<image src="Scale.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<paramref name="scale"/> = 0.5(max <entity value="ndash"/> min)
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<paramref name="offset"/> = min + scale
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            max represents the maximum value in <paramref name="inputData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            min represents the minimum value in <paramref name="inputData"/>. 
            </description>
            		</item>
            	</list>
            	<para>
            Each element of <format type="italics"></format>Y is given by
            </para>
            	<para indent="true">
            		<format type="italics">Y<format type="subscript">i</format></format> = (<format type="italics">X<format type="subscript">i</format></format>
            		<entity value="ndash"/> offset) / scale
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1 
            </description>
            		</item>
            	</list>
            	<para>
            When you use this method to normalize any numerical sequence, the range of the output sequence is always [<entity value="ndash"/>1:1]. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.Scale1D(System.Double[],System.Double@,System.Double@)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim scaledData() As Double
            Dim offset, scale As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            scaledData = ArrayOperation.Scale1D(inputData, offset, scale)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double[] scaledData;
            double offset, scale;
            Random rnd = new Random();
             
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
                inputData[i] = rnd.NextDouble();
             
            scaledData = ArrayOperation.Scale1D(inputData, out offset, out scale);
            </code>
            </example>
            <lastupdated>7/30/2007 1:56:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Scale2D(System.Double[0:,0:],System.Double@,System.Double@)">
            <summary>
            Scales the input matrix in the range [<entity value="ndash"/>1:1] and returns the scale and offset.
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="offset">
            Upon return, contains the calculated offset.
            </param>
            <param name="scale">
            Upon return, contains the scaling factor.
            </param>
            <returns>
            The scaled matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The output matrix is given by
            <para indent="true">
            		<image src="Scale.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<paramref name="scale"/> = 0.5(max <entity value="ndash"/> min)
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<paramref name="offset"/> = min + 0.5 scale
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            max represents the maximum value in <paramref name="inputData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            min represents the minimum value in <paramref name="inputData"/>. 
            </description>
            		</item>
            	</list>
            	<para>
            Each element of <format type="italics"></format>Y is given by
            </para>
            	<para indent="true">
            		<format type="italics">Y<format type="subscript">ij</format></format> = (<format type="italics">X<format type="subscript">ij</format></format>
            		<entity value="ndash"/> offset) / scale
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">j</format> = 0, 1,..., <format type="italics">m</format><entity value="ndash"/>1
            </description>
            		</item>
            	</list>
            	<para>
            When you use this method to normalize any numerical sequence, the range of the output sequence is always [<entity value="ndash"/>1:1]. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.Scale2D(System.Double[0:,0:],System.Double@,System.Double@)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9, 9) As Double
            Dim scaledData(,) As Double
            Dim offset, scale As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate a 2D array of random numbers between 0.0 and 1.0
            For j As Integer = 0 To 9
                For i As Integer = 0 To 9
                    inputData(i, j) = rnd.NextDouble
                Next i
            Next j
             
            scaledData = ArrayOperation.Scale2D(inputData, offset, scale)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] inputData = new double[10, 10];
            double[,] scaledData;
            double offset, scale;
            Random rnd = new Random();
             
            // Use a For loop to generate a 2D array of random numbers between 0.0 and 1.0
            for (int j = 0; j &lt; 10; j++)
                for (int i = 0; i &lt; 10; i++)
                    inputData[i, j] = rnd.NextDouble();
             
            scaledData = ArrayOperation.Scale2D(inputData, out offset, out scale);</code>
            </example>
            <lastupdated>7/30/2007 2:39:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.QuickScale1D(System.Double[],System.Double@)">
            <summary>
            Scales an array to the range [<entity value="ndash"/>1:1]. This method does not use the offset for non-zero mean data.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <param name="scale">
            Upon return, contains the maximum absolute value in the input array.
            </param>
            <returns>
            The scaled array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The output array is given by
            <para indent="true">
            		<format type="italics">Y<format type="subscript">i</format></format> = <format type="italics">X<format type="subscript">i</format></format> / Max|X|
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <paramref name="inputData"/>.
            </description>
            		</item>
            	</list>
            	<para>
            You can use this method to normalize sequences within the range [<entity value="ndash"/>1:1]. This method is particularly useful if the sequence is a zero mean sequence. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.QuickScale1D(System.Double[],System.Double@)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim scaledData() As Double
            Dim scale As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            scaledData = ArrayOperation.QuickScale1D(inputData, scale)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double[] scaledData;
            double scale;
            Random rnd = new Random();
             
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
                inputData[i] = rnd.NextDouble();
             
            scaledData = ArrayOperation.QuickScale1D(inputData, out scale);
            </code>
            </example>
            <lastupdated>7/30/2007 1:55:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.QuickScale2D(System.Double[0:,0:],System.Double@)">
            <summary>
            Scales a matrix to the range [<entity value="ndash"/>1:1]. This method does not use the offset for non-zero mean data.
            </summary>
            <param name="inputData">
            The input matrix.
            </param>
            <param name="scale">
            Upon return, contains the maximum absolute value in the input matrix.
            </param>
            <returns>
            The scaled matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The output matrix is given by
            <para indent="true">
            		<format type="italics">Y<format type="subscript">ij</format></format> = <format type="italics">X<format type="subscript">ij</format></format> / Max|X|
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">j</format> = 0, 1,..., <format type="italics">m</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of rows in <paramref name="inputData"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the number of columns.
            </description>
            		</item>
            	</list>
            	<para>
            You can use this method to normalize sequences within the range [<entity value="ndash"/>1:1]. This method is particularly useful if the sequence is a zero mean sequence. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.QuickScale2D(System.Double[0:,0:],System.Double@)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9, 9) As Double
            Dim scaledData(,) As Double
            Dim scale As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate a 2D array of random numbers between 0.0 and 1.0
            For j As Integer = 0 To 9
                For i As Integer = 0 To 9
                    inputData(i, j) = rnd.NextDouble
                Next i
            Next j
             
            scaledData = ArrayOperation.QuickScale2D(inputData, scale)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] inputData = new double[10, 10];
            double[,] scaledData;
            double scale;
            Random rnd = new Random();
             
            // Use a For loop to generate a 2D array of random numbers between 0.0 and 1.0
            for (int j = 0; j &lt; 10; j++)
                for (int i = 0; i &lt; 10; i++)
                    inputData[i, j] = rnd.NextDouble();
             
            scaledData = ArrayOperation.QuickScale2D(inputData, out scale);
            </code>
            </example>
            <lastupdated>7/30/2007 2:38:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin1D(System.Double[],System.Double@,System.Double@)">
            <summary>
            Finds the maximum and minimum values in the array. 
            </summary>
            <param name="inputData">
            The array from which the maximum and minimum values are determined.
            </param>
            <param name="maximum">
            Upon return, contains the maximum value found in the input array.
            </param>
            <param name="minimum">
            Upon return, contains the minimum value found in the input array.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin2D(System.Double[0:,0:],System.Double@,System.Double@)"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMax(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMin(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMax(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMin(System.Double[])"/>
            <lastupdated>7/7/2004 5:11:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin1D(System.Double[],System.Double@,System.Int32@,System.Double@,System.Int32@)">
            <summary>
            Finds the maximum and minimum values in the array as well as their locations in the array. 
            </summary>
            <param name="inputData">
            The array from which the maximum and minimum values—and their locations within the array—are determined.
            </param>
            <param name="maximum">
            Upon return, contains the maximum value found in the input array.
            </param>
            <param name="indexOfMaximum">
            Upon return, contains the index of the maximum value found in <paramref name="inputData"/>.
            </param>
            <param name="minimum">
            Upon return, contains the minimum value found in the input array.
            </param>
            <param name="indexOfMinimum">
            Upon return, contains the index of the minimum value found in <paramref name="inputData"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If there are multiple instances of the maximum and/or minimum values, the index of the first occurrence of the value is returned.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin2D(System.Double[0:,0:],System.Double@,System.Double@)"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMax(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMin(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMax(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMin(System.Double[])"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin1D(System.Double[],System.Double@,System.Double@)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim maximum, minimum As Double
            Dim indexOfMaximum, indexOfMinimum As Integer
             
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            ArrayOperation.MaxMin1D(inputData, maximum, indexOfMaximum, minimum, indexOfMinimum)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double maximum, minimum;
            int indexOfMaximum, indexOfMinimum;
            Random rnd = new Random();
             
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
                inputData[i] = rnd.NextDouble();
             
            ArrayOperation.MaxMin1D(inputData, out maximum, out indexOfMaximum, out minimum, out indexOfMinimum);
            </code>
            </example>
            <lastupdated>7/30/2007 1:53:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin2D(System.Double[0:,0:],System.Double@,System.Double@)">
            <summary>
            Finds the maximum and minimum values in the matrix. 
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="maximum">
            Upon return, contains the maximum value found in the input matrix.
            </param>
            <param name="minimum">
            Upon return, contains the minimum value found in the input matrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin1D(System.Double[],System.Double@,System.Double@)"/>
            <lastupdated>7/7/2004 5:17:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin2D(System.Double[0:,0:],System.Double@,System.Int32@,System.Int32@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            Calculates the maximum and minimum values in the matrix as well as their locations in the matrix. 
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="maximum">
            Upon return, contains the maximum value found in the input matrix.
            </param>
            <param name="rowOfMaximum">
            Upon return, contains the row index of the maximum value found in the input matrix.
            </param>
            <param name="columnOfMaximum">
            Upon return, contains the column index of the maximum value found in the input matrix.
            </param>
            <param name="minimum">
            Upon return, contains the minimum value found in the input matrix.
            </param>
            <param name="rowOfMinimum">
            Upon return, contains the row index of the minimum value found in the input matrix.
            </param>
            <param name="columnOfMinimum">
            Upon return, contains the column index of the minimum value found in the input matrix.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If there are multiple instances of the maximum and/or minimum values, the index of the 
            first occurrence of the value is returned.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin1D(System.Double[],System.Double@,System.Double@)"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin2D(System.Double[0:,0:],System.Double@,System.Double@)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9, 9) As Double
            Dim maximum, minimum As Double
            Dim rowOfMaximum, rowOfMinimum, columnOfMaximum, columnOfMinimum As Integer
            Dim rnd As New Random
             
            ' Use a For loop to generate a 2D array of random numbers between 0.0 and 1.0
            For j As Integer = 0 To 9
                For i As Integer = 0 To 9
                    inputData(i, j) = rnd.NextDouble
                Next i
            Next j
             
            ArrayOperation.MaxMin2D(inputData, maximum, rowOfMaximum, columnOfMaximum, minimum, rowOfMinimum, columnOfMinimum)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] inputData = new double[10, 10];
            double maximum, minimum;
            int rowOfMaximum, rowOfMinimum, columnOfMaximum, columnOfMinimum;
            Random rnd = new Random();
             
            // Use a For loop to generate a 2D array of random numbers between 0.0 and 1.0
            for (int j = 0; j &lt; 10; j++)
                for (int i = 0; i &lt; 10; i++)
                    inputData[i, j] = rnd.NextDouble();
             
             
            ArrayOperation.MaxMin2D(inputData, out maximum, out rowOfMaximum, out columnOfMaximum, out minimum, out rowOfMinimum, out columnOfMinimum);
            </code>
            </example>
            <lastupdated>7/30/2007 2:14:26 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMax(System.Double[])">
            <summary>
            Returns the maximum value in the array. 
            </summary>
            <param name="inputData">
            The array from which the maximum value is determined.
            </param>
            <returns>
            The maximum value in the array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin1D(System.Double[],System.Double@,System.Double@)"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMin(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMax(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMin(System.Double[])"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMax(System.Double[])"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim maximum As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            maximum = ArrayOperation.GetMax(inputData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double maximum;
            Random rnd = new Random();
                       
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
            inputData[i] = rnd.NextDouble();
             
            maximum = ArrayOperation.GetMax(inputData);
            </code>
            </example>
            <lastupdated>7/30/2007 1:52:22 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMin(System.Double[])">
            <summary>
            Returns the minimum value in the array. 
            </summary>
            <param name="inputData">
            The array from which the minimum value is determined.
            </param>
            <returns>
            The minimum value in the array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin1D(System.Double[],System.Double@,System.Double@)"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMax(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMax(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMin(System.Double[])"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMin(System.Double[])"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim minimum As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            minimum = ArrayOperation.GetMin(inputData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double minimum;
            Random rnd = new Random();
                       
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
            inputData[i] = rnd.NextDouble();
             
            minimum = ArrayOperation.GetMin(inputData);
             
            </code>
            </example>
            <lastupdated>7/30/2007 1:52:30 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMax(System.Double[])">
            <summary>
            Returns the index of the maximum value in the array. 
            </summary>
            <param name="inputData">
            The array from which the maximum value location is determined.
            </param>
            <returns>
            The index of the maximum value found in <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If there are multiple instances of the maximum value, the index of the first occurrence of the value is returned.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin1D(System.Double[],System.Double@,System.Double@)"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMax(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMin(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMin(System.Double[])"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMax(System.Double[])"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim indexOfMaximum As Integer
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            indexOfMaximum = ArrayOperation.GetIndexOfMax(inputData)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            int indexOfMaximum;
            Random rnd = new Random();
             
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
            inputData[i] = rnd.NextDouble();
             
            indexOfMaximum = ArrayOperation.GetIndexOfMax(inputData);
             
            </code>
            </example>
            <lastupdated>7/30/2007 1:51:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMin(System.Double[])">
            <summary>
            Returns the index of the minimum value in the array. 
            </summary>
            <param name="inputData">
            The array from which the minimum value location is determined.
            </param>
            <returns>
            The index of the minimum value found in <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If there are multiple instances of the minimum value, the index of the first occurrence of the value is returned.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin1D(System.Double[],System.Double@,System.Double@)"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMax(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetMin(System.Double[])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMax(System.Double[])"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.GetIndexOfMin(System.Double[])"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim indexOfMinimum As Integer
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            indexOfMinimum = ArrayOperation.GetIndexOfMin(inputData)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            int indexOfMinimum;
            Random rnd = new Random();
             
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
            inputData[i] = rnd.NextDouble();
             
            indexOfMinimum = ArrayOperation.GetIndexOfMin(inputData);
             
            </code>
            </example>
            <lastupdated>7/30/2007 1:51:33 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Shift(System.Double[],System.Int32)">
            <summary>
            Shifts the position of elements in an array.
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="numberOfShifts">
            The number of times element positions are shifted in the input array. If this value is less than 0, elements are shifted to the left. 
            If this value is greater than 0, elements are shifted to the right.
            </param>
            <returns>
            The shifted array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		The number of samples in <paramref name="inputData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="numberOfShifts"/> is greater than the number of samples in <paramref name="inputData"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.Shift(System.Double[],System.Int32)"/> uses the formula  
            <para indent="true">
            		<image src="Shift.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of shifts, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the number of elements in <paramref name="inputData"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If the number of shifts is positive, the element positions are shifted to the right. If the number of shifts  is negative, 
            the shift is to the left. This method is not a circular shift. The values outside the array boundary are lost, and elements in the returned array which do not correspond to an existing element in <paramref name="inputData"/> are set to zero.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.Shift(System.Double[],System.Int32)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim shiftedData() As Double
            Dim numberOfShifts As Integer
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            numberOfShifts = 3
            shiftedData = ArrayOperation.Shift(inputData, numberOfShifts)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double[] shiftedData;
            int numberOfShifts;
            Random rnd = new Random();
             
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
                inputData[i] = rnd.NextDouble();
             
            numberOfShifts = 3;
            shiftedData = ArrayOperation.Shift(inputData, numberOfShifts);
            </code>
            </example>
            <lastupdated>7/30/2007 1:56:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Clip(System.Double[],System.Double,System.Double)">
            <summary>
            Constrains the value of the elements of an array between specified limits.
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="upperLimit">
            The upper limit for the clipping operation.  Array elements greater than this value are set equal to this value.
            </param>
            <param name="lowerLimit">
            The lower limit for the clipping operation.  Array elements less than this value are set equal to this value.
            </param>
            <returns>
            The array of clipped values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		The number of samples in <paramref name="inputData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="lowerLimit"/> is greater than <paramref name="upperLimit"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Let the sequence Y represent the return value. Then the elements of Y are related to the elements of <paramref name="inputData"/> by
            <para indent="true">
            		<image src="ClipMethod.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of elements in <paramref name="inputData"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="upperLimit"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="lowerLimit"/>.
            </description>
            		</item>
            	</list>
            	<para>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.Clip(System.Double[],System.Double,System.Double)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim clippedData() As Double
            Dim lowerLimit, upperLimit As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            lowerLimit = 0.2
            upperLimit = 0.7
             
            clippedData = ArrayOperation.Clip(inputData, upperLimit, lowerLimit)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double[] clippedData;
            double lowerLimit, upperLimit;
            Random rnd = new Random();
             
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
                 inputData[i] = rnd.NextDouble();
             
            lowerLimit = 0.2;
            upperLimit = 0.7;
             
            clippedData = ArrayOperation.Clip(inputData, upperLimit, lowerLimit);
            </code>
            </example>
            <lastupdated>7/30/2007 1:49:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Sum1D(System.Double[])">
            <summary>
            Calculates the sum of the elements of the input array.
            </summary>
            <param name="inputData">
            The input array whose elements are summed.
            </param>
            <returns>
            The sum of all the elements in the input array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.Sum1D(System.Double[])"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim arraySum As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            arraySum = ArrayOperation.Sum1D(inputData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double arraySum;
            Random rnd = new Random();
             
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
                inputData[i] = rnd.NextDouble();
             
            arraySum = ArrayOperation.Sum1D(inputData);
            </code>
            </example>
            <lastupdated>7/30/2007 1:56:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Sum2D(System.Double[0:,0:])">
            <summary>
            Calculates the sum of the elements of the input matrix.
            </summary>
            <param name="inputData">
            The input matrix whose elements are summed.
            </param>
            <returns>
            The sum of all the elements in the input matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.Sum2D(System.Double[0:,0:])"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9, 9) As Double
            Dim arraySum As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate a 2D array of random numbers between 0.0 and 1.0
            For j As Integer = 0 To 9
                For i As Integer = 0 To 9
                    inputData(i, j) = rnd.NextDouble
                Next i
            Next j
             
            arraySum = ArrayOperation.Sum2D(inputData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] inputData = new double[10, 10];
            double arraySum;
            Random rnd = new Random();
             
            // Use a For loop to generate a 2D array of random numbers between 0.0 and 1.0
            for (int j = 0; j &lt; 10; j++)
                for (int i = 0; i &lt; 10; i++)
                    inputData[i, j] = rnd.NextDouble();
             
            arraySum = ArrayOperation.Sum2D(inputData);
            </code>
            </example>
            <lastupdated>7/30/2007 2:39:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Concatenate(System.Double[],System.Double[])">
            <summary>
            Appends the data from the two input arrays and returns one 
            larger array.
            </summary>
            <param name="inputDataX">
            The first array.
            </param>
            <param name="inputDataY">
            The second array.
            </param>
            <returns>
            The concatenated array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputDataX"/> is <see langword="null"/>.
            </para>
            	<para>
            	-or-
            </para>
            	<para>
            		<paramref name="inputDataY"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.Concatenate(System.Double[],System.Double[])"/> static method.
            	<code lang="VB.NET">
            Dim inputDataX(9) As Double
            Dim inputDataY(9) As Double
            Dim concatenatedData() As Double
            Dim rnd As New Random
            	
             
            ' Generating two arrays of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputDataX(i) = rnd.NextDouble
                inputDataY(i) = rnd.NextDouble
            Next i
             
            concatenatedData = ArrayOperation.Concatenate(inputDataX, inputDataY)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputDataX = new double[10];
            double[] inputDataY = new double[10];
            double[] concatenatedData;
            Random rnd = new Random();
             
            // Generating two arrays of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
            {
            inputDataX[i] = rnd.NextDouble();
                 	inputDataY[i] = rnd.NextDouble();
            }
             
            concatenatedData = ArrayOperation.Concatenate(inputDataX, inputDataY);
            </code>
            </example>
            <lastupdated>7/30/2007 1:50:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Concatenate(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
            <summary>
            Appends the data from the two <see cref="T:NationalInstruments.ComplexDouble"/> input arrays and returns one 
            larger array.
            </summary>
            <param name="inputDataX">
            The first <see cref="T:NationalInstruments.ComplexDouble"/> array.
            </param>
            <param name="inputDataY">
            The second <see cref="T:NationalInstruments.ComplexDouble"/> array.
            </param>
            <returns>
            The concatenated <see cref="T:NationalInstruments.ComplexDouble"/> array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputDataX"/> is <see langword="null"/>.
            </para>
            	<para>
            	-or-
            </para>
            	<para>
            		<paramref name="inputDataY"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/24/2007 2:53:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Normalize1D(System.Double[],System.Double@,System.Double@)">
            <summary>
            Normalizes the input vector.  
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="mean">
            Upon return, contains the average value of the input vector.
            </param>
            <param name="standardDeviation">
            Upon return, contains the standard deviation of the input vector.
            </param>
            <returns>
            The normalized representation of the input vector.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            The method obtains the return value using
            <para indent="true">
            			<image src="NormalizeVector.gif"/>
            		</para>
            		<list type="table" bordered="false">
            			<listheader><term></term><description></description></listheader>
            			<item>
            				<term>
            where 
            </term>
            				<description>
            					<format type="italics">Y</format> represents the output vector,
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">X</format> represents the input vector of length <format type="italics">n</format>, and 
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            and <format type="italics">x<format type="subscript">i</format></format> represents the <format type="italics">i</format><format type="superscript"> th</format> element of <format type="italics">X</format>.  
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.Normalize1D(System.Double[],System.Double@,System.Double@)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim normalizedData() As Double
            Dim mean, standardDeviation As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            normalizedData = ArrayOperation.Normalize1D(inputData, mean, standardDeviation)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double[] normalizedData;
            double mean, standardDeviation;
            Random rnd = new Random();
             
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
                inputData[i] = rnd.NextDouble();
             
            normalizedData = ArrayOperation.Normalize1D(inputData, out mean, out standardDeviation);
            </code>
            </example>
            <lastupdated>7/30/2007 1:54:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.Normalize2D(System.Double[0:,0:],System.Double@,System.Double@)">
            <summary>
            Normalizes the input matrix.  
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="mean">
            Upon return, contains the average value of the input matrix.
            </param>
            <param name="standardDeviation">
            Upon return, contains the standard deviation of the input matrix.
            </param>
            <returns>
            The normalized representation of the input matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The method obtains the return value using
            <para indent="true">
            		<image src="NormalizeMatrix.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">B</format> represents the output matrix,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">A</format> represents the input matrix with <format type="italics">n</format> rows and <format type="italics">m</format> columns, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a<format type="subscript">ij</format></format> represents the element of <format type="italics">A</format> on the <format type="italics">i</format><format type="superscript"> th</format> row and <format type="italics">j</format><format type="superscript"> th</format> column. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.Normalize2D(System.Double[0:,0:],System.Double@,System.Double@)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9, 9) As Double
            Dim normalizedData(,) As Double
            Dim mean, standardDeviation As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate a 2d array of random numbers between 0.0 and 1.0
            For j As Integer = 0 To 9
                For i As Integer = 0 To 9
                    inputData(i, j) = rnd.NextDouble
                Next i
            Next j
             
            normalizedData = ArrayOperation.Normalize2D(inputData, mean, standardDeviation)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] inputData = new double[10, 10];
            double[,] normalizedData;
            double mean, standardDeviation;
            Random rnd = new Random();
             
            // Use a For loop to generate a 2d array of random numbers between 0.0 and 1.0
            for (int j = 0; j &lt; 10; j++)
                for (int i = 0; i &lt; 10; i++)
                    inputData[i, j] = rnd.NextDouble();
             
            normalizedData = ArrayOperation.Normalize2D(inputData, out mean, out standardDeviation);
             
            </code>
            </example>
            <lastupdated>7/30/2007 1:54:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.CopyRow(System.Double[0:,0:],System.Int32)">
            <summary>Copies the specified row of the matrix into an array.
            </summary>
            <param name="inputData">The input matrix.
            </param>
            <param name="rowIndex">The index of the row to copy.
            </param>
            <returns>
            The array that contains the copied data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="rowIndex"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.CopyRow(System.Double[0:,0:],System.Int32)"/> static method.
            	<code lang="VB.NET">
            Dim inputData(9, 9) As Double
            Dim rowData() As Double
            Dim rowIndex As Integer
            Dim rnd As New Random
             
            ' Use a For loop to generate a 2d array of random numbers between 0.0 and 1.0
            For j As Integer = 0 To 9
                For i As Integer = 0 To 9
                    inputData(i, j) = rnd.NextDouble
                Next i
            Next j
             
            rowIndex = 5
            rowData = ArrayOperation.CopyRow(inputData, rowIndex)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] inputData = new double[10, 10];
            double[] rowData;
            int rowIndex;
            Random rnd = new Random();
            // Use a For loop to generate a 2d array of random numbers between 0.0 and 1.0
            for (int j = 0; j &lt;10; j++)
            for (int i = 0; i &lt; 10; i++)
            inputData[i, j] = rnd.NextDouble();
            rowIndex = 5;
            rowData = ArrayOperation.CopyRow(inputData, rowIndex);
            </code>
            </example>
            <lastupdated>7/30/2007 1:51:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.CopyRow(NationalInstruments.ComplexDouble[0:,0:],System.Int32)">
            <summary>Copies the specified row of the <see cref="T:NationalInstruments.ComplexDouble"/> matrix into an array.
            </summary>
            <param name="inputData">The <see cref="T:NationalInstruments.ComplexDouble"/> input matrix.
            </param>
            <param name="rowIndex">The index of the row to copy.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.ComplexDouble"/> array that contains the copied data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="rowIndex"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/7/2004 5:08:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.CopyColumn(System.Double[0:,0:],System.Int32)">
             <summary>Copies the specified column of a matrix into an array.
             </summary>
             <param name="inputData">The input matrix.
             </param>
             <param name="columnIndex">The index of the column to copy.
             </param>
             <returns>
             The array that contains the copied data.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             	<paramref name="inputData"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.ArgumentException">
             	<paramref name="columnIndex"/> is invalid.
             </exception>
             <exception cref="T:System.DllNotFoundException">
             The analysis library cannot be found.
             </exception>
             <exception cref="T:System.EntryPointNotFoundException">
             A required operation in the analysis library cannot be found.
             </exception>
             <security condition="unmanagedcode"/>
             <example>
             The following example uses the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.CopyColumn(System.Double[0:,0:],System.Int32)"/> static method.
             	<code lang="VB.NET">
             Dim inputData(9, 9) As Double
             Dim columnData() As Double
             Dim columnIndex As Integer
             Dim rnd As New Random
              
             ' Use a For loop to generate a 2d array of random numbers between 0.0 and 1.0
             For j As Integer = 0 To 9
                 For i As Integer = 0 To 9
                     inputData(i, j) = rnd.NextDouble
                 Next i
             Next j
              
             columnIndex = 5
             columnData = ArrayOperation.CopyColumn(inputData, columnIndex)
             </code>
             </example>
             <example>
             	<code lang="C#">
             double[,] inputData = new double[10, 10];
             double[] columnData;
             int columnIndex;
             Random rnd = new Random();
             // Use a For loop to generate a 2d array of random numbers between 0.0 and 1.0
             for (int j = 0; j &lt;10; j++)
             for (int i = 0; i &lt; 10; i++)
             inputData[i, j] = rnd.NextDouble();
            
             columnIndex = 5;
             columnData = ArrayOperation.CopyColumn(inputData, columnIndex);
              
             </code>
             </example>
             <lastupdated>7/30/2007 1:50:22 PM</lastupdated>
             <updatedby>Whitney Bates</updatedby>
             <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.CopyColumn(NationalInstruments.ComplexDouble[0:,0:],System.Int32)">
            <summary>Copies the specified column of a <see cref="T:NationalInstruments.ComplexDouble"/> matrix into an array.
            </summary>
            <param name="inputData">The input <see cref="T:NationalInstruments.ComplexDouble"/> matrix.
            </param>
            <param name="columnIndex">The index of the column to copy.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.ComplexDouble"/>  array that contains the copied data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="columnIndex"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/24/2007 2:55:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin(System.Double[],System.Double@,System.Int32@,System.Double@,System.Int32@)">
            <summary>
            This method is obsolete. Use the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin1D(System.Double[],System.Double@,System.Double@)"/>
            method to achieve the same functionality.
            </summary>
            <param name="inputData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="maximum">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="indexOfMaximum">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="minimum">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="indexOfMinimum">
            This parameter is not documented because the member is obsolete.
            </param>
            <lastupdated>9/17/2009 10:49:35 AM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin(System.Double[0:,0:],System.Double@,System.Int32@,System.Int32@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            This method is obsolete. Use the <see cref="M:NationalInstruments.Analysis.Math.ArrayOperation.MaxMin2D(System.Double[0:,0:],System.Double@,System.Double@)"/>
            method to achieve the same functionality.
            </summary>
            <param name="inputData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="maximum">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="rowOfMaximum">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="columnOfMaximum">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="minimum">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="rowOfMinimum">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="columnOfMinimum">
            This parameter is not documented because the member is obsolete.
            </param>
            <lastupdated>9/17/2009 10:49:04 AM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.BalanceMethod">
            <summary>
            Specifies how to balance a matrix.
            </summary>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/12/2005 1:19:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.BalanceMethod.NeitherPermutedNorScaled">
            <summary>
            Matrix is neither permuted nor scaled.
            </summary>
            <lastupdated>9/12/2005 1:19:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.BalanceMethod.Permuted">
            <summary>
            Matrix is permuted but not scaled.
            </summary>
            <lastupdated>9/12/2005 1:19:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.BalanceMethod.Scaled">
            <summary>
            Matrix is scaled but not permuted.
            </summary>
            <lastupdated>9/12/2005 1:20:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.BalanceMethod.PermutedAndScaled">
            <summary>
            Matrix is both permuted and scaled.
            </summary>
            <lastupdated>9/12/2005 1:20:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.BestFitAlgorithm">
            <summary>
            Specifies the algorithm to be used in solving the multiple linear 
            regression model.
            </summary>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>5/28/2003 11:35:31 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.BestFitAlgorithm.Svd">
            <summary>
            Uses the Singular Value Decomposition (SVD) algorithm to solve the multiple linear 
            regression model.
            </summary>
            <lastupdated>5/28/2003 11:36:03 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.BestFitAlgorithm.Givens">
            <summary>
            Uses the Givens algorithm to solve the multiple linear 
            regression model.
            </summary>
            <lastupdated>5/28/2003 11:35:39 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.BestFitAlgorithm.Givens2">
            <summary>
            Uses the Givens2 algorithm to solve the multiple linear 
            regression model.
            </summary>
            <lastupdated>5/28/2003 11:35:44 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.BestFitAlgorithm.Householder">
            <summary>
            Uses the Householder algorithm to solve the multiple linear 
            regression model.
            </summary>
            <lastupdated>5/28/2003 11:35:47 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.BestFitAlgorithm.LUDecomposition">
            <summary>
            Uses LU Decomposition to solve the multiple linear 
            regression model.
            </summary>
            <lastupdated>5/28/2003 11:35:51 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.BestFitAlgorithm.Cholesky">
            <summary>
            Uses the Cholesky algorithm to solve the multiple linear 
            regression model.
            </summary>
            <lastupdated>5/28/2003 11:35:35 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.Calculus">
            <summary>
            Provides a set of methods for integration. For differentiation, refer to <see cref="M:NationalInstruments.Analysis.Dsp.SignalProcessing.Differentiate(System.Double[],System.Double,System.Double,System.Double)"/>
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>11/3/2011 2:47:39 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Calculus.#ctor">
            <exclude/>
            <lastupdated>10/3/2002 3:42:04 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Calculus.#cctor">
            <exclude/>
            <lastupdated>10/3/2002 3:42:09 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Calculus.NumericIntegration(System.Double[],System.Double,NationalInstruments.Analysis.Math.IntegrationMethod)">
            <summary>
            Performs numeric integration on the input data.
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="dt">
            The interval size, which represents the sampling step size used in obtaining data in <paramref name="inputData"/>.
            </param>
            <param name="integrationMethod">
            One of the integration methods specified using <see cref="T:NationalInstruments.Analysis.Math.IntegrationMethod"/>.  
            </param>
            <returns>
            The result of the integration.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            Size of <paramref name="inputData"/> is invalid for the selected <paramref name="integrationMethod"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            Invalid <paramref name="integrationMethod"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Uses one of the four popular numeric integration methods specified using <see cref="T:NationalInstruments.Analysis.Math.IntegrationMethod"/>. You obtain the data to integrate by sampling some function <format type="italics">f(t)</format> at multiples of <format type="italics">dt</format>.  In other words, the samples are <format type="italics">f</format>(0), <format type="italics">f</format>(dt), <format type="italics">f</format>(2<format type="italics">dt</format>), <format type="italics">f</format>(3<format type="italics">dt</format>), and so on. <format type="italics">dt</format> is the sampling step size.
            <para>
            		<list type="table">
            			<listheader><term>Number of Points</term><description>Partial Evaluations Performed</description></listheader>
            			<item>
            				<term>
            224 
            </term>
            				<description>
            55 Bode, 1 Simpsons’ 3/8
            </description>
            			</item>
            			<item>
            				<term>
            225 
            </term>
            				<description>
            56 Bode 
            </description>
            			</item>
            			<item>
            				<term>
            226 
            </term>
            				<description>
            56 Bode, Trapezoidal 
            </description>
            			</item>
            			<item>
            				<term>
            227 
            </term>
            				<description>
            56 Bode, 1 Simpsons' 
            </description>
            			</item>
            			<item>
            				<term>
            228 
            </term>
            				<description>
            57 Bode, 1 Simpsons’ 3/8 
            </description>
            			</item>
            		</list>
            		<para>
            If 224 points were provided and the Bode Method was chosen, the method would arrive at the result by performing 55 Bode Method partial evaluations and one Simpsons' 3/8 Method evaluation.
            </para>
            Each method depends on the sampling interval <paramref name="dt"/> and computes the integral using successive applications of a basic formula in order to perform partial evaluations, which depend on some number of adjacent points. The number of points used in each partial evaluation represents the order of the method. The result is the summation of these successive partial evaluations.
            <para indent="true">
            			<image src="NumericIntegration1.gif"/>
            		</para>
            where <format type="italics">j</format> is a range dependent on the number of points and the method of integration.
            <para>
            The following are the basic formulas for the computation of the partial sum of each rule in ascending method order:
            </para>
            		<list type="bullet">
            			<item>
            				<description>
            Trapezoidal: <image src="NumericIntegration2.gif"/>
            				</description>
            			</item>
            			<item>
            				<description>
            Simpsons': <image src="NumericIntegration3.gif"/>
            				</description>
            			</item>
            			<item>
            				<description>
            Simpsons' 3/8: <image src="NumericIntegration4.gif"/>
            				</description>
            			</item>
            			<item>
            				<description>
            Bode: <image src="NumericIntegration5.gif"/>
            					<para>
            for <format type="italics">i</format> = 0, 1, 2, 3, 4,..., Integral Part of 
            <para indent="true">
            							<image src="NumericIntegration6.gif"/>
            						</para>
            					</para>
            				</description>
            			</item>
            		</list>
            		<list type="table" bordered="false">
            			<listheader><term></term><description></description></listheader>
            			<item>
            				<term>
            where 
            </term>
            				<description>
            					<format type="italics">N</format> is the number of data points, 
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">k</format> is an integer dependent on the method, and 
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">x</format> is <paramref name="inputData"/>.
            </description>
            			</item>
            		</list>
            		<note type="note">
            If the number of points provided for a certain chosen method does not contain an integral number of partial sums, then the method is applied for all possible points. For the remaining points, the next possible lower order method is used. For example, if the Bode method is selected, the previous example shows what this method evaluates for different numbers of points. 
            </note>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>The following example performs Numeric Integration on the input data using the Simpsons rule.
            	<code lang="VB.NET">
            Dim inputData(9) As Double
            Dim result, dt As Double
            Dim rnd As New Random
             
            ' Use a For loop to generate an array of random numbers between 0.0 and 1.0
            For i As Integer = 0 To 9
                inputData(i) = rnd.NextDouble
            Next i
             
            dt = 0.0001
            result = Calculus.NumericIntegration(inputData, dt, IntegrationMethod.SimpsonsRule)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double result, dt;
            Random rnd = new Random();
             
            // Use a For loop to generate an array of random numbers between 0.0 and 1.0
            for (int i = 0; i &lt; 10; i++)
                inputData[i] = rnd.NextDouble();
             
            dt = 0.0001;
            result = Calculus.NumericIntegration(inputData, dt, IntegrationMethod.SimpsonsRule);
            </code>
            </example>
            <lastupdated>9/11/2007 5:51:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.ComplexMath">
            <summary>
            Provides a set of methods for common mathematical functions on complex numbers.
            </summary>
            <threadsafety safety="safe"/>
            <example>
            The following example uses static methods in the <see cref="T:NationalInstruments.Analysis.Math.ComplexMath"/> class.
            	<code lang="VB.NET">
            Dim complexData As New ComplexDouble(4.0, 3.0)
            Dim exp, log, log10, power, squareRoot As ComplexDouble
            Dim realPower As Double = 5.0
             
            exp = ComplexMath.Exp(complexData)
            log = ComplexMath.Log(complexData)
            log10 = ComplexMath.Log10(complexData)
            power = ComplexMath.Pow(complexData, realPower)
            squareRoot = ComplexMath.SquareRoot(complexData)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexDouble complexData = new ComplexDouble(4.0, 3.0);
            ComplexDouble exp, log, log10, power, squareRoot = new ComplexDouble();
            double realPower = 5.0;
             
            exp = ComplexMath.Exp(complexData);
            log = ComplexMath.Log(complexData);
            log10 = ComplexMath.Log10(complexData);
            power = ComplexMath.Pow(complexData, realPower);
            squareRoot = ComplexMath.SquareRoot(complexData);
             
            </code>
            </example>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>11/3/2011 2:47:49 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ComplexMath.#ctor">
            <exclude/>
            <lastupdated>10/3/2002 3:42:12 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ComplexMath.#cctor">
            <exclude/>
            <lastupdated>10/3/2002 3:42:15 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ComplexMath.SquareRoot(NationalInstruments.ComplexDouble)">
            <summary>Calculates the square root of a <see cref="T:NationalInstruments.ComplexDouble"/> 
            number.
            </summary>
            <param name="c">
            A <see cref="T:NationalInstruments.ComplexDouble"/>.
            </param>
            <returns>
            The square root of <paramref name="c"/>.
            </returns>
            <remarks>
            If <format type="italics">x</format> is negative, the square root is NaN, unless <format type="italics">x</format> is complex. 
            </remarks>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>5/28/2003 9:21:13 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ComplexMath.Log10(NationalInstruments.ComplexDouble)">
            <summary>
            Calculates the base 10 logarithm of a <see cref="T:NationalInstruments.ComplexDouble"/> number.
            </summary>
            <param name="c">
            A <see cref="T:NationalInstruments.ComplexDouble"/>.
            </param>
            <returns>
            The base 10 logarithm of <paramref name="c"/>.
            </returns>
            <remarks>
            If <format type="italics">x</format> is 0, log<format type="subscript">10</format>(<format type="italics">x</format>) is negative infinity.
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            A divide by zero error occurred when carrying out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:20:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ComplexMath.Log(NationalInstruments.ComplexDouble)">
            <summary>
            Calculates the natural logarithm of a <see cref="T:NationalInstruments.ComplexDouble"/> number.
            </summary>
            <param name="c">
            A <see cref="T:NationalInstruments.ComplexDouble"/>.
            </param>
            <returns>
            The natural logarithm of <paramref name="c"/>.
            </returns>
            <exception cref="T:System.DivideByZeroException">
            A divide by zero error occurred when carrying out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>5/28/2003 9:20:44 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ComplexMath.Pow(NationalInstruments.ComplexDouble,System.Double)">
            <summary>
            Calculates the value of a <see cref="T:NationalInstruments.ComplexDouble"/> number raised to a specified power.
            </summary>
            <param name="x">
            A <see cref="T:NationalInstruments.ComplexDouble"/> to be raised to a power.
            </param>
            <param name="y">
            A number that specifies the power.
            </param>
            <returns>
            The number <paramref name="x"/> raised to the power <paramref name="y"/>.
            </returns>
            <remarks>
            If <paramref name="y"/> is 0, <paramref name="x"/><format type="superscript"><paramref name="y"/></format> is 1 for all values of <paramref name="x"/>. 
            </remarks>
            <exception cref="T:System.DivideByZeroException">
            A divide by zero error occurred when carrying out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/10/2003 5:20:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.ComplexMath.Exp(NationalInstruments.ComplexDouble)">
            <summary>
            Calculates the exponential of a <see cref="T:NationalInstruments.ComplexDouble"/> number.
            </summary>
            <param name="c">
            A <see cref="T:NationalInstruments.ComplexDouble"/>.
            </param>
            <returns>
            The exponential of <paramref name="c"/>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>5/28/2003 9:20:33 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.LogarithmType">
            <summary>
            The base of the logarithm used by the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[])"/> 
            and <see cref="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[])"/> curve-fitting methods.
            </summary>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/12/2005 1:24:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.LogarithmType.Natural">
            <summary>
            The specified <see cref="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[])"/> and 
            <see cref="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[])"/> curve-fitting method 
            uses the natural logarithm.
            </summary>
            <lastupdated>9/12/2005 1:27:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.LogarithmType.Base2">
            <summary>
            The specified <see cref="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[])"/> and 
            <see cref="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[])"/> curve-fitting method uses 
            the base 2 logarithm.
            </summary>
            <lastupdated>9/12/2005 1:25:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.LogarithmType.Base10">
            <summary>
            The specified <see cref="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[])"/> and 
            <see cref="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[])"/> curve-fitting method 
            uses the base 10 logarithm.
            </summary>
            <lastupdated>9/12/2005 1:25:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.EigenVectorSide">
            <summary>
            Specifies the type of generalized eigenvectors of the matrix pair (A,B).
            </summary>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/12/2005 1:20:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.EigenVectorSide.Right">
            <summary>
            The right generalized eigenvectors of matrix pair (A,B).
            </summary>
            <lastupdated>9/12/2005 1:21:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.EigenVectorSide.Left">
            <summary>
            The left generalized eigenvectors of matrix pair (A,B).
            </summary>
            <lastupdated>9/12/2005 1:21:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm">
            <summary>
            Specifies the fit algorithm used by the specified 
            <see cref="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,System.Double@)"/> or 
            <see cref="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)"/> curve-fitting method.
            </summary>
            <lastupdated>9/29/2005 10:31:02 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm.Svd">
            <summary>
            The specified <see cref="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,System.Double@)"/> or 
            <see cref="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)"/> curve-fitting method 
            uses the Singular Value Decomposition (SVD) algorithm.
            </summary>
            <lastupdated>9/12/2005 1:32:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm.QR">
            <summary>
            The specified <see cref="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,System.Double@)"/> or 
            <see cref="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)"/> curve-fitting method 
            uses the QR algorithm. 
            </summary>
            <lastupdated>9/12/2005 1:31:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm.LU">
            <summary>
            The specified <see cref="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,System.Double@)"/> or 
            <see cref="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)"/> curve-fitting method 
            uses the LU algorithm.
            </summary>
            <lastupdated>9/12/2005 1:31:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm.Cholesky">
            <summary>
            The specified <see cref="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,System.Double@)"/> or 
            <see cref="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)"/> curve-fitting method 
            uses the Cholesky algorithm.
            </summary>
            <lastupdated>9/12/2005 1:30:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.ReorderMechanism">
            <summary>
            Specifies how to reorder the computed eigenvalues and corresponding Schur vectors. 
            </summary>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 12:27:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.ReorderMechanism.None">
            <summary>
            No reordering is done.
            </summary>
            <lastupdated>9/27/2005 12:29:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.ReorderMechanism.RealAscending">
            <summary>
            The eigenvalues and corresponding Schur vectors are reordered in real ascending order.
            </summary>
            <lastupdated>9/29/2005 11:01:11 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.ReorderMechanism.RealDescending">
            <summary>
            The eigenvalues and corresponding Schur vectors are reordered in real descending order.
            </summary>
            <lastupdated>9/29/2005 11:01:18 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.ReorderMechanism.MagnitudeAscending">
            <summary>
            The eigenvalues and corresponding Schur vectors are reordered in magnitude ascending order.
            </summary>
            <lastupdated>9/29/2005 11:00:50 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.ReorderMechanism.MagnitudeDescending">
            <summary>
            The eigenvalues and corresponding Schur vectors are reordered in magnitude descending order.
            </summary>
            <lastupdated>9/29/2005 11:01:00 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.SizeOption">
            <summary>
            Specifies the size option for the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[]@,System.Double[0:,0:]@)"/>  
            and <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.QRAlgorithm,System.Double[0:,0:]@,System.Double[0:,0:]@)"/> methods.
            </summary>
            <remarks>
            	<para>
            If you set the size option to <see cref="F:NationalInstruments.Analysis.Math.SizeOption.Economy"/> for 
            <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[]@,System.Double[0:,0:]@)"/> or 
            <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.QRAlgorithm,System.Double[0:,0:]@,System.Double[0:,0:]@)"/>, the sizes of the 
            U, Q, V, and R matrices are decided as follows:</para>
            	<list type="bullet">
            		<item>
            			<description>
            Size of U and Q matrices is <format type="bold"> numberOfRows * min(numberOfRows, numberOfColumns)</format>, where numberOfRows and numberOfColumns is the number of rows and columns in the input matrix.
            </description>
            		</item>
            		<item>
            			<description>
            Size of V and R matrices is <format type="bold"> numberOfColumns * min(numberOfRows, numberOfColumns)</format>, where numberOfRows and numberOfColumns is the number of rows and columns in the input matrix.
            </description>
            		</item>
            	</list>
            	<para>
            If you set the size option to <see cref="F:NationalInstruments.Analysis.Math.SizeOption.Full"/> for 
            <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[]@,System.Double[0:,0:]@)"/> or 
            <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.QRAlgorithm,System.Double[0:,0:]@,System.Double[0:,0:]@)"/>, the sizes of the 
            U, Q, V, and R matrices are decided as follows:</para>
            	<list type="bullet">
            		<item>
            			<description>
            Size of U and Q matrices is <format type="bold"> numberOfRows * numberOfRows</format>, where numberOfRows is the number of rows in the input matrix.
            </description>
            		</item>
            		<item>
            			<description>
            Size of V and R matrices is <format type="bold"> numberOfColumns * numberOfColumns</format>, where numberOfColumns is the number of columns in the input matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 10:37:53 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.SizeOption.Full">
            <summary>
            The full size option for the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[]@,System.Double[0:,0:]@)"/> 
            and <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.QRAlgorithm,System.Double[0:,0:]@,System.Double[0:,0:]@)"/> methods. 
            </summary>
            <lastupdated>9/12/2005 1:48:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.SizeOption.Economy">
            <summary>
            The economy size option for the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[]@,System.Double[0:,0:]@)"/>, and <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.QRAlgorithm,System.Double[0:,0:]@,System.Double[0:,0:]@)"/> methods.
            </summary>
            <lastupdated>9/12/2005 1:49:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.RangeType">
            <summary>
            Specifies the type of range used by the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.RemoveOutliersUsingRange(System.Double[],System.Double[],NationalInstruments.Analysis.Math.RangeType,System.Double[],System.Double[]@,System.Double[]@)"/> method.
            </summary>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/12/2005 1:32:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.RangeType.YRange">
            <summary>
            The range of Y is used by the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.RemoveOutliersUsingRange(System.Double[],System.Double[],NationalInstruments.Analysis.Math.RangeType,System.Double[],System.Double[]@,System.Double[]@)"/> method.
            The first two elements in the range array are treated as the upper and lower bounds 
            for the y-axis.
            </summary>
            <lastupdated>9/12/2005 1:35:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.RangeType.XRange">
            <summary>
            The range of X is used by the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.RemoveOutliersUsingRange(System.Double[],System.Double[],NationalInstruments.Analysis.Math.RangeType,System.Double[],System.Double[]@,System.Double[]@)"/> method.
            The first two elements in the range array are treated as the upper and lower bounds 
            for the x-axis.
            </summary>
            <lastupdated>9/12/2005 1:34:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.RangeType.XAndYRange">
            <summary>
            The range of X and the range of Y are both used by the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.RemoveOutliersUsingRange(System.Double[],System.Double[],NationalInstruments.Analysis.Math.RangeType,System.Double[],System.Double[]@,System.Double[]@)"/> method.
            The first and second element in the range array are the upper and lower bounds for the x-axis, and 
            the third and fourth element in the range array are the upper and lower bounds for the y-axis.
            </summary>
            <lastupdated>9/12/2005 1:34:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.CurveFit">
            <summary>
            Provides a set of methods that fit data to mathematical functions and interpolate unknown points from a known data set.</summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This class provides methods that calculate the best estimate of coefficients for the equation that defines 
            the curve that best represents the input data. A parallel set of arrays specifies the <format type="italics">x</format> and <format type="italics">y</format> coordinates
            of the input data. The methods return an array of coefficients. This class uses the least-squares method to find the best fit. Therefore, the methods also return the mean squared error.
            </remarks>
            <seealso example="Analysis/Enterprise/CurveFitting" launch="false">Curve Fitting</seealso>
            <lastupdated>1/31/2013 11:40:42 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.#ctor">
            <exclude/>
            <lastupdated>9/2/2005 1:17:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.#cctor">
            <exclude/>
            <lastupdated>9/2/2005 1:17:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],System.Double@)">
            <summary>
            This method overload is obsolete. Use a different overload of this method that accepts a <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> argument
            to achieve the same functionality.
            </summary>
            <param name="inputXData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="inputYData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="meanSquaredError">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <lastupdated>9/19/2009 3:07:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            This method overload is obsolete. Use a different overload of this method that accepts a <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> argument
            to achieve the same functionality.
            </summary>
            <param name="inputXData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="inputYData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="slope">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="intercept">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="meanSquaredError">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <lastupdated>9/19/2009 3:07:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[])">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square method and using default values 
            for tolerance and weight.  This method returns only fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
            <remarks>
            This method uses the <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/> fit method. It assumes a default tolerance of 0.0001 and that all the weights are equal to 1.
            <para>
            The following equation represents the linear model: 
            </para>
            	<para indent="true">
            		<image src="LinearFitExform_12.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">f</format> represents the fitted data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the slope,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the intercept.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/7/2005 4:10:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight. This method returns only the fitted 
            data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
            <remarks>
            This method uses a tolerance of 0.0001 and assumes that all weights are equal to 1.
            <para>
            The following equation represents the linear model: 
            </para>
                <para indent="true">
                    <image src="LinearFitExform_12.png"/>
                </para>
                <list type="table" bordered="false">
                    <listheader>
                        <term></term>
                        <description></description>
                    </listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">f</format> represents the fitted data, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">a</format> represents the slope,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">b</format> represents the intercept.
            </description>
                    </item>
                </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/7/2005 4:11:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. This method returns only the fitted 
            data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
            <remarks>
            This method uses a tolerance of 0.0001.
            <para>
            The following equation represents the linear model: 
            </para>
                <para indent="true">
                    <image src="LinearFitExform_12.png"/>
                </para>
                <list type="table" bordered="false">
                    <listheader>
                        <term></term>
                        <description></description>
                    </listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">f</format> represents the fitted data, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">a</format> represents the slope,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">b</format> represents the intercept.
            </description>
                    </item>
                </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>,  
            and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/7/2005 4:18:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method. This method returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the slope and intercept iteratively. If the relative 
            difference of residue in two successive iterations is less than <paramref name="tolerance"/>, the 
            method returns the resulting slope and intercept. If <paramref name="tolerance"/> is less than or 
            equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
            <remarks>
            	<para>
            The following equation represents the linear model: 
            </para>
            	<para indent="true">
            		<image src="LinearFitExform_12.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">f</format> represents the fitted data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the slope,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the intercept.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 11:16:49 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="slope">
            Upon return, contains the slope of the fitted linear model.
            </param>
            <param name="intercept">
            Upon return, contains the intercept of the fitted linear model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the linear fit.
            </param>
            <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
            <remarks>
            This method uses a tolerance of 0.0001 and assumes that all weights are equal to 1.
                <para>
            The following equation represents the linear model: 
            </para>
                <para indent="true">
                    <image src="LinearFitExform_12.png"/>
                </para>
                <list type="table" bordered="false">
                    <listheader>
                        <term></term>
                        <description></description>
                    </listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">f</format> represents the fitted data, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">a</format> represents the <paramref name="slope"/>,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">b</format> represents the <paramref name="intercept"/>.
            </description>
                    </item>
                </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/7/2005 4:26:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="slope">
            Upon return, contains the slope of the fitted linear model.
            </param>
            <param name="intercept">
            Upon return, contains the intercept of the fitted linear model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the linear fit.
            </param>
            <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
            <remarks>
            This method uses a tolerance of 0.0001.
                <para>
            The following equation represents the linear model: 
            </para>
                <para indent="true">
                    <image src="LinearFitExform_12.png"/>
                </para>
                <list type="table" bordered="false">
                    <listheader>
                        <term></term>
                        <description></description>
                    </listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">f</format> represents the fitted data, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">a</format> represents the <paramref name="slope"/>,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">b</format> represents the <paramref name="intercept"/>.
            </description>
                    </item>
                </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/7/2005 4:25:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or Bisquare method.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the <paramref name="slope"/> and <paramref name="intercept"/> iteratively. If the relative 
            difference of <paramref name="residue"/> in two successive iterations is less than <paramref name="tolerance"/>, the 
            method returns the resulting <paramref name="slope"/> and <paramref name="intercept"/>. If <paramref name="tolerance"/> is less than or 
            equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="slope">
            Upon return, contains the slope of the fitted linear model.
            </param>
            <param name="intercept">
            Upon return, contains the intercept of the fitted linear model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the linear fit.
            </param>
            <returns>
            The fitted data calculated using the fitted linear model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the linear model: 
            </para>
            	<para indent="true">
            		<image src="LinearFitExform_12.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">f</format> represents the fitted data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the <paramref name="slope"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the <paramref name="intercept"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <example>
            The following example generates a set of linear data according to the model: <c>y = a * x + b + noise</c>. Then, the example fits the data against the linear model using the Least Square method.  
            <code lang="VB.NET">
            Dim numSamples As Integer = 50
            Dim xData(numSamples - 1) As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim slope, intercept, residue, tolerance, a, b As Double
             
            '  Generate xData of the input data set {xData, yData}
            For i As Integer = 0 To xData.Length - 1
                xData(i) = i
            Next
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 0.1
             
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * x + b + noise 
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (a * xData(i)) + b + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Calculate linear fit of the data set {xData, yData}
            fittedData = CurveFit.LinearFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, slope, intercept, residue)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 50;
            double[] xData = new double[numSamples];
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double slope, intercept, residue, tolerance, a, b;
             
            // Generate xData of the input data set {xData, yData}
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = i;
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 0.1;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * x + b + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = (a * xData[i]) + b + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1.0;
             
            tolerance = 0.0001;
             
            // Calculate linear fit of the data set {xData, yData}
            fittedData = CurveFit.LinearFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, out slope, out intercept, out residue);
             
             
            </code>
            </example>
            <lastupdated>1/17/2008 3:09:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],System.Double@)">
            <summary>
            This method overload is obsolete. Use a different overload of this method that accepts a <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> argument
            to achieve the same functionality.
            </summary>
            <param name="inputXData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="inputYData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="meanSquaredError">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <lastupdated>9/17/2009 10:52:04 AM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            This method overload is obsolete. Use a different overload of this method that accepts a <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> argument
            to achieve the same functionality.
            </summary>
            <param name="inputXData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="inputYData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="amplitude">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="damping">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="meanSquaredError">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <lastupdated>9/17/2009 10:52:57 AM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[])">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square method while using a default value for tolerance and weight. Only the fitted data is returned.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <returns>
            The y values calculated using the fitted exponential model. </returns>
            <remarks>
            This method uses the <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/> fit method. It assumes a default tolerance of 0.0001 and that all the weights are equal to 1.
            <para>
            The following equation represents the exponential model:
            </para>
                <para indent="true">
                    <image src="ExpFitExform_6.png"/>
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/2/2005 1:57:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method and using a default value for tolerance and weight. Only the fitted data is returned.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <returns>
            The y values calculated using the fitted exponential model. </returns>
            <remarks>
            This method uses a default tolerance of 0.0001 and it assumes that all the weights are 1.
            <para>
            The following equation represents the exponential model:
            </para>
                <para indent="true">
                    <image src="ExpFitExform_6.png"/>
                </para>
                <para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and damping of the exponential model by minimizing the residue as follows:
            </para>
                <para indent="true">
                    <image src="ExpFitExform_5.png"/>
                </para>
                <para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and damping of the exponential model by minimizing the residue as follows: 
            </para>
                <para indent="true">
                    <image src="ExpFitExform_4.png"/>
                </para>
                <para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and damping of the exponential model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/2/2005 5:00:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method using a default value for tolerance. Only the fitted data is returned.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <returns>
            The y values calculated using the fitted exponential model. </returns>
            <remarks>
            This method uses a default tolerance of 0.0001.
            <para>
            The following equation represents the exponential model:
            </para>
                <para indent="true">
                    <image src="ExpFitExform_6.png"/>
                </para>
                <para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and damping of the exponential model by minimizing the residue as follows:
            </para>
                <para indent="true">
                    <image src="ExpFitExform_5.png"/>
                </para>
                <para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and damping of the exponential model by minimizing the residue as follows: 
            </para>
                <para indent="true">
                    <image src="ExpFitExform_4.png"/>
                </para>
                <para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and damping of the exponential model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/> and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/2/2005 2:03:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method. Only the fitted data is returned.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the amplitude and damping iteratively. If the relative difference of residue in two successive iterations is less than tolerance, the method returns the resulting amplitude and damping. If tolerance is less than or equal to 0, the method sets tolerance to 0.0001.
            </param>
            <returns>
            The y values calculated using the fitted exponential model. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/> and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
                <para>
            The following equation represents the exponential model:
            </para>
                <para indent="true">
                    <image src="ExpFitExform_6.png"/>
                </para>
                <para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and damping of the exponential model by minimizing the residue as follows:
            </para>
                <para indent="true">
                    <image src="ExpFitExform_5.png"/>
                </para>
                <para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and damping of the exponential model by minimizing the residue as follows: 
            </para>
                <para indent="true">
                    <image src="ExpFitExform_4.png"/>
                </para>
                <para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and damping of the exponential model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <lastupdated>9/2/2005 4:16:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method using a default value for tolerance and weight.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted exponential model.
            </param>
            <param name="damping">
            Upon return, contains the damping of the fitted exponential model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the exponential fit. 
            </param>
            <returns>
            The y values calculated using the fitted exponential model. 
            </returns>
            <remarks>This method uses a default tolerance of 0.0001. This method assumes all weights are 1.
                <para>
            The following equation represents the exponential model:
            </para>
                <para indent="true">
                    <image src="ExpFitExform_6.png"/>
                </para>
                <para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by minimizing the <paramref name="residue"/> as follows:
            </para>
                <para indent="true">
                    <image src="ExpFitExform_5.png"/>
                </para>
                <para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by minimizing the <paramref name="residue"/> as follows: 
            </para>
                <para indent="true">
                    <image src="ExpFitExform_4.png"/>
                </para>
                <para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/2/2005 4:54:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted exponential model.
            </param>
            <param name="damping">
            Upon return, contains the damping of the fitted exponential model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the exponential fit. 
            </param>
            <returns>
            The y values calculated using the fitted exponential model. 
            </returns>
            <remarks>This method uses a default tolerance of 0.0001.
                <para>
            The following equation represents the exponential model:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_6.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 12:26:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the <paramref name="amplitude"/> and <paramref name="damping"/> iteratively. If the relative difference of <paramref name="residue"/> in two successive iterations is less than <paramref name="tolerance"/>, the method returns the resulting <paramref name="amplitude"/> and <paramref name="damping"/>. If <paramref name="tolerance"/> is less than or equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted exponential model.
            </param>
            <param name="damping">
            Upon return, contains the damping of the fitted exponential model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the exponential fit. 
            </param>
            <returns>
            The y values calculated using the fitted exponential model. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the exponential model:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_6.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <example>
            The following example generates a set of exponential data according to the model: <format type="monospace">y = a * exp(b * x) + noise</format>. Then, the example fits the data against the exponential model using the Least Square method.
            <code lang="VB.NET">
            Dim numSamples As Integer = 50
            Dim xData(numSamples - 1) As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim amplitude, damping, residue, tolerance, a, b As Double
             
            ' Generate xData of the input data set {xData, yData}
            For i As Integer = 0 To xData.Length - 1
                xData(i) = i
            Next
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 0.1
             
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * exp(xData * b) + noise 
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (a * Math.Exp(xData(i) * b)) + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Calculate exponential fit of the data set {xData, yData}
            fittedData = CurveFit.ExponentialFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, amplitude, damping, residue)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 50;
            double[] xData = new double[numSamples];
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double amplitude, damping, residue, tolerance, a, b;
             
            // Generate xData of the input data set {xData, yData}
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = i;
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0; 
            b = 0.1;
                       
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
                       
            // Applying model: yData = a * exp(xData * b) + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = (a * Math.Exp(xData[i] * b)) + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1.0;
             
            tolerance = 0.0001;
             
            // Calculate exponential fit of the data set {xData, yData}
            fittedData = CurveFit.ExponentialFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, out amplitude, out damping, out residue);
             
            </code>
            </example>
            <lastupdated>1/8/2008 1:47:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,System.Double@)">
            <summary>
            This method overload is obsolete. Use a different overload of this method that accepts a 
            <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> argument to achieve the same functionality.
            </summary>
            <param name="inputXData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="inputYData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="order">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="meanSquaredError">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <lastupdated>9/19/2009 3:07:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,System.Double[]@,System.Double@)">
            <summary>
            This method overload is obsolete. Use a different overload of this method that accepts a 
            <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> argument to achieve the same functionality.
            </summary>
            <param name="inputXData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="inputYData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="order">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="coefficients">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="meanSquaredError">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <lastupdated>9/19/2009 3:07:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)">
            <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method. The method returns 
            only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y). 
            </param>
            <param name="inputYData">
            The y value of data set (x, y). 
            </param>
            <param name="order">
            The order of the polynomial to which to fit the data set. <paramref name="order"/> must be greater than or equal to 0. 
            </param>
            <param name="fitAlgorithm">
            A <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> value representing the polynomial fit algorithm to use.
            </param>
            <returns>
            The fitted data, calculated using the polynomial model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="order"/> is less than or equal to 0.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitAlgorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The following equation represents the polynomial model: 
            <para indent="true">
            		<image src="PolyFitExform_14.png"/>
            	</para>
            	<para>
            where <format type="italics">a</format><format type="subscript">0</format>, <format type="italics">a</format><format type="subscript">1</format>,..., <format type="italics">a</format><format type="subscript">m<entity value="ndash"/>1</format> are the polynomial coefficients.
            </para>
            </remarks>
            <lastupdated>10/23/2006 4:12:13 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Double[]@,System.Double@)">
            <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method. 
            </summary>
            <param name="inputXData">
            The x value of data set (x, y). 
            </param>
            <param name="inputYData">
            The y value of data set (x, y). 
            </param>
            <param name="order">
            The order of the polynomial to which to fit the data set. <paramref name="order"/> must be greater than or equal to 0. 
            </param>
            <param name="fitAlgorithm">
            A <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> value representing the polynomial fit algorithm to use.
            </param>
            <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
            <param name="mse">
            Upon return, contains the mean square error.
            </param>
            <returns>
            The fitted data, calculated using the polynomial model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="order"/> is less than or equal to 0.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitAlgorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The following equation represents the polynomial model: 
            <para indent="true">
            		<image src="PolyFitExform_14.png"/>
            	</para>
            	<para>
            where <format type="italics">a</format><format type="subscript">0</format>, <format type="italics">a</format><format type="subscript">1</format>,..., <format type="italics">a</format><format type="subscript">m<entity value="ndash"/>1</format> are the polynomial coefficients.
            </para>
            </remarks>
            <lastupdated>10/23/2006 4:12:25 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Int32[],System.Double[],System.Double[]@,System.Double@)">
            <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method and specified coefficient constraints. 
            </summary>
            <param name="inputXData">
            The x value of data set (x, y). 
            </param>
            <param name="inputYData">
            The y value of data set (x, y). 
            </param>
            <param name="order">
            The order of the polynomial to which to fit the data set. <paramref name="order"/> must be greater than or equal to 0. 
            </param>
            <param name="fitAlgorithm">
            A <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> value representing the polynomial fit algorithm to use.
            </param>
            <param name="specifiedOrder">
            The constraints on the polynomial coefficients of certain orders. This parameter contains the constrained polynomial orders.
            </param>
            <param name="specifiedCoefficients">
            The constraints on the polynomial coefficients of certain orders. This parameter constrains the coefficients of the specified orders. 
            </param>
            <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
            <param name="mse">
            Upon return, contains the mean square error.
            </param>
            <returns>
            The fitted data, calculated using the polynomial model.
            </returns>
            <remarks>
            Use this method if you know the exact values of certain polynomial coefficients.
            <para>
            The following equation represents the polynomial model: 
            </para>
            	<para indent="true">
            		<image src="PolyFitExform_14.png"/>
            	</para>
            	<para>
            where <format type="italics">a</format><format type="subscript">0</format>, <format type="italics">a</format><format type="subscript">1</format>,..., <format type="italics">a</format><format type="subscript">m<entity value="ndash"/>1</format> are the polynomial coefficients.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="order"/> is less than or equal to 0.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitAlgorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/20/2008 11:52:52 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)">
            <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method. The method performs this operation in place and returns only the fitted data.
            </summary>
            <param name="xData">
            On input, contains the x value of data set (x, y). On output, contains the output data, fitted using the polynomial model.
            </param>
            <param name="inputYData">
            The y value of data set (x, y). 
            </param>
            <param name="order">
            The order of the polynomial to which to fit the data set. <paramref name="order"/> must be greater than or equal to 0. 
            </param>
            <param name="fitAlgorithm">
            The polynomial fit algorithm to use. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> enumeration.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="xData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="xData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="order"/> is less than or equal to 0.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitAlgorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
                <para>
            The following equation represents the polynomial model: 
            </para>
                <para indent="true">
                    <image src="PolyFitExform_14.png"/>
                </para>
                <para>
            where <format type="italics">a</format><format type="subscript">0</format>, <format type="italics">a</format><format type="subscript">1</format>,..., <format type="italics">a</format><format type="subscript">m<entity value="ndash"/>1</format> are the polynomial coefficients.
            </para>
            </remarks>
            <lastupdated>9/8/2005 2:29:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Double[]@,System.Double@)">
            <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method. The method performs 
            this operation in place.
            </summary>
            <param name="xData">
            On input, contains the x value of data set (x, y). On output, contains the output data, fitted using the polynomial model.
            </param>
            <param name="inputYData">
            The y value of data set (x, y). 
            </param>
            <param name="order">
            The order of the polynomial to which to fit the data set. <paramref name="order"/> must be greater than or equal to 0. 
            </param>
            <param name="fitAlgorithm">
            The polynomial fit algorithm to use. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> enumeration.
            </param>
            <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
            <param name="mse">
            Upon return, contains the mean square error.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="xData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="order"/> is less than or equal to 0.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitAlgorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the polynomial model: 
            </para>
            	<para indent="true">
            		<image src="PolyFitExform_14.png"/>
            	</para>
            	<para>
            where <format type="italics">a</format><format type="subscript">0</format>, <format type="italics">a</format><format type="subscript">1</format>,..., <format type="italics">a</format><format type="subscript">m<entity value="ndash"/>1</format> are the polynomial coefficients.
            </para>
            </remarks>
            <lastupdated>9/27/2005 11:37:50 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Int32[],System.Double[],System.Double[]@,System.Double@)">
            <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method and specified 
            coefficient constraints. The method performs this operation in place.
            </summary>
            <param name="xData">
            On input, contains the x value of data set (x, y). On output, contains the output data, fitted using the polynomial model.
            </param>
            <param name="inputYData">
            The y value of data set (x, y). 
            </param>
            <param name="order">
            The order of the polynomial to which to fit the data set. <paramref name="order"/> must be greater than or equal to 0. 
            </param>
            <param name="fitAlgorithm">
            The polynomial fit algorithm to use. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> enumeration.
            </param>
            <param name="specifiedOrder">
            The constraints on the polynomial coefficients of certain orders. This parameter contains the constrained polynomial orders.
            </param>
            <param name="specifiedCoefficients">
            The constraints on the polynomial coefficients of certain orders. This parameter constrains the coefficients of the specified orders. 
            </param>
            <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
            <param name="mse">
            Upon return, contains the mean square error.
            </param>
            <remarks>
            Use this overload if you know the exact values of certain polynomial coefficients. 
            <para>
            The following equation represents the polynomial model: 
            </para>
            	<para indent="true">
            		<image src="PolyFitExform_14.png"/>
            	</para>
            	<para>
            where <format type="italics">a</format><format type="subscript">0</format>, <format type="italics">a</format><format type="subscript">1</format>,..., <format type="italics">a</format><format type="subscript">m<entity value="ndash"/>1</format> are the polynomial coefficients.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="xData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="order"/> is less than or equal to 0.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitAlgorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <example>
            The following example fits the data set (xData, yData) to the polynomial model using the singular value decomposition (SVD) algorithm.
            <code lang="VB.NET">
            Dim numSamples As Integer = 6
            Dim xData() As Double = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0}
            Dim yData() As Double = {1.0, 2.7, 7.4, 150.0, 80.0, 220.0}
            Dim specifiedCoefficients() As Double
            Dim coefficients() As Double = Nothing
            Dim weight(numSamples - 1) As Double
            Dim specifiedOrder() As Integer = {0, 0, 0, 0, 0, 0}
            Dim order As Integer
            Dim mse As Double
             
            ' Generate a ramp pattern that represents specifiedCoefficients
            specifiedCoefficients = PatternGeneration.Ramp(numSamples, 0.0, 15.0)
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            order = 2
             
            ' Calculate polynomial fit of the data set {xData, yData}. This operation is performed in place.
            CurveFit.PolynomialFitInPlace(xData, yData, weight, order, PolynomialFitAlgorithm.Svd, specifiedOrder, specifiedCoefficients, coefficients, mse)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 6;
            double[] xData = new double[] { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 };
            double[] yData = new double[] { 1.00, 2.70, 7.40, 150.00, 80.00, 220.00 };
            double[] specifiedCoefficients, coefficients;
            double[] weight = new double[numSamples];
            int[] specifiedOrder = new int[] { 0, 0, 0, 0, 0, 0 };
            int order;
            double mse;
             
            // Generate a ramp pattern that represents specifiedCoefficients
            specifiedCoefficients = PatternGeneration.Ramp(numSamples, 0.0, 15.0);
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            order = 2;
             
            // Calculate polynomial fit of the data set {xData, yData}. This operation is performed in place.
            CurveFit.PolynomialFitInPlace(xData, yData, weight, order, PolynomialFitAlgorithm.Svd, specifiedOrder, specifiedCoefficients, out coefficients, out mse);
            </code>
            </example>
            <lastupdated>1/9/2008 9:11:08 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)">
            <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method with the specified weights. The method returns 
            only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y). 
            </param>
            <param name="inputYData">
            The y value of data set (x, y). 
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="order">
            The order of the polynomial to which to fit the data set. <paramref name="order"/> must be greater than or equal to 0. 
            </param>
            <param name="fitAlgorithm">
            A <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> value representing the polynomial fit algorithm to use.
            </param>
            <returns>
            The fitted data, calculated using the polynomial model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="order"/> is less than or equal to 0.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitAlgorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The following equation represents the polynomial model:
            <para indent="true">
            		<image src="PolyFitform_14.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format><format type="subscript">0</format>, <format type="italics">a</format><format type="subscript">1</format>,...<format type="italics">a</format><format type="subscript">m</format> are the polynomial coefficients.
            </description>
            		</item>
            	</list>
            </remarks>
            <lastupdated>10/23/2006 4:11:53 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Double[]@,System.Double@)">
            <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method with the specified weights. 
            </summary>
            <param name="inputXData">
            The x value of data set (x, y). 
            </param>
            <param name="inputYData">
            The y value of data set (x, y). 
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="order">
            The order of the polynomial to which to fit the data set. <paramref name="order"/> must be greater than or equal to 0. 
            </param>
            <param name="fitAlgorithm">
            The polynomial fit algorithm to use. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> enumeration.
            </param>
            <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
            <param name="mse">
            Upon return, contains the mean square error.
            </param>
            <returns>
            The fitted data, calculated using the polynomial model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="order"/> is less than or equal to 0.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitAlgorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The following equation represents the polynomial model:
            <para indent="true">
            		<image src="PolyFitform_14.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format><format type="subscript">0</format>, <format type="italics">a</format><format type="subscript">1</format>,...<format type="italics">a</format><format type="subscript">m</format> are the polynomial coefficients and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="PolyFitform_18.png"/> represents <paramref name="mse"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <lastupdated>10/15/2006 4:46:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFit(System.Double[],System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Int32[],System.Double[],System.Double[]@,System.Double@)">
            <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method with the specified weights and coefficient constraints. 
            </summary>
            <param name="inputXData">
            The x value of data set (x, y). 
            </param>
            <param name="inputYData">
            The y value of data set (x, y). 
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="order">
            The order of the polynomial to which to fit the data set. <paramref name="order"/> must be greater than or equal to 0. 
            </param>
            <param name="fitAlgorithm">
            The polynomial fit algorithm to use. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> enumeration.
            </param>
            <param name="specifiedOrder">
            The constraints on the polynomial coefficients of certain orders. This parameter contains the constrained polynomial orders.
            </param>
            <param name="specifiedCoefficients">
            The constraints on the polynomial coefficients of certain orders. This parameter constrains the coefficients of the specified orders. 
            </param>
            <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
            <param name="mse">
            Upon return, contains the mean square error.
            </param>
            <returns>
            The fitted data, calculated using the polynomial model.
            </returns>
            <remarks>
            The following equation represents the polynomial model:
            <para indent="true">
            		<image src="PolyFitform_14.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format><format type="subscript">0</format>, <format type="italics">a</format><format type="subscript">1</format>,...<format type="italics">a</format><format type="subscript">m</format> are the polynomial coefficients and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="PolyFitform_18.png"/> represents <paramref name="mse"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="order"/> is less than or equal to 0.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitAlgorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <example>
            The following example fits the data set (xData, yData) to the polynomial model using the singular value decomposition (SVD) algorithm.
            <code lang="VB.NET">
            Dim numSamples As Integer = 6
            Dim xData() As Double = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0}
            Dim yData() As Double = {1.0, 2.7, 7.4, 150.0, 80.0, 220.0}
            Dim specifiedCoefficients() As Double
            Dim coefficients() As Double = Nothing
            Dim weight(numSamples - 1) As Double
            Dim fittedData() As Double
            Dim specifiedOrder() As Integer = {0, 0, 0, 0, 0, 0}
            Dim order As Integer
            Dim mse As Double
             
            ' Generate a ramp pattern that represents specifiedCoefficients
            specifiedCoefficients = PatternGeneration.Ramp(numSamples, 0.0, 15.0)
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            ' Generate a ramp pattern that represents coefficients
            specifiedCoefficients = PatternGeneration.Ramp(numSamples, 0.0, 3.0)
             
            order = 2
             
            ' Calculate polynomial fit of the data set {xData, yData}
            fittedData = CurveFit.PolynomialFit(xData, yData, weight, order, PolynomialFitAlgorithm.Svd, specifiedOrder, specifiedCoefficients, coefficients, mse)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 6;
            double[] xData = new double[] { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 };
            double[] yData = new double[] { 1.00, 2.70, 7.40, 150.00, 80.00, 220.00 };
            double[] specifiedCoefficients, coefficients;
            double[] weight = new double[numSamples];
            double[] fittedData;
            int[] specifiedOrder = new int[] { 0, 0, 0, 0, 0, 0 };
            int order;
            double mse;
             
            // Generate a ramp pattern that represents specifiedCoefficients
            specifiedCoefficients = PatternGeneration.Ramp(numSamples, 0.0, 15.0);
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1.0;
             
            order = 2;
             
            // Calculate polynomial fit of the data set {xData, yData}
            fittedData = CurveFit.PolynomialFit(xData, yData, weight, order, PolynomialFitAlgorithm.Svd, specifiedOrder, specifiedCoefficients, out coefficients, out mse);
             
             
            </code>
            </example>
            <lastupdated>1/17/2008 3:47:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm)">
            <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method with the specified weights. The method performs this operation in place and returns only the fitted data.
            </summary>
            <param name="xData">
            On input, contains the x value of data set (x, y). On output, contains the output data, fitted using the polynomial model.
            </param>
            <param name="inputYData">
            The y value of data set (x, y). 
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="order">
            The order of the polynomial to which to fit the data set. <paramref name="order"/> must be greater than or equal to 0. 
            </param>
            <param name="fitAlgorithm">
            The polynomial fit algorithm to use. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> enumeration.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="xData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="order"/> is less than or equal to 0.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitAlgorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The following equation represents the polynomial model:
            <para indent="true">
            		<image src="PolyFitform_14.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format><format type="subscript">0</format>, <format type="italics">a</format><format type="subscript">1</format>,...<format type="italics">a</format><format type="subscript">m</format> are the polynomial coefficients.
            </description>
            		</item>
            	</list>
            </remarks>
            <lastupdated>10/16/2006 10:36:16 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Double[]@,System.Double@)">
            <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method with the specified weights. The method performs 
            this operation in place.
            </summary>
            <param name="xData">
            On input, contains the x value of data set (x, y). On output, contains the output data, fitted using the polynomial model.
            </param>
            <param name="inputYData">
            The y value of data set (x, y). 
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="order">
            The order of the polynomial to which to fit the data set. <paramref name="order"/> must be greater than or equal to 0. 
            </param>
            <param name="fitAlgorithm">
            A <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> value representing the polynomial fit algorithm to use.
            </param>
            <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
            <param name="mse">
            Upon return, contains the mean square error.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="xData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="order"/> is less than or equal to 0.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitAlgorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The following equation represents the polynomial model:
            <para indent="true">
            		<image src="PolyFitform_14.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format><format type="subscript">0</format>, <format type="italics">a</format><format type="subscript">1</format>,...<format type="italics">a</format><format type="subscript">m</format> are the polynomial coefficients and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="PolyFitform_18.png"/> represents <paramref name="mse"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <lastupdated>10/23/2006 4:13:14 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialFitInPlace(System.Double[],System.Double[],System.Double[],System.Int32,NationalInstruments.Analysis.Math.PolynomialFitAlgorithm,System.Int32[],System.Double[],System.Double[]@,System.Double@)">
            <summary>
            Fits the data set (x, y) to a polynomial model using the Least Square method with the specified weights and 
            coefficient constraints. The method performs this operation in place.
            </summary>
            <param name="xData">
            On input, contains the x value of data set (x, y). On output, contains the output data, fitted using the polynomial model.
            </param>
            <param name="inputYData">
            The y value of data set (x, y). 
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="order">
            The order of the polynomial to which to fit the data set. <paramref name="order"/> must be greater than or equal to 0. 
            </param>
            <param name="fitAlgorithm">
            A <see cref="T:NationalInstruments.Analysis.Math.PolynomialFitAlgorithm"/> value representing the polynomial fit algorithm to use.
            </param>
            <param name="specifiedOrder">
            The constraints on the polynomial coefficients of certain orders. This parameter contains the constrained polynomial orders.
            </param>
            <param name="specifiedCoefficients">
            The constraints on the polynomial coefficients of certain orders. This parameter constrains the coefficients of the specified orders. 
            </param>
            <param name="coefficients">
            Upon return, contains the coefficients of the fitted polynomial in ascending order of power. 
            </param>
            <param name="mse">
            Upon return, contains the mean square error.
            </param>
            <remarks>
            Use this overload if you know the exact values of certain polynomial coefficients. 
            The following equation represents the polynomial model:
            <para indent="true">
            		<image src="PolyFitform_14.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format><format type="subscript">0</format>, <format type="italics">a</format><format type="subscript">1</format>,...<format type="italics">a</format><format type="subscript">m</format> are the polynomial coefficients and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="PolyFitform_18.png"/> represents <paramref name="mse"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="xData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="order"/> is less than or equal to 0.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitAlgorithm"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/23/2006 4:13:27 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double@)">
            <summary>
            Calculates the <format type="italics">k</format>-dimension linear curve values and the set of <format type="italics">k</format>-dimension linear fit coefficients, 
            which describe the <format type="italics">k</format>-dimension linear curve that best represents the input data set using the least-squares solution. 
            Use this method if the standard deviation is unknown or if all the standard deviations are equal, and if the matrix of covariances is not required. 
            </summary>
            <param name="hMatrix">
            The input matrix that represents the formula used to fit the data set {<format type="italics">X,Y</format>}. The number of rows 
            in <paramref name="hMatrix"/> must be greater than or equal to the number of columns.
            </param>
            <param name="inputYData">
            The array whose elements contain the <format type="italics">y</format> coordinates of the (<format type="italics">x,y</format>) data sets to be fitted.
            The number of elements in this array must be equal to the number of rows in <paramref name="hMatrix"/>.
            </param>
            <param name="algorithm">
            The algorithm to use in solving the multiple linear regression model. This parameter is specified using <see cref="T:NationalInstruments.Analysis.Math.BestFitAlgorithm"/>.
            </param>
            <param name="coefficients">
            Upon return, contains the set of linear coefficients that best fit the multiple linear regression model in a least-squares sense.
            </param>
            <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
            <returns>
            The best fitted curve.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            	<paramref name="hMatrix"/> is singular.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="hMatrix"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The number of samples in <paramref name="hMatrix"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of rows in <paramref name="hMatrix"/> is not the same size as <paramref name="inputYData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            Array size is less than the order (<paramref name="inputYData"/> size is less than number of columns in <paramref name="hMatrix"/>).
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    Order is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    Order is greater than 90.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            Invalid <paramref name="algorithm"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The following example demonstrates how to use the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double@)"/> method to obtain the set of least-square coefficients and the fitted values.
            <para>
            The purpose is to find the set of least-square coefficients that best represents the set of data points (<format type="italics">x,y</format>). The relationship between <format type="italics">x</format> and <format type="italics">y</format> is of the form
            </para>
            	<para indent="true">
            		<image src="GeneralLeastSquaresFit1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where 
            </term>
            			<description>
            				<format type="italics">a</format> represents the set of <paramref name="coefficients"/> and is defined as <image src="GeneralLeastSquaresFit2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> is the total number of functions.
            </description>
            		</item>
            	</list>
            	<para>
            Assume the data is generated using the relationship
            </para>
            	<para indent="true">
            		<image src="GeneralLeastSquaresFit3.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="GeneralLeastSquaresFit4a.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit4b.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit4c.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            noise is a random value.
            </description>
            		</item>
            	</list>
            	<para>
            Also, assume that you think the relationship between <format type="italics">x</format> and <format type="italics">y</format> is of the form
            </para>
            	<para indent="true">
            		<image src="GeneralLeastSquaresFit5.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="GeneralLeastSquaresFit6a.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6b.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6c.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6d.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6e.gif"/>
            			</description>
            		</item>
            	</list>
            To obtain <paramref name="coefficients"/>, you must supply the set of (<format type="italics">x,y</format>) points in the arrays <format type="italics">X</format> and <format type="italics">Y</format>, and you must also supply the basis function <paramref name="hMatrix"/>(<format type="italics">X,i</format>), which is a 2D array, to the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double@)"/> method.
            <para>
            For more information on this method, refer to <see keyword="LeastSquaresFitTheory" keywordType="mstudio">LeastSquaresFit Theory</see>. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>7/15/2005 10:20:39 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double[0:,0:]@,System.Double@)">
            <summary>
            Calculates the <format type="italics">k</format>-dimension linear curve values and the set of <format type="italics">k</format>-dimension linear fit coefficients, 
            which describe the <format type="italics">k</format>-dimension linear curve that best represents the input data set using the least-squares solution. 
            Use this method if the standard deviation is unknown or if all the standard deviations are equal.
            </summary>
            <param name="hMatrix">
            The input matrix that represents the formula used to fit the data set {<format type="italics">X,Y</format>}. The number of rows 
            in <paramref name="hMatrix"/> must be greater than or equal to the number of columns.
            </param>
            <param name="inputYData">
            The array whose elements contain the <format type="italics">y</format> coordinates of the (<format type="italics">x,y</format>) data sets to be fitted.
            The number of elements in this array must be equal to the number of rows in <paramref name="hMatrix"/>.
            </param>
            <param name="algorithm">
            The algorithm to use in solving the multiple linear regression model. This parameter is specified using <see cref="T:NationalInstruments.Analysis.Math.BestFitAlgorithm"/>.
            </param>
            <param name="coefficients">
            Upon return, contains the set of linear coefficients that best fit the multiple linear regression model in a least-squares sense.
            </param>
            <param name="covariance">
            Upon return, contains the matrix of covariances <format type="italics">C</format> with <format type="italics">k</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">k</format> elements, where <format type="italics">k</format> is the number of columns. 
            <format type="italics">C<format type="subscript">j</format></format><format type="italics">k</format> is the covariance between <format type="italics">a<format type="subscript">j</format></format> and <format type="italics">a<format type="subscript">k</format></format>. 
                <format type="italics">C<format type="subscript">jj</format></format> is the variance of <format type="italics">a<format type="subscript">j</format></format>,
            where  <format type="italics">a</format> represents <paramref name="coefficients"/>.
            </param>
            <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
            <returns>
            The best fitted curve.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            	<paramref name="hMatrix"/> is singular.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="hMatrix"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The number of samples in <paramref name="hMatrix"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of rows in <paramref name="hMatrix"/> is not the same size as <paramref name="inputYData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            Array size is less than the order (<paramref name="inputYData"/> size is less than number of columns in <paramref name="hMatrix"/>).
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    Order is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    Order is greater than 90.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            Invalid <paramref name="algorithm"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The following example demonstrates how to use the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double@)"/> method to obtain the set of least-square coefficients and the fitted values.
                <para>
            The purpose is to find the set of least-square coefficients that best represents the set of data points (<format type="italics">x,y</format>). The relationship between <format type="italics">x</format> and <format type="italics">y</format> is of the form
            </para>
            	<para indent="true">
            		<image src="GeneralLeastSquaresFit1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where 
            </term>
            			<description>
            				<format type="italics">a</format> represents the set of <paramref name="coefficients"/> and is defined as <image src="GeneralLeastSquaresFit2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> is the total number of functions.
            </description>
            		</item>
            	</list>
            	<para>
            Assume the data is generated using the relationship
            </para>
            	<para indent="true">
            		<image src="GeneralLeastSquaresFit3.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="GeneralLeastSquaresFit4a.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit4b.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit4c.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            noise is a random value.
            </description>
            		</item>
            	</list>
            	<para>
            Also, assume that you think the relationship between <format type="italics">x</format> and <format type="italics">y</format> is of the form
            </para>
            	<para indent="true">
            		<image src="GeneralLeastSquaresFit5.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="GeneralLeastSquaresFit6a.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6b.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6c.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6d.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6e.gif"/>
            			</description>
            		</item>
            	</list>
            To obtain <paramref name="coefficients"/>, you must supply the set of (<format type="italics">x,y</format>) points in the arrays <format type="italics">X</format> and <format type="italics">Y</format>, and you must also supply the basis function <paramref name="hMatrix"/>(<format type="italics">X,i</format>), which is a 2D array, to the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double@)"/> method.
            <para>
            For more information on this method, refer to <see keyword="LeastSquaresFitTheory" keywordType="mstudio">LeastSquaresFit Theory</see>.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>7/15/2005 10:20:26 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double@)">
            <summary>
            Calculates the <format type="italics">k</format>-dimension linear curve values and the set of <format type="italics">k</format>-dimension linear fit coefficients, 
            which describe the <format type="italics">k</format>-dimension linear curve that best represents the input data set using the least-squares solution.
            Use this method if the matrix of covariances is not required. 
            </summary>
            <param name="hMatrix">
            The input matrix that represents the formula used to fit the data set {<format type="italics">X,Y</format>}. The number of rows 
            in <paramref name="hMatrix"/> must be greater than or equal to the number of columns.
            </param>
            <param name="inputYData">
            The array whose elements contain the <format type="italics">y</format> coordinates of the (<format type="italics">x,y</format>) data sets to be fitted.
            The number of elements in this array must be equal to the number of rows in <paramref name="hMatrix"/>.
            </param>
            <param name="standardDeviation">
            The array of standard deviations for each input data set. The number of elements in this array must be equal to the number of rows in <paramref name="hMatrix"/>.
            </param>
            <param name="algorithm">
            The algorithm to use in solving the multiple linear regression model. This parameter is specified using <see cref="T:NationalInstruments.Analysis.Math.BestFitAlgorithm"/>.
            </param>
            <param name="coefficients">
            Upon return, contains the set of linear coefficients that best fit the multiple linear regression model in a least-squares sense.
            </param>
            <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
            <returns>
            The best fitted curve.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            	<paramref name="hMatrix"/> is singular.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="hMatrix"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The number of samples in <paramref name="hMatrix"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of rows in <paramref name="hMatrix"/> is not the same size as <paramref name="inputYData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            Array size is less than the order (<paramref name="inputYData"/> size is less than number of columns in <paramref name="hMatrix"/>).
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    Order is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    Order is greater than 90.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            Invalid <paramref name="algorithm"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The following example demonstrates how to use the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double@)"/> method to obtain the set of least-square coefficients and the fitted values.
            <para>
            The purpose is to find the set of least-square coefficients that best represents the set of data points (<format type="italics">x,y</format>). The relationship between <format type="italics">x</format> and <format type="italics">y</format> is of the form
            </para>
            	<para indent="true">
            		<image src="GeneralLeastSquaresFit1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where 
            </term>
            			<description>
            				<format type="italics">a</format> represents the set of <paramref name="coefficients"/> and is defined as <image src="GeneralLeastSquaresFit2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> is the total number of functions.
            </description>
            		</item>
            	</list>
            	<para>
            Assume the data is generated using the relationship
            </para>
            	<para indent="true">
            		<image src="GeneralLeastSquaresFit3.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="GeneralLeastSquaresFit4a.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit4b.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit4c.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            noise is a random value.
            </description>
            		</item>
            	</list>
            	<para>
            Also, assume that you think the relationship between <format type="italics">x</format> and <format type="italics">y</format> is of the form
            </para>
            	<para indent="true">
            		<image src="GeneralLeastSquaresFit5.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="GeneralLeastSquaresFit6a.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6b.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6c.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6d.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6e.gif"/>
            			</description>
            		</item>
            	</list>
            To obtain <paramref name="coefficients"/>, you must supply the set of (<format type="italics">x,y</format>) points in the arrays <format type="italics">X</format> and <format type="italics">Y</format>, and you must also supply the basis function <paramref name="hMatrix"/>(<format type="italics">X,i</format>), which is a 2D array, to the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double@)"/> method.
            <para>
            For more information on this method, refer to <see keyword="LeastSquaresFitTheory" keywordType="mstudio">LeastSquaresFit Theory</see>.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>7/15/2005 10:21:01 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double[0:,0:]@,System.Double@)">
            <summary>
            Calculates the <format type="italics">k</format>-dimension linear curve values and the set of <format type="italics">k</format>-dimension linear fit coefficients, 
            which describe the <format type="italics">k</format>-dimension linear curve that best represents the input data set using the least-squares solution.
            </summary>
            <param name="hMatrix">
            The input matrix that represents the formula used to fit the data set {<format type="italics">X,Y</format>}. The number of rows 
            in <paramref name="hMatrix"/> must be greater than or equal to the number of columns.
            </param>
            <param name="inputYData">
            The array whose elements contain the <format type="italics">y</format> coordinates of the (<format type="italics">x,y</format>) data sets to be fitted.
            The number of elements in this array must be equal to the number of rows in <paramref name="hMatrix"/>.
            </param>
            <param name="standardDeviation">
            The array of standard deviations for each input data set. The number of elements in this array must be equal to the number of rows in <paramref name="hMatrix"/>.
            </param>
            <param name="algorithm">
            The algorithm to use in solving the multiple linear regression model. This parameter is specified using <see cref="T:NationalInstruments.Analysis.Math.BestFitAlgorithm"/>.
            </param>
            <param name="coefficients">
            Upon return, contains the set of linear coefficients that best fit the multiple linear regression model in a least-squares sense.
            </param>
            <param name="covariance">
            Upon return, contains the matrix of covariances <format type="italics">C</format> with <format type="italics">k</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">k</format> elements, where <format type="italics">k</format> is the number of columns. <format type="italics">C<format type="subscript">j</format></format><format type="italics">k</format> is the covariance between <format type="italics">a<format type="subscript">j</format></format> and <format type="italics">a<format type="subscript">k</format></format>. 
                <format type="italics">C<format type="subscript">jj</format></format> is the variance of <format type="italics">a<format type="subscript">j</format></format>,
            where  <format type="italics">a</format> represents <paramref name="coefficients"/>.
            </param>
            <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
            <returns>
            The best fitted curve.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            	<paramref name="hMatrix"/> is singular.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="hMatrix"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The number of samples in <paramref name="hMatrix"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of rows in <paramref name="hMatrix"/> is not the same size as <paramref name="inputYData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            Array size is less than the order (<paramref name="inputYData"/> size is less than number of columns in <paramref name="hMatrix"/>).
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    Order is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    Order is greater than 90.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            Invalid <paramref name="algorithm"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The following example demonstrates how to use the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double@)"/> method to obtain the set of least-square coefficients and the fitted values.
            <para>
            The purpose is to find the set of least-square coefficients that best represents the set of data points (<format type="italics">x,y</format>). The relationship between <format type="italics">x</format> and <format type="italics">y</format> is of the form
            </para>
            	<para indent="true">
            		<image src="GeneralLeastSquaresFit1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where 
            </term>
            			<description>
            				<format type="italics">a</format> represents the set of <paramref name="coefficients"/> and is defined as <image src="GeneralLeastSquaresFit2.gif"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> is the total number of functions.
            </description>
            		</item>
            	</list>
            	<para>
            Assume the data is generated using the relationship
            </para>
            	<para indent="true">
            		<image src="GeneralLeastSquaresFit3.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="GeneralLeastSquaresFit4a.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit4b.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit4c.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            noise is a random value.
            </description>
            		</item>
            	</list>
            	<para>
            Also, assume that you think the relationship between <format type="italics">x</format> and <format type="italics">y</format> is of the form
            </para>
            	<para indent="true">
            		<image src="GeneralLeastSquaresFit5.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<image src="GeneralLeastSquaresFit6a.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6b.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6c.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6d.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="GeneralLeastSquaresFit6e.gif"/>
            			</description>
            		</item>
            	</list>
            To obtain <paramref name="coefficients"/>, you must supply the set of (<format type="italics">x,y</format>) points in the arrays <format type="italics">X</format> and <format type="italics">Y</format>, and you must also supply the basis function <paramref name="hMatrix"/>(<format type="italics">X,i</format>), which is a 2D array, to the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.GeneralLeastSquaresFit(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.BestFitAlgorithm,System.Double[]@,System.Double@)"/> method.
            <para>
            For more information on this method, refer to <see keyword="LeastSquaresFitTheory" keywordType="mstudio">LeastSquaresFit Theory</see>.  
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the best fit linear curve based on observed data points using the GeneralLeastSquaresFit method and the singular value decomposition  (SVD) algorithm. The example also calculates the coefficients, covariance, and mean squared error. 
            	<code lang="VB.NET">
            Dim numSamples As Integer = 128
            Dim hMatrix(numSamples - 1, 4) As Double
            Dim xData(numSamples - 1) As Double
            Dim yData(numSamples - 1) As Double
            Dim fittedData() As Double
            Dim standardDeviation(numSamples - 1) As Double
            Dim coefficients() As Double = Nothing
            Dim covariance(,) As Double = Nothing
            Dim meanSquaredError As Double
             
            ' Generate the (xData, yData} pairs that are to be used as the observed 
            ' data.  In an actual experiment, these pairs would be recorded data such as 
            ' the temperature of a room at some time.  yData is calculated by the      
            ' equation yData = 2 * sine(xData^2) + 3 * cos(xData) + 4 /(xData + 1) 
             
            For i As Integer = 0 To xData.Length - 1
                xData(i) = i * 0.0671875 - 0.6
                yData(i) = 2 * Math.Sin(Math.Pow(xData(i), 2))
                yData(i) = yData(i) + 3 * Math.Cos(xData(i))
                yData(i) = yData(i) + 4 / (xData(i) + 1)
            Next
             
            ' Generating matrix, hMatrix that represents the formula used to fit the data set *(xData, YData}. 
            ' hMatrix(i)(j) are the function values of xData(i)
             
            For i As Integer = 0 To xData.Length - 1
                hMatrix(i, 0) = 1.0
                hMatrix(i, 1) = Math.Sin(Math.Pow(xData(i), 2))
                hMatrix(i, 2) = 3 * Math.Cos(xData(i))
                hMatrix(i, 3) = 1 / (xData(i) + 1)
                hMatrix(i, 4) = Math.Pow(xData(i), 2)
            Next
             
            For i As Integer = 0 To standardDeviation.Length - 1
                standardDeviation(i) = 1.0
            Next
             
            fittedData = CurveFit.GeneralLeastSquaresFit(hMatrix, yData, standardDeviation, BestFitAlgorithm.Svd, coefficients, covariance, meanSquaredError)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 128;
            double[,] hMatrix = new double[numSamples, 5];
            double[] xData = new double[numSamples];
            double[] yData = new double[numSamples];
            double[] fittedData;
            double[] standardDeviation = new double[numSamples];
            double[] coefficients;
            double[,] covariance;
            double meanSquaredError;
             
             
            // Generate the (xData, yData} pairs that are to be used as the observed 
            // data.  In an actual experiment, these pairs would be recorded data such as // the temperature of a room at some time.  yData is calculated by the      // equation yData = 2 * sine(xData^2) + 3 * cos(xData) + 4 /(xData + 1) 
            for (int i = 0; i &lt; xData.Length; i++)
            {
                xData[i] = i * 0.0671875 - 0.6;
                yData[i] = 2 * Math.Sin(Math.Pow(xData[i], 2));
                yData[i] = yData[i] + 3 * Math.Cos(xData[i]);
                yData[i] = yData[i] + 4 / (xData[i] + 1);
            }
             
            // Generating matrix, hMatrix that represents the formula used to fit the data set *(xData, YData}. 
            // hMatrix[i][j] are the function values of xData[i]
            for (int i = 0; i &lt; xData.Length; i++)
            {
                hMatrix[i, 0] = 1.0;
                hMatrix[i, 1] = Math.Sin(Math.Pow(xData[i], 2));
                hMatrix[i, 2] = 3 * Math.Cos(xData[i]);
                hMatrix[i, 3] = 1 / (xData[i] + 1);
                hMatrix[i, 4] = Math.Pow(xData[i], 2);
            }
            for (int i = 0; i &lt; standardDeviation.Length; i++)
                standardDeviation[i] = 1.0;
             
            fittedData = CurveFit.GeneralLeastSquaresFit(hMatrix, yData, standardDeviation, BestFitAlgorithm.Svd, out coefficients, out covariance, out meanSquaredError);
             
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/8/2008 4:11:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GoodnessOfFit(System.Double[],System.Double[],System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Describes how well a fitted model matches the original data set and calculates three parameters, including  
            summation of square, rSquare, and the root mean square error. This method uses the default value 
            for the degrees of freedom.
            </summary>
            <param name="inputObservations">
            The input observations.
            </param>
            <param name="fittedData">
            The calculated value of the best fit. 
            </param>
            <param name="weight">
            The weight of the input observations.
            </param>
            <param name="sse">
            Upon return, contains the summation of square error. The smaller the <paramref name="sse"/>, the better the fit.
            </param>
            <param name="rSquare">
            Upon return, contains the normalized parameter to measure the goodness of fit. The closer that <paramref name="rSquare"/> is to 1, the better the fit.
            </param>
            <param name="rmsError">
            Upon return, contains the root mean square error. The smaller the <paramref name="rmsError"/>, the better the fit.
            </param>
            <remarks>
            This method assumes the degree of freedom is the number of elements in <paramref name="inputObservations"/> minus 2.
            <para>
            This method uses the following calculations:
            </para>
            	<para indent="true">
            		<image src="GoodnessOfFitform_8.png"/>
            	</para>
            	<para indent="true">
            		<image src="GoodnessOfFitform_9.png"/>
            	</para>
            where <image src="GoodnessOfFitform_10.png"/> is the mean value of  <paramref name="inputObservations"/>.
            <para indent="true">
            		<image src="GoodnessOfFitform_11.png"/>
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputObservations"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="fittedData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="weight"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputObservations"/>, <paramref name="fittedData"/>, and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 3:54:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GoodnessOfFit(System.Double[],System.Double[],System.Double[],System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Describes how well a fitted model matches the original data set and calculates three parameters, including 
            summation of square, rSquare, and root mean square error.
            </summary>
            <param name="inputObservations">
            The input observations.
            </param>
            <param name="fittedData">
            The calculated value of the best fit. 
            </param>
            <param name="weight">
            The weight of the input observations.
            </param>
            <param name="degreeOfFreedom">
            The degree of freedom, which is defined as number of elements in the <paramref name="inputObservations"/> 
            minus the number of coefficients in the fitted model. If <paramref name="degreeOfFreedom"/> is negative 
            or zero, the method sets <paramref name="degreeOfFreedom"/> to number of elements <entity value="ndash"/> 2.
            </param>
            <param name="sse">
            Upon return, contains the summation of square error. The smaller the <paramref name="sse"/>, the better the fit.
            </param>
            <param name="rSquare">
            Upon return, contains the normalized parameter to measure the goodness of fit. The closer that <paramref name="rSquare"/> is to 1, the better the fit.
            </param>
            <param name="rmsError">
            Upon return, contains the root mean square error. The smaller the <paramref name="rmsError"/>, the better the fit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputObservations"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="fittedData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="weight"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputObservations"/>, <paramref name="fittedData"/>, and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method uses the following calculations:
            <para indent="true">
            		<image src="GoodnessOfFitform_8.png"/>
            	</para>
            	<para indent="true">
            		<image src="GoodnessOfFitform_9.png"/>
            	</para>
            where <image src="GoodnessOfFitform_10.png"/> is the mean value of  <paramref name="inputObservations"/>.
            <para indent="true">
            		<image src="GoodnessOfFitform_11.png"/>
            	</para>
            </remarks>
            <example>
            The following example calculates summation of square, rSquare, and root mean square error. These calculations describe how well a fitted model matches the original data set, inputObservations.
            <code lang="VB.NET">
            Dim numSamples As Integer = 50
            Dim degreeofFreedom As Integer
            Dim xData(numSamples - 1) As Double
            Dim inputObservations(numSamples - 1) As Double
            Dim fittedData(numSamples - 1) As Double
            Dim noise() As Double
            Dim weight(numSamples - 1) As Double
            Dim sse, rSquare, rmsError, a, b As Double
             
            ' Generate xData
            For i As Integer = 0 To xData.Length - 1
                xData(i) = i
            Next
             
            a = 1.0
            b = 0.1
             
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            For i As Integer = 0 To inputObservations.Length - 1
                ' Generate inputObservations by applying model: inputObservations = a * exp(xData * b) + noise
                inputObservations(i) = (a * Math.Exp(xData(i) * b)) + noise(i)
             
                fittedData(i) = inputObservations(i) + 0.2
                weight(i) = 1
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            degreeofFreedom = 0
             
            ' Calculates three statistical parameters, sse, rSquare, and rmsError, that describe how well the fittedData matches inputObservations
            CurveFit.GoodnessOfFit(inputObservations, fittedData, weight, degreeofFreedom, sse, rSquare, rmsError)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 50;
            int degreeOfFreedom;
            double[] xData = new double[numSamples];
            double[] inputObservations = new double[numSamples];
            double[] fittedData = new double[numSamples];
            double[] noise;
            double[] weight = new double[numSamples];
            double sse, rSquare, rmsError, a, b;
             
            // Generate xData
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = i;
             
            a = 1.0;
            b = 0.1;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            for (int i = 0; i &lt; inputObservations.Length; i++)
            {
                // Generate inputObservations by applying model: inputObservations = a * exp(xData * b) + noise
                inputObservations[i] = (a * Math.Exp(xData[i] * b)) + noise[i];
                
                fittedData[i] = inputObservations[i] + 0.2;
                weight[i] = 1;
            }
             
            degreeOfFreedom = 0;
             
            // Calculates three statistical parameters, sse, rSquare, and rmsError, that describe how well the fittedData matches inputObservations
            CurveFit.GoodnessOfFit(inputObservations, fittedData, weight, degreeOfFreedom, out sse, out rSquare, out rmsError);
             
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>11/4/2008 1:03:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.CubicSplineFit(System.Double[],System.Double[],System.Double)">
            <summary>
            Uses the cubic spline fitting model to fit the data set (x,y) with all weights and smoothness assumed to be 1.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). <paramref name="inputXData"/> must be in ascending order.
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="balance">
             If balance = 0, this method is the linear fitting. If balance = 1, this method is the spline interpolation. If balance is out of the range [0,1], this method automatically calculates a proper value for balance.
            </param>
            <returns>
            The fitted data using the cubic spline fitting model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method fits the data set (x,y) by minimizing 
            <para indent="true">
            		<image src="CubicSplineFitform_16.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>where</term>
            			<description><image src="CubicSplineFitform_1.png"/> is the cubic spline function, and</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description><image src="CubicSplineFitform_17.png"/>, for <image src="CubicSplineFitform_3.png"/></description>
            		</item>
            	</list>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/2/2005 12:29:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.CubicSplineFit(System.Double[],System.Double[],System.Double,System.Double[])">
            <summary>
            Uses the cubic spline fitting model to fit the data set (x,y) with all weights assumed to be 1.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). <paramref name="inputXData"/> must be in ascending order.
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="balance">
             If balance = 0, this method is the linear fitting. If balance = 1, this method is the spline interpolation. If balance is out of the range [0,1], this method automatically calculates a proper value for balance.
            </param>
            <param name="smoothness">
            The smoothness for each interval between two contiguous data points. The larger the smoothness, the smoother the curve. 
            </param>
            <returns>
            The fitted data using the cubic spline fitting model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method fits the data set (x,y) by minimizing 
            <para indent="true">
            		<image src="CubicSplineFitform_16.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>where</term>
            			<description><image src="CubicSplineFitform_1.png"/> is the cubic spline function, and</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description><image src="CubicSplineFitform_17.png"/>, for <image src="CubicSplineFitform_3.png"/></description>
            		</item>
            	</list>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/2/2005 12:31:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.CubicSplineFit(System.Double[],System.Double[],System.Double,System.Double[],System.Double[])">
            <summary>
            Uses the cubic spline fitting model to fit the data set (x,y).
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). <paramref name="inputXData"/> must be in ascending order.
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="balance">
             If balance = 0, this method is the linear fitting. If balance = 1, this method is the spline interpolation. If balance is out of the range [0,1], this method automatically calculates a proper value for balance.
            </param>
            <param name="smoothness">
            The smoothness for each interval between two contiguous data points. The larger the smoothness, the smoother the curve. 
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <returns>
            The fitted data using the cubic spline fitting model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/> and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method fits the data set (x,y) by minimizing 
            <para indent="true">
            		<image src="CubicSplineFitform_16.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>where</term>
            			<description><image src="CubicSplineFitform_1.png"/> is the cubic spline function, and</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description><image src="CubicSplineFitform_17.png"/>, for <image src="CubicSplineFitform_3.png"/></description>
            		</item>
            	</list>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Dim numSamples As Integer = 50
            Dim xData(numSamples - 1) As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim smoothness(numSamples - 1) As Double
            Dim fittedData() As Double
            Dim noise() As Double
            Dim a, b, balance As Double
             
            ' Generate xData of the input data set {xData, yData}
            For i As Integer = 0 To xData.Length - 1
                xData(i) = i
            Next
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 0.1
             
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * x + b + noise 
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (a * xData(i)) + b + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
                smoothness(i) = 1.0
            Next
             
            balance = 0.0
             
            ' Calculate cubic spline fit of the data set {xData, yData}
            fittedData = CurveFit.CubicSplineFit(xData, yData, balance, smoothness, weight)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 50;
            double[] xData = new double[numSamples];
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] smoothness = new double[numSamples];
            double[] fittedData;
            double[] noise;
            double a, b, balance;
             
            // Generate xData of the input data set {xData, yData}
            for (int i = 0; i &lt;  xData.Length; i++)
                xData[i] = i;
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 0.1;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * x + b + noise
            for (int i = 0; i &lt;  yData.Length; i++)
                yData[i] = (a * xData[i]) + b + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
            {
                weight[i] = 1.0; ;
                smoothness[i] = 1.0;
            }
             
            balance = 0.0;
             
            // Calculate cubic spline fit of the data set {xData, yData}
            fittedData = CurveFit.CubicSplineFit(xData, yData, balance, smoothness, weight);
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/8/2008 1:41:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.CubicSplineFitInPlace(System.Double[],System.Double[],System.Double)">
            <summary>
            Uses the cubic spline fitting model to fit the data set (x,y) with all weights and smoothness assumed to be 1.
            The fitted data is computed in place.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). <paramref name="inputXData"/> must be in ascending order.
            </param>
            <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data using the cubic spline fitting model.
            </param>
            <param name="balance">
             If balance = 0, this method is the linear fitting. If balance = 1, this method is the spline interpolation. If balance is out of the range [0,1], this method automatically calculates a proper value for balance.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method fits the data set (x,y) by minimizing 
            <para indent="true">
            		<image src="CubicSplineFitform_16.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>where</term>
            			<description><image src="CubicSplineFitform_1.png"/> is the cubic spline function, and</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description><image src="CubicSplineFitform_17.png"/>, for <image src="CubicSplineFitform_3.png"/></description>
            		</item>
            	</list>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/2/2005 1:14:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.CubicSplineFitInPlace(System.Double[],System.Double[],System.Double,System.Double[])">
            <summary>
            Uses the cubic spline fitting model to fit the data set (x,y) with all weights assumed to be 1. The fitted data is computed in place.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). <paramref name="inputXData"/> must be in ascending order.
            </param>
            <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data using the cubic spline fitting model.
            </param>
            <param name="balance">
             If balance = 0, this method is the linear fitting. If balance = 1, this method is the spline interpolation. If balance is out of the range [0,1], this method automatically calculates a proper value for balance.
            </param>
            <param name="smoothness">
            The smoothness for each interval between two contiguous data points. The larger the smoothness, the smoother the curve. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method fits the data set (x,y) by minimizing 
            <para indent="true">
            		<image src="CubicSplineFitform_16.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>where</term>
            			<description><image src="CubicSplineFitform_1.png"/> is the cubic spline function, and</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description><image src="CubicSplineFitform_17.png"/>, for <image src="CubicSplineFitform_3.png"/></description>
            		</item>
            	</list>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/2/2005 1:16:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.CubicSplineFitInPlace(System.Double[],System.Double[],System.Double,System.Double[],System.Double[])">
            <summary>
            Uses the cubic spline fitting model to fit the data set (x,y). The fitted data is computed in place.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). <paramref name="inputXData"/> must be in ascending order.
            </param>
            <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data using the cubic spline fitting model.
            </param>
            <param name="balance">
             If balance = 0, this method is the linear fitting. If balance = 1, this method is the spline interpolation. If balance is out of the range [0,1], this method automatically calculates a proper value for balance.
            </param>
            <param name="smoothness">
            The smoothness for each interval between two contiguous data points. The larger the smoothness, the smoother the curve. 
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method fits the data set (x,y) by minimizing 
            <para indent="true">
            		<image src="CubicSplineFitform_16.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>where</term>
            			<description><image src="CubicSplineFitform_1.png"/> is the cubic spline function, and</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description><image src="CubicSplineFitform_17.png"/>, for <image src="CubicSplineFitform_3.png"/></description>
            		</item>
            	</list>
            </remarks>
            <example>
            The following example uses cubic spline fitting to fit the data set {xData, yData}.
            <code lang="VB">
            Dim numSamples As Integer = 50
            Dim xData(numSamples - 1) As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim smoothness(numSamples - 1) As Double
            Dim noise() As Double
            Dim a, b, balance As Double
             
            ' Generate xData of the input data set {xData, yData}
            For i As Integer = 0 To xData.Length - 1
                xData(i) = i
            Next
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 0.1
             
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * x + b + noise 
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (a * xData(i)) + b + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
                smoothness(i) = 1.0
            Next
             
            balance = 0.0
             
            ' Calculate cubic spline fit of the data set {xData, yData}. This operation is performed in place.
            CurveFit.CubicSplineFitInPlace(xData, yData, balance, smoothness, weight)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 50;
            double[] xData = new double[numSamples];
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] smoothness = new double[numSamples];
            double[] noise;
            double a, b, balance;
             
            // Generate xData of the input data set {xData, yData}
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = i;
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 0.1;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * x + b + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = (a * xData[i]) + b + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
            {
                weight[i] = 1.0; ;
                smoothness[i] = 1.0;
            }
             
            balance = 0.0;
             
            // Calculate cubic spline fit of the data set {xData, yData}. This operation is performed in place.
            CurveFit.CubicSplineFitInPlace(xData, yData, balance, smoothness, weight);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>3/20/2008 11:52:41 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[])">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square method and using a default value for tolerance and weight. This operation is performed in place and only the fitted data is returned.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
            <remarks>
            This method uses the <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/> fit method. It assumes a default tolerance of 0.0001 and that all the weights are equal to 1.
            <para>
            The following equation represents the exponential model:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_6.png"/>
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/2/2005 5:01:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method and using a default value for tolerance and weight. This operation is performed in place and only the fitted data is returned.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <remarks>
            This method uses a default tolerance of 0.0001 and assumes all weights are 1.
            <para>
            The following equation represents the exponential model:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_6.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and damping of the exponential model by minimizing the residue as follows:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and damping of the exponential model by minimizing the residue as follows: 
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and damping of the exponential model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/2/2005 5:02:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method and using a default value for tolerance. This operation is performed in place and only the fitted data is returned.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <remarks>
            This method uses a default tolerance of 0.0001.
            <para>
            The following equation represents the exponential model:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_6.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and damping of the exponential model by minimizing the residue as follows:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and damping of the exponential model by minimizing the residue as follows: 
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and damping of the exponential model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/2/2005 5:04:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method. This operation is performed in place and only the fitted data is returned.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the amplitude and damping iteratively. 
            If the relative difference of residue in two successive iterations is less than <paramref name="tolerance"/>, 
            the method returns the resulting amplitude and damping. If <paramref name="tolerance"/> is less 
            than or equal to 0, the method sets the <paramref name="tolerance"/> to 0.0001.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the exponential model:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_6.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and damping of the exponential model by minimizing the residue as follows:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and damping of the exponential model by minimizing the residue as follows: 
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and damping of the exponential model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/2/2005 5:09:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method and using a default value for tolerance and weight. This operation is performed in place.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted exponential model.
            </param>
            <param name="damping">
            Upon return, contains the damping of the fitted exponential model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the exponential fit. 
            </param>
            <remarks>
            This method uses a default tolerance of 0.0001 and it assumes that all the weights are 1.
                <para>
            The following equation represents the exponential model:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_6.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> are not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/2/2005 5:15:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method and using a default value for tolerance. This operation is performed in place.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted exponential model.
            </param>
            <param name="damping">
            Upon return, contains the damping of the fitted exponential model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the exponential fit. 
            </param>
            <remarks>
            This method uses a default tolerance of 0.0001.
                <para>
            The following equation represents the exponential model:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_6.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/2/2005 5:13:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the exponential model using the Least Square, Least Absolute Residual, or Bisquare method. This operation is performed in place.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="yData">
            On input, contains the y value of the input data set (x,y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. The method adjusts the <paramref name="amplitude"/> and <paramref name="damping"/> 
            iteratively. If the relative difference of residue in two successive iterations is less than 
            <paramref name="tolerance"/>, the method returns the resulting <paramref name="amplitude"/> and 
            <paramref name="damping"/>. If <paramref name="tolerance"/> is less than or equal to 0, the 
            method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted exponential model.
            </param>
            <param name="damping">
            Upon return, contains the damping of the fitted exponential model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the exponential fit. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the exponential model:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_6.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="ExpFitExform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="damping"/> of the exponential model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <example>
            The following example generates a set of exponential data according to the model: <format type="monospace">y = a * exp(b * x) + noise</format>. Then, the example fits the data against the exponential model using the Least Square method.  
            <code lang="VB.NET">
            Dim numSamples As Integer = 50
            Dim xData(numSamples - 1) As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise() As Double
            Dim amplitude, damping, residue, tolerance, a, b As Double
             
            ' Generate xData of the input data set {xData, yData}
            For i As Integer = 0 To xData.Length - 1
                xData(i) = i
            Next
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 0.1
             
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * exp(xData * b) + noise 
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (a * Math.Exp(xData(i) * b)) + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Calculate exponential fit of the data set {xData, yData}. The operation is performed in place.
            CurveFit.ExponentialFitInPlace(xData, yData, FitMethod.LeastSquare, weight, tolerance, amplitude, damping, residue)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 50;
            double[] xData = new double[numSamples];
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise;
            double amplitude, damping, residue, tolerance, a, b;
             
            // Generate xData of the input data set {xData, yData}
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = i;
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 0.1;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * exp(xData * b) + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = (a * Math.Exp(xData[i] * b)) + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
             
            // Calculate exponential fit of the data set {xData, yData}. The operation is performed in place.
            CurveFit.ExponentialFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, out amplitude, out damping, out residue);
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:02:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[])">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square method and using default values for 
            tolerance and weight. This method returns only the fitted data and calculates the initial estimates 
            for amplitude, center, and standard deviation.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <returns>
            The fitted data using the Gaussian model.
            </returns>
            <remarks>This method assumes all weights are 1.
            <para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            amplitude, center, and standard deviation of the Gaussian model by minimizing the residue as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude, center, and standard deviation by minimizing the residue as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds amplitude, center, and standard deviation by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:33:04 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method and using default values for 
            tolerance and weight. This method returns only the fitted data and calculates the initial estimates for amplitude,
            center, and standard deviation.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <returns>
            The fitted data using the Gaussian model.
            </returns>
            <remarks>This method assumes all weights are 1 and uses a tolerance of 0.0001.
            <para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            amplitude, center, and standard deviation of the Gaussian model by minimizing the residue as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude, center, and standard deviation by minimizing the residue as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds amplitude, center, and standard deviation by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:34:51 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method. 
            This method uses a default value for tolerance and returns only the fitted data. The method calculates the initial estimates for amplitude, center, and standard deviation.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <returns>
            The fitted data using the Gaussian model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            amplitude, center, and standard deviation of the Gaussian model by minimizing the residue as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude, center, and standard deviation by minimizing the residue as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds amplitude, center, and standard deviation by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/6/2005 10:49:14 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or 
            Bisquare method. This method returns only the fitted data and calculates the initial estimates for 
            amplitude, center, and standard deviation.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the amplitude, center, and standard deviation iteratively. 
            If the relative difference of residue in two successive iterations is less 
            than <paramref name="tolerance"/>, the method returns the resulting amplitude, center, and standard deviation. 
            If <paramref name="tolerance"/> is less than or equal to 0, the method sets 
            <paramref name="tolerance"/> to 0.0001.
            </param>
            <returns>
            The fitted data using the Gaussian model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            amplitude, center, and standard deviation of the Gaussian model by minimizing the residue as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude, center, and standard deviation by minimizing the residue as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds amplitude, center, and standard deviation by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:26:39 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, 
            or Bisquare method. This method calculates the initial estimate for the amplitude, center, and 
            standard deviation.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> iteratively. 
            If the relative difference of <paramref name="residue"/> in two successive iterations is less 
            than <paramref name="tolerance"/>, the method returns the resulting <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/>. 
            If <paramref name="tolerance"/> is less than or equal to 0, the method sets 
            <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
            <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
            <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
            <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
            <returns>
            The fitted data using the Gaussian model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>,  
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            of the Gaussian model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 10:51:30 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using default values for tolerance and weight.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="initialAmplitude">
            The initial estimate of amplitude.
            </param>
            <param name="initialCenter">
            The initial estimate of center.
            </param>
            <param name="initialStandardDeviation">
            The initial estimate of standard deviation.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
            <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
            <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
            <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
            <returns>
            The fitted data using the Gaussian model.
            </returns>
            <remarks>This method uses a default tolerance of 0.0001. This method assumes all weights are 1.
            <para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            of the Gaussian model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/6/2005 10:46:40 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using default values for weight.
            </summary>
            <param name="inputXData">
            The x value of data set (x,y).
            </param>
            <param name="inputYData">
            The y value of data set (x,y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> iteratively. 
            If the relative difference of <paramref name="residue"/> in two successive iterations is less 
            than <paramref name="tolerance"/>, the method returns the resulting <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/>. 
            If <paramref name="tolerance"/> is less than or equal to 0, the method sets 
            <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="initialAmplitude">
            The initial estimate of amplitude.
            </param>
            <param name="initialCenter">
            The initial estimate of center.
            </param>
            <param name="initialStandardDeviation">
            The initial estimate of standard deviation.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
            <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
            <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
            <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
            <returns>
            The fitted data using the Gaussian model.
            </returns>
            <remarks>This method assumes all weights are 1.
            <para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            of the Gaussian model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 12:27:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> iteratively. 
            If the relative difference of <paramref name="residue"/> in two successive iterations is less 
            than <paramref name="tolerance"/>, the method returns the resulting <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/>. 
            If <paramref name="tolerance"/> is less than or equal to 0, the method sets 
            <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="initialAmplitude">
            The initial estimate of amplitude.
            </param>
            <param name="initialCenter">
            The initial estimate of center.
            </param>
            <param name="initialStandardDeviation">
            The initial estimate of standard deviation.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
            <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
            <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
            <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
            <returns>
            The fitted data using the Gaussian model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            of the Gaussian model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <example>
            The following example fits the data set {xData, yData} to the Gaussian model using the Least Square fit method. Then, the example calculates the initial estimate for the amplitude, center, and standard deviation.  
            <code lang="VB.NET">
            Dim numSamples As Integer = 100
            Dim xData(numSamples - 1) As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim initialAmplitude, initialCenter, initialStandardDeviation As Double
            Dim tolerance, amplitude, center, standardDeviation, residue As Double
             
            ' Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 7.0)
             
            ' Generate yData of the input data set {xData, yData}
            Dim gaussSignal As New GaussianNoiseSignal(0.1)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            For i As Integer = 0 To yData.Length - 1
                yData(i) = Math.Pow((xData(i) - 3.5), 2)
                yData(i) = (yData(i) / (Math.Pow(0.5, 2) * 2)) * -1
                yData(i) = Math.Exp(yData(i)) * 5
                yData(i) = noise(i) + yData(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
            initialAmplitude = 1.5
            initialCenter = 0.8
            initialStandardDeviation = 0.4
             
            ' Calculate Gaussian fit of the data set {xData, yData}
            fittedData = CurveFit.GaussianFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, initialAmplitude, initialCenter, initialStandardDeviation, amplitude, center, standardDeviation, residue)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 100;
            double[] xData = new double[numSamples];
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double initialAmplitude, initialCenter, initialStandardDeviation;
            double tolerance, amplitude, center, standardDeviation, residue;
             
            // Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 7.0);
             
            // Generate yData of the input data set {xData, yData}
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.1);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            for (int i = 0; i &lt; yData.Length; i++)
            {
                yData[i] = Math.Pow((xData[i] - 3.5), 2);
                yData[i] = (yData[i] / (Math.Pow(0.5, 2) * 2)) * -1;
                yData[i] = Math.Exp(yData[i]) * 5;
                yData[i] = noise[i] + yData[i];
            }
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
            initialAmplitude = 1.5;
            initialCenter = 0.8;
            initialStandardDeviation = 0.4;
             
            // Calculate Gaussian fit of the data set {xData, yData}
            fittedData = CurveFit.GaussianFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, initialAmplitude, initialCenter, initialStandardDeviation, out amplitude, out center, out standardDeviation, out residue);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:03:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[])">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square method. The operation is 
            performed in place and only the fitted data is returned. The method uses default values for tolerance 
            and weight, and calculates the initial estimates for amplitude, center, and standard deviation.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
            <remarks>
            This method uses the <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/> fit method. It assumes a default tolerance of 0.0001 and that all the weights are equal to 1.
            <para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            amplitude, center, and standard deviation of the Gaussian model by minimizing the residue as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 12:33:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The operation is performed in place and only the fitted data is returned. The 
            method uses default values for tolerance and weight, and calculates the initial estimates for 
            amplitude, center, and standard deviation.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <remarks>
            This method uses a default tolerance of 0.0001 and assumes that all the weights are 1.
                <para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            amplitude, center, and standard deviation of the Gaussian model by minimizing the residue as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude, center, and standard deviation by minimizing the residue as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds amplitude, center, and standard deviation by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 12:35:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method. The operation is performed in place using the default value for tolerance and only the fitted data is returned.
            The method calculates the initial estimates for amplitude, center, and standard deviation.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <remarks>
            This method uses a default tolerance of 0.0001.
                <para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            amplitude, center, and standard deviation of the Gaussian model by minimizing the residue as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude, center, and standard deviation by minimizing the residue as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds amplitude, center, and standard deviation by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 12:44:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method. The operation is performed in place and only the fitted data is returned.
            The method calculates the initial estimates for amplitude, center, and standard deviation.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the amplitude, center, and standard deviation iteratively. 
            If the relative difference of residue in two successive iterations is less 
            than <paramref name="tolerance"/>, the method returns the resulting amplitude, center, and standard deviation. 
            If <paramref name="tolerance"/> is less than or equal to 0, the method sets 
            <paramref name="tolerance"/> to 0.0001.
            </param>
            <remarks>
            	<para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            amplitude, center, and standard deviation of the Gaussian model by minimizing the residue as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude, center, and standard deviation by minimizing the residue as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds amplitude, center, and standard deviation by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:27:28 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The operation is performed in place, and this method calculates the initial estimate 
            for the amplitude, center, and standard deviation.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> iteratively. 
            If the relative difference of <paramref name="residue"/> in two successive iterations is less 
            than <paramref name="tolerance"/>, the method returns the resulting <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/>. 
            If <paramref name="tolerance"/> is less than or equal to 0, the method sets 
            <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
            <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
            <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
            <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            of the Gaussian model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 10:53:08 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method. The operation is performed in place using default values for tolerance and weight.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="initialAmplitude">
            The initial estimate of amplitude.
            </param>
            <param name="initialCenter">
            The initial estimate of center.
            </param>
            <param name="initialStandardDeviation">
            The initial estimate of standard deviation.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
            <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
            <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
            <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
            <remarks>
            This method uses a default tolerance of 0.0001 and assumes that all the weights are 1.
            <para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            of the Gaussian model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 12:38:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method. The operation is performed in place.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> iteratively. 
            If the relative difference of <paramref name="residue"/> in two successive iterations is less 
            than <paramref name="tolerance"/>, the method returns the resulting <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/>. 
            If <paramref name="tolerance"/> is less than or equal to 0, the method sets 
            <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="initialAmplitude">
            The initial estimate of amplitude.
            </param>
            <param name="initialCenter">
            The initial estimate of center.
            </param>
            <param name="initialStandardDeviation">
            The initial estimate of standard deviation.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
            <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
            <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
            <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            of the Gaussian model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <example>
            The following example fits the data set {xData, yData} to the Gaussian model using the Least Square fit method. Then, the example calculates the initial estimate for the amplitude, center, and standard deviation. The fitted data is computed in place.
            <code lang="VB.NET">
            Dim numSamples As Integer = 100
            Dim xData() As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise() As Double
            Dim initialAmplitude, initialCenter, initialStandardDeviation As Double
            Dim tolerance, amplitude, center, standardDeviation, residue As Double
             
            ' Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 7.0)
             
            ' Generate yData of the input data set {xData, yData}
            Dim gaussSignal As New GaussianNoiseSignal(0.1)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            For i As Integer = 0 To yData.Length - 1
                yData(i) = Math.Pow((xData(i) - 3.5), 2)
                yData(i) = (yData(i) / (Math.Pow(0.5, 2) * 2)) * -1
                yData(i) = Math.Exp(yData(i)) * 5
                yData(i) = noise(i) + yData(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
            initialAmplitude = 1.5
            initialCenter = 0.8
            initialStandardDeviation = 0.4
             
            ' Calculate Gaussian fit of the data set {xData, yData}. This operation is performed in place.
            CurveFit.GaussianFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, initialAmplitude, initialCenter, initialStandardDeviation, amplitude, center, standardDeviation, residue)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 100;
            double[] xData;
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise;
            double initialAmplitude, initialCenter, initialStandardDeviation;
            double tolerance, amplitude, center, standardDeviation, residue;
             
            // Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 7.0);
             
            // Generate yData of the input data set {xData, yData} 
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.1);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            for (int i = 0; i &lt; yData.Length; i++)
            {
                yData[i] = Math.Pow((xData[i] - 3.5), 2);
                yData[i] = (yData[i] / (Math.Pow(0.5, 2) * 2)) * -1;
                yData[i] = Math.Exp(yData[i]) * 5;
                yData[i] = noise[i] + yData[i];
            }
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
            initialAmplitude = 1.5;
            initialCenter = 0.8;
            initialStandardDeviation = 0.4;
             
            // Calculate Gaussian fit of the data set {xData, yData}. The operation is performed in place.
            CurveFit.GaussianFitInPlace(xData, yData, FitMethod.LeastSquare, weight, tolerance, initialAmplitude, initialCenter, initialStandardDeviation, out amplitude, out center, out standardDeviation, out residue);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:05:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the Gaussian model using the Least Square, Least Absolute Residual, or Bisquare method. The operation is performed in place and uses a default value for tolerance.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="initialAmplitude">
            The initial estimate of amplitude.
            </param>
            <param name="initialCenter">
            The initial estimate of center.
            </param>
            <param name="initialStandardDeviation">
            The initial estimate of standard deviation.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted Gaussian model.
            </param>
            <param name="center">
            Upon return, contains the center of the fitted Gaussian model.</param>
            <param name="standardDeviation">
            Upon return, contains the standard deviation of the fitted Gaussian model.</param>
            <param name="residue">
            Upon return, contains the weighted mean error of the Gaussian fit.
            </param>
            <remarks>This method uses a default tolerance of 0.0001.
                <para>
            The following equation represents the Gaussian model: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_7.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the 
            <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            of the Gaussian model by minimizing the <paramref name="residue"/> as follows:
            </para>
            	<para indent="true">
            		<image src="GaussFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by minimizing the <paramref name="residue"/> as follows: 
            </para>
            	<para indent="true">
            		<image src="GaussFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method 
            finds <paramref name="amplitude"/>, <paramref name="center"/>, and <paramref name="standardDeviation"/> 
            by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 3:12:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[])">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square method and using default values for tolerance and weight. The method performs this 
            operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
            <remarks>
            This method uses the <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/> fit method. It uses a tolerance of 0.0001 and assumes that all weights are equal to 1.
            <para>
            The following equation represents the linear model: 
            </para>
            	<para indent="true">
            		<image src="LinearFitExform_12.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">f</format> represents the fitted data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the slope,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the intercept.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 5:01:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight. The method performs this 
            operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <remarks>
            This method uses a tolerance of 0.0001 and assumes that all weights are equal to 1.
            <para>
            The following equation represents the linear model: 
            </para>
            	<para indent="true">
            		<image src="LinearFitExform_12.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">f</format> represents the fitted data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the slope,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the intercept.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 5:01:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method performs this 
            operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <remarks>
            This method uses a tolerance of 0.0001.
            <para>
            The following equation represents the linear model: 
            </para>
            	<para indent="true">
            		<image src="LinearFitExform_12.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">f</format> represents the fitted data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the slope,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the intercept.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, 
            and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 5:01:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method performs this 
            operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the slope and intercept iteratively. If the relative 
            difference of residue in two successive iterations is less than <paramref name="tolerance"/>, the 
            method returns the resulting slope and intercept. If <paramref name="tolerance"/> is less than or 
            equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <remarks>
            This method uses a tolerance of 0.0001 and assumes that all weights are equal to 1.
            <para>
            The following equation represents the linear model: 
            </para>
            	<para indent="true">
            		<image src="LinearFitExform_12.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">f</format> represents the fitted data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the slope,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the intercept.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, 
            and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:18:18 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight. The method performs this operation in place.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="slope">
            Upon return, contains the slope of the fitted linear model.
            </param>
            <param name="intercept">
            Upon return, contains the intercept of the fitted linear model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the linear fit.
            </param>
            <remarks>
            This method uses a tolerance of 0.0001 and assumes that all weights are equal to 1.
                <para>
            The following equation represents the linear model: 
            </para>
            	<para indent="true">
            		<image src="LinearFitExform_12.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">f</format> represents the fitted data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the <paramref name="slope"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the <paramref name="intercept"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 5:08:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method performs this operation in place.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="slope">
            Upon return, contains the slope of the fitted linear model.
            </param>
            <param name="intercept">
            Upon return, contains the intercept of the fitted linear model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the linear fit.
            </param>
            <remarks>
            This method uses a tolerance of 0.0001.
                <para>
            The following equation represents the linear model: 
            </para>
            	<para indent="true">
            		<image src="LinearFitExform_12.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">f</format> represents the fitted data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the <paramref name="slope"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the <paramref name="intercept"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, 
            and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 5:07:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the linear model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method performs this operation in place.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data, calculated using the fitted linear model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the <paramref name="slope"/> and <paramref name="intercept"/> iteratively. If the relative 
            difference of <paramref name="residue"/> in two successive iterations is less than <paramref name="tolerance"/>, the 
            method returns the resulting <paramref name="slope"/> and <paramref name="intercept"/>. If <paramref name="tolerance"/> is less than or 
            equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="slope">
            Upon return, contains the slope of the fitted linear model.
            </param>
            <param name="intercept">
            Upon return, contains the intercept of the fitted linear model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the linear fit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, 
            and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the linear model: 
            </para>
            	<para indent="true">
            		<image src="LinearFitExform_12.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">f</format> represents the fitted data, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the <paramref name="slope"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format> represents <paramref name="inputXData"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the <paramref name="intercept"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <example>
            The following example generates a set of linear data according to the model: y = a * x + b + noise. Then, the example fits the data against the linear model using the Least Square method.  
            <code lang="VB.NET">
            Dim numSamples As Integer = 100
            Dim xData(numSamples - 1) As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise() As Double
            Dim slope, intercept, residue, tolerance, a, b As Double
             
            '  Generate xData of the input data set {xData, yData}
            For i As Integer = 0 To xData.Length - 1
                xData(i) = i
            Next
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 0.1
             
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * x + b + noise 
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (a * xData(i)) + b + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Calculate linear fit of the data set {xData, yData}. This operation is performed in place.
            CurveFit.LinearFitInPlace(xData, yData, FitMethod.LeastSquare, weight, tolerance, slope, intercept, residue)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 100;
            double[] xData = new double[numSamples];
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise;
            double slope, intercept, residue, tolerance, a, b;
             
            // Generate xData of the input data set {xData, yData}
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = i;
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 0.1;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * x + b + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = (a * xData[i]) + b + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
             
            // Calculate linear fit of the data set {xData, yData}. This operation is performed in place. 
            CurveFit.LinearFitInPlace(xData, yData, FitMethod.LeastSquare, weight, tolerance, out slope, out intercept, out residue);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:15:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[])">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square method and using the 
            natural logarithm and default values for tolerance and weight. This method returns only the fitted 
            data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
            <remarks>
            This method uses the <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/> fit 
            method and the natural logarithm. It assumes a default tolerance of 0.0001 and that all the 
            weights are equal to 1.
            <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents scale, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents the logarithmic base.
            </description>
            		</item>
            	</list>
            	<para>
            If <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 5:18:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using the natural logarithm and default values for tolerance and weight. 
            This method returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
            <remarks>
            This method uses the natural logarithm. It uses a tolerance of 0.0001 and assumes that all the weights are equal to 1.
            <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents scale, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents the logarithmic base.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and scale of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 5:27:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using default values for tolerance and weight. This method returns only 
            the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="logBase">The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
            <remarks>
            This method uses a tolerance of 0.0001 and assumes all the weights are equal to 1.
            <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents scale, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents <paramref name="logBase"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and scale of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 5:28:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[])">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using a default value for tolerance. This method returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="logBase">The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
            <remarks>
            This method uses a tolerance of 0.0001.
            <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents scale, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents <paramref name="logBase"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and scale of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 5:30:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[],System.Double)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method. This method returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="logBase">The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the amplitude and scale iteratively. If the relative 
            difference of residue in two successive iterations is less than <paramref name="tolerance"/>, the 
            method returns the resulting amplitude and scale. If <paramref name="tolerance"/> is less than or 
            equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents scale, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents <paramref name="logBase"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and scale of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:20:14 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using the natural logarithm and a default value for tolerance and weight.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
            <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
            <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
            <remarks>
            This method uses the natural logarithm and uses a tolerance of 0.0001. The method assumes that all weights are equal to 1.
                <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="scale"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents the logarithmic base.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 5:44:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using a default value for tolerance and weight.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="logBase">The base of the logarithm. A value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
            <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
            <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
            <remarks>
            This method uses a tolerance of 0.0001 and assumes that all weights are equal to 1.
                <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="scale"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents <paramref name="logBase"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 5:41:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using a default value for tolerance.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="logBase">The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
            <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
            <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
            <remarks>
            This method uses a tolerance of 0.0001.
                <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="scale"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents <paramref name="logBase"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/7/2005 5:39:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or Bisquare method.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="logBase">The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the <paramref name="amplitude"/> and <paramref name="scale"/> iteratively. If the relative 
            difference of <paramref name="residue"/> in two successive iterations is less than <paramref name="tolerance"/>, the 
            method returns the resulting <paramref name="amplitude"/> and <paramref name="scale"/>. If <paramref name="tolerance"/> is less than or 
            equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
            <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
            <returns>
            The fitted data calculated using the fitted logarithm model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="scale"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents <paramref name="logBase"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <example>
            The following example generates a set of logarithmic data and fits the data against the logarithmic model using the Least Square method. 
            <code lang="VB.NET">
            Dim numSamples As Integer = 100
            Dim xData() As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim tolerance, amplitude, scale, residue As Double
             
            '  Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 0.05, 3.0)
             
            ' Generate yData of the input data set {xData, yData}
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (xData(i) * 1.5)
                yData(i) = Math.Log(yData(i)) * 5.0
                yData(i) = yData(i) + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Calculate Logarithm fit of the data set {xData, yData}
            fittedData = CurveFit.LogarithmFit(xData, yData, FitMethod.LeastSquare, LogarithmType.Natural, weight, tolerance, amplitude, scale, residue)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 100;
            double[] xData;
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double tolerance, amplitude, scale, residue;
             
            // Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 0.05, 3.0);
             
            // Generate yData of the input data set {xData, yData}
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            for (int i = 0; i &lt; yData.Length; i++)
            {
                yData[i] = (xData[i] * 1.5);
                yData[i] = Math.Log(yData[i]) * 5.0;
                yData[i] = yData[i] + noise[i];
            }
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1.0;
             
            tolerance = 0.0001;
             
            // Calculate Logarithm fit of the data set {xData, yData}
            fittedData = CurveFit.LogarithmFit(xData, yData, FitMethod.LeastSquare, LogarithmType.Natural, weight, tolerance, out amplitude, out scale, out residue);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:16:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[])">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square method and using the 
            natural logarithm and default values for tolerance and weight. The method performs this 
            operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
            <remarks>
            This method uses the natural logarithm and the <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/> fit method. It assumes a default tolerance of 0.0001 and that all the weights are equal to 1.
            <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents scale, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents the logarithmic base.
            </description>
            		</item>
            	</list>
            	<para>
            If <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 1:08:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, 
            or Bisquare method and using the natural logarithm and default values for tolerance and weight. 
            The method performs this operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <remarks>
            This method uses the natural logarithm. It uses a tolerance of 0.0001 and assumes that all the weights are equal to 1.
            <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents scale, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents the logarithmic base.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and scale of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 1:12:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight. The method performs this operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="logBase">The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <remarks>
            This method uses a tolerance of 0.0001 and assumes all the weights are equal to 1.
            <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents scale, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents <paramref name="logBase"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and scale of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 1:14:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[])">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method performs this operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="logBase">The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <remarks>
            This method uses a tolerance of 0.0001.
            <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents scale, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents <paramref name="logBase"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and scale of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 1:16:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[],System.Double)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method performs this operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="logBase">The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the amplitude and scale iteratively. If the relative 
            difference of residue in two successive iterations is less than <paramref name="tolerance"/>, the 
            method returns the resulting amplitude and scale. If <paramref name="tolerance"/> is less than 
            or equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents scale, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents <paramref name="logBase"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the amplitude and scale of the logarithm model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the amplitude and scale of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:21:04 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using the natural logarithm and a default value for tolerance and weight. 
            The method performs this operation in place.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
            <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
            <remarks>
            This method uses the natural logarithm and uses a tolerance of 0.0001. The method and assumes that all weights are equal to 1.
                <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="scale"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents the logarithmic base.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 1:30:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance and weight. The method performs this 
            operation in place.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="logBase">The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
            <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
            <remarks>
            This method uses a tolerance of 0.0001 and assumes that all weights are equal to 1.
                <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="scale"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents <paramref name="logBase"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 10:19:49 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method performs this operation in place.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="logBase">The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
            <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
            <remarks>
            This method uses a tolerance of 0.0001.
                <para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="scale"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents <paramref name="logBase"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 1:24:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,NationalInstruments.Analysis.Math.LogarithmType,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the logarithm model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method performs this operation in place.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted logarithm model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="logBase">The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the <paramref name="amplitude"/> and <paramref name="scale"/> iteratively. If the relative 
            difference of <paramref name="residue"/> in two successive iterations is less than <paramref name="tolerance"/>, the 
            method returns the resulting <paramref name="amplitude"/> and <paramref name="scale"/>. If <paramref name="tolerance"/> is less than or 
            equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted logarithm model.
            </param>
            <param name="scale">
            Upon return, contains the scale of the fitted logarithm model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the logarithm fit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the logarithm model:
            </para>
            	<para indent="true">
            		<image src="LogFitform_13.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="scale"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">base</format> represents <paramref name="logBase"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="LogFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="LogFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, this method finds the <paramref name="amplitude"/> and <paramref name="scale"/> of the logarithm model by using reweighted least square fitting iteratively.
            </para>
            </remarks>
            <example>
            The following example generates a set of logarithmic data and then fits the data against the logarithmic model using the Least Square method.  
            <code lang="VB.NET">
            Dim numSamples As Integer = 100
            Dim xData() As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise() As Double
            Dim tolerance, amplitude, scale, residue As Double
             
            '  Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 0.05, 3.0)
             
            ' Generate yData of the input data set {xData, yData}
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (xData(i) * 1.5)
                yData(i) = Math.Log(yData(i)) * 5.0
                yData(i) = yData(i) + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Calculate Logarithm fit of the data set {xData, yData}. This operation is performed in place.
            CurveFit.LogarithmFitInPlace(xData, yData, FitMethod.LeastSquare, LogarithmType.Natural, weight, tolerance, amplitude, scale, residue)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 100;
            double[] xData;
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise;
            double tolerance, amplitude, scale, residue;
             
            // Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 0.05, 3.0);
             
            // Generate yData of the input data set {xData, yData}
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            for (int i = 0; i &lt; yData.Length; i++)
            {
                yData[i] = (xData[i] * 1.5);
                yData[i] = Math.Log(yData[i]) * 5.0;
                yData[i] = yData[i] + noise[i];
            }
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
             
            // Calculate Logarithm fit of the data set {xData, yData}. This operation is performed in place.
            CurveFit.LogarithmFitInPlace(xData, yData, FitMethod.LeastSquare, LogarithmType.Natural, weight, tolerance, out amplitude, out scale, out residue);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:18:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[])">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square method and using default values 
            for tolerance and weight. The method returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <returns>
            The fitted data calculated using the fitted power model.
            </returns>
            <remarks>
            This method uses the <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/> fit method. It assumes a default tolerance of 0.0001 and that all the weights are equal to 1.
            <para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents the amplitude of the model, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the power.
            </description>
            		</item>
            	</list>
            	<para>
            If <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the amplitude and power of the power model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 2:51:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method using default values for tolerance and weight. The method returns only the fitted 
            data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <returns>
            The fitted data calculated using the fitted power model.
            </returns>
            <remarks>
            This method uses a tolerance of 0.0001 and assumes that all the weights are 1.
            <para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents the amplitude of the model, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the power.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the amplitude and power of the power model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude and power of the power model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="PowerFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, 
            this method finds the amplitude and power of the power model by using reweighted least square 
            fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 2:57:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method returns only the fitted data.</summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <returns>
            The fitted data calculated using the fitted power model.
            </returns>
            <remarks>
            This method uses a tolerance of 0.0001.
            <para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents the amplitude of the model, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the power.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the amplitude and power of the power model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude and power of the power model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="PowerFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, 
            this method finds the amplitude and power of the power model by using reweighted least square 
            fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 2:59:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the amplitude and power iteratively. If the relative 
            difference of residue in two successive iterations is less than <paramref name="tolerance"/>, the 
            method returns the resulting amplitude and power. If <paramref name="tolerance"/> is less than 
            or equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <returns>
            The fitted data calculated using the fitted power model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents the amplitude of the model, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the power.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the amplitude and power of the power model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude and power of the power model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="PowerFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, 
            this method finds the amplitude and power of the power model by using reweighted least square 
            fitting iteratively.
            </para>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:22:37 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted power model.
            </param>
            <param name="power">
            Upon return, contains the power of the fitted power model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the power fit.
            </param>
            <returns>
            The fitted data calculated using the fitted power model.
            </returns>
            <remarks>
            This method uses a default tolerance of 0.0001 and assumes that all the weights are equal to 1.
                <para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="power"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="PowerFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, 
            this method finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by using reweighted least square 
            fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 4:07:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted power model.
            </param>
            <param name="power">
            Upon return, contains the power of the fitted power model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the power fit.
            </param>
            <returns>
            The fitted data calculated using the fitted power model.
            </returns>
            <remarks>
            This method uses a default tolerance of 0.0001.
                <para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="power"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="PowerFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, 
            this method finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by using reweighted least square 
            fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 4:05:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or Bisquare method.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="inputYData">
            The y value of data set (x, y).
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the <paramref name="amplitude"/> and <paramref name="power"/> iteratively. If the relative 
            difference of <paramref name="residue"/> in two successive iterations is less than <paramref name="tolerance"/>, the 
            method returns the resulting <paramref name="amplitude"/> and <paramref name="power"/>. If <paramref name="tolerance"/> is less than or 
            equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted power model.
            </param>
            <param name="power">
            Upon return, contains the power of the fitted power model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the power fit.
            </param>
            <returns>
            The fitted data calculated using the fitted power model.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="power"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="PowerFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, 
            this method finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by using reweighted least square 
            fitting iteratively.
            </para>
            </remarks>
            <example>
            The following example generates a set of power data according to the model: <c>y = a * x^b + noise.</c> Then, the example fits the data against the power model using the Least Square method.
            <code lang="VB.NET">
            Dim numSamples As Integer = 50
            Dim xData() As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim a, b, amplitude, power, residue, tolerance As Double
             
            ' Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 10.0)
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 2.0
             
            Dim gaussSignal As New GaussianNoiseSignal(0.3)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * x^b + noise
            For i As Integer = 0 To yData.Length - 1
                yData(i) = a * Math.Pow(xData(i), b) + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Calculate power fit of the data set {xData, yData}, using the Least Square method 
            fittedData = CurveFit.PowerFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, amplitude, power, residue)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 50;
            double[] xData;
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double a, b, amplitude, power, residue, tolerance;
             
            // Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 10.0);
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 2.0;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.3);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * x^b + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = a * Math.Pow(xData[i], b) + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1.0;
             
            tolerance = 0.0001;
             
            // Calculate power fit of the data set {xData, yData}, using the Least Square method 
            fittedData = CurveFit.PowerFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, out amplitude, out power, out residue);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:24:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[])">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square method and using default values 
            for tolerance and weight. The method performs this operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
            <remarks>
            This method uses the <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/> fit method. It assumes a default tolerance of 0.0001 and that all the weights are equal to 1.
            <para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents the amplitude of the model, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the power.
            </description>
            		</item>
            	</list>
            	<para>
            If <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the amplitude and power of the power model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 4:29:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod)">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight. The method performs this operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <remarks>
            This method uses a tolerance of 0.0001 and assumes that all the weights are 1.
            <para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents the amplitude of the model, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the power.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the amplitude and power of the power model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude and power of the power model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="PowerFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, 
            this method finds the amplitude and power of the power model by using reweighted least square 
            fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 4:30:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[])">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method performs this operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <remarks>
            This method uses a tolerance of 0.0001.
            <para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents the amplitude of the model, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the power.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the amplitude and power of the power model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude and power of the power model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="PowerFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, 
            this method finds the amplitude and power of the power model by using reweighted least square 
            fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 4:32:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double)">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method performs this operation in place and returns only the fitted data.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the amplitude and power iteratively. If the relative 
            difference of residue in two successive iterations is less than <paramref name="tolerance"/>, the 
            method returns the resulting amplitude and power. If <paramref name="tolerance"/> is less than 
            or equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents the amplitude of the model, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents the power.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the amplitude and power of the power model by minimizing the residue, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the amplitude and power of the power model by minimizing the residue, as follows:
            </para>
            	<para indent="true">
            		<image src="PowerFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, 
            this method finds the amplitude and power of the power model by using reweighted least square 
            fitting iteratively.
            </para>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:23:27 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using default values for tolerance and weight. The method performs this 
            operation in place.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted power model.
            </param>
            <param name="power">
            Upon return, contains the power of the fitted power model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the power fit.
            </param>
            <remarks>
            This method uses a default tolerance of 0.0001 and assumes that all the weights are equal to 1.
                <para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="power"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="PowerFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, 
            this method finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by using reweighted least square 
            fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="yData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 4:41:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method and using a default value for tolerance. The method performs this operation in place.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted power model.
            </param>
            <param name="power">
            Upon return, contains the power of the fitted power model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the power fit.
            </param>
            <remarks>
            This method uses a default tolerance of 0.0001.
                <para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="power"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="PowerFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, 
            this method finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by using reweighted least square 
            fitting iteratively.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/8/2005 4:39:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitInPlace(System.Double[],System.Double[],NationalInstruments.Analysis.Math.FitMethod,System.Double[],System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits the data set (x, y) to the power model using the Least Square, Least Absolute Residual, or 
            Bisquare method. The method performs this operation in place.
            </summary>
            <param name="inputXData">
            The x value of data set (x, y).
            </param>
            <param name="yData">
            On input, contains the y value of data set (x, y). On output, contains the fitted data calculated using the fitted power model.
            </param>
            <param name="fitMethod">
            The fitting method. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.FitMethod"/> enumeration.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="tolerance">
            The stop criteria. This method adjusts the <paramref name="amplitude"/> and <paramref name="power"/> 
            iteratively. If the relative difference of <paramref name="residue"/> in two successive iterations is less than <paramref name="tolerance"/>, 
            the method returns the resulting <paramref name="amplitude"/> and <paramref name="power"/>. If 
            <paramref name="tolerance"/> is less than or equal to 0, the method sets <paramref name="tolerance"/> to 0.0001.
            </param>
            <param name="amplitude">
            Upon return, contains the amplitude of the fitted power model.
            </param>
            <param name="power">
            Upon return, contains the power of the fitted power model.
            </param>
            <param name="residue">
            Upon return, contains the weighted mean error of the power fit.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="yData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="fitMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The following equation represents the power model: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_15.png"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> represents <paramref name="power"/>.
            </description>
            		</item>
            	</list>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare"/>, this method 
            finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by minimizing the <paramref name="residue"/>, as follows: 
            </para>
            	<para indent="true">
            		<image src="PowerFitform_5.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual"/>, 
            this method finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by minimizing the <paramref name="residue"/>, as follows:
            </para>
            	<para indent="true">
            		<image src="PowerFitform_4.png"/>
            	</para>
            	<para>
            If <paramref name="fitMethod"/> is <see cref="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare"/>, 
            this method finds the <paramref name="amplitude"/> and <paramref name="power"/> of the power model by using reweighted least square 
            fitting iteratively.
            </para>
            </remarks>
            <example>
            The following example generates a set of power data according to the model: y = a * x^b + noise. Then, the example fits the data against the power model using the Least Square method.
            <code lang="VB.NET">
            Dim numSamples As Integer = 50
            Dim xData() As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise() As Double
            Dim a, b, amplitude, power, residue, tolerance As Double
             
            ' Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 10.0)
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 2.0
             
            Dim gaussSignal As New GaussianNoiseSignal(0.3)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * x^b + noise
            For i As Integer = 0 To yData.Length - 1
                yData(i) = a * Math.Pow(xData(i), b) + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Calculate power fit of the data set {xData, yData}, using the Least Square method. This operation is performed in place. 
            CurveFit.PowerFitInPlace(xData, yData, FitMethod.LeastSquare, weight, tolerance, amplitude, power, residue)
             
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 50;
            double[] xData;
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise;
            double amplitude, power, residue, tolerance;
            double a, b;
             
            // Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 10.0);
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 2.0;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.3);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * x^b + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = a * Math.Pow(xData[i], b) + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
             
            // Calculate power fit of the data set {xData, yData}, using the Least Square method. This operation is performed in place.
            CurveFit.PowerFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, out amplitude, out power, out residue);
             
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>3/20/2008 11:52:56 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitConfidenceInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
            <summary>
            Calculates the confidence interval for the best exponential fitting method using a default value for weight. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="confidenceLevel">
            The level of certainty for the confidence interval. <paramref name="confidenceLevel"/> specifies the probability that the actual method lies 
            within the confidence interval. <paramref name="confidenceLevel"/> must be between 0 and 1.
            </param>
            <param name="amplitude">
            The amplitude of the fitted exponential model using the Least Square method. 
            </param>
            <param name="damping">
            The damping of the fitted exponential model using the Least Square method. 
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
            <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of <paramref name="amplitude"/>. 
            </param>
            <param name="deltaDamping">
            Upon return, contains the uncertainty radius of <paramref name="damping"/>. 
            </param>
            <remarks>
            The confidence interval refers to the interval within which the 
            actual method is expected to fall. 
            <para>
            This method assumes that the weight of each data point is 1.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 10:38:36 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitConfidenceInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
            <summary>
            Calculates the confidence interval for the best exponential fitting method. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="weight">
            The  weight of each data point.
            </param>
            <param name="confidenceLevel">
            The level of certainty for the confidence interval. <paramref name="confidenceLevel"/> specifies the probability that the actual method lies 
            within the confidence interval. <paramref name="confidenceLevel"/> must be between 0 and 1.
            </param>
            <param name="amplitude">
            The amplitude of the fitted exponential model using the Least Square method. 
            </param>
            <param name="damping">
            The damping of the fitted exponential model using the Least Square method. 
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
            <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of <paramref name="amplitude"/>. 
            </param>
            <param name="deltaDamping">
            Upon return, contains the uncertainty radius of <paramref name="damping"/>. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, and <paramref name="weight"/>  is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The confidence interval refers to the interval within which the 
            actual method is expected to fall.
            </remarks>
            <example>
            The following example generates a set of exponential data according to the model: <format type="monospace">y = a * exp(b * x) + noise</format>. Then, the example fits the data against the exponential model using the Least Square method and calculates the confidence interval.
            <code lang="VB.NET">
            Dim numSamples As Integer = 50
            Dim xData(numSamples - 1) As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim upperBound() As Double = Nothing, lowerBound() As Double = Nothing
            Dim amplitude, damping, residue, tolerance, a, b As Double
            Dim confidenceLevel, deltaAmplitude, deltaDamping As Double
             
            ' Generate xData of the input data set {xData, yData}
            For i As Integer = 0 To xData.Length - 1
                xData(i) = i
            Next
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 0.1
             
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * exp(xData * b) + noise 
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (a * Math.Exp(xData(i) * b)) + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Probability that the best fit falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95
             
            ' Calculate exponential fit of the data set {xData, yData}
            fittedData = CurveFit.ExponentialFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, amplitude, damping, residue)
             
            ' Calculate the confidence interval 
            CurveFit.ExponentialFitConfidenceInterval(xData, yData, weight, confidenceLevel, amplitude, damping, upperBound, lowerBound, deltaAmplitude, deltaDamping)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 50;
            double[] xData = new double[numSamples];
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double[] upperBound, lowerBound;
            double amplitude, damping, residue, tolerance, a, b;
            double confidenceLevel, deltaAmplitude, deltaDamping;
             
            // Generate xData of the input data set {xData, yData}
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = i;
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 0.1;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * exp(xData * b) + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = (a * Math.Exp(xData[i] * b)) + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
             
            // Probability that the best fit falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95;
             
            // Calculate exponential fit of the data set {xData, yData}
            fittedData = CurveFit.ExponentialFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, out amplitude, out damping, out residue);
             
            // Calculate the confidence interval 
            CurveFit.ExponentialFitConfidenceInterval(xData, yData, weight, confidenceLevel, amplitude, damping, out upperBound, out lowerBound, out deltaAmplitude, out deltaDamping);
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/8/2008 1:52:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitPredictionInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Calculates the prediction interval for the observations using a default value for weight. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="confidenceLevel">
            The level of certainty for the prediction interval. <paramref name="confidenceLevel"/> specifies the probability that the 
            <paramref name="inputYData"/> values lie within the prediction interval in repeated measurements. <paramref name="confidenceLevel"/> must be between 0 and 1. 
            </param>
            <param name="amplitude">
            The amplitude of the fitted exponential model using the Least Square method. 
            </param>
            <param name="damping">
            The damping of the fitted exponential model using the Least Square method. 
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
            <remarks>
            The prediction interval refers to the interval within which the <paramref name="inputYData"/> 
            values are expected to fall in repeated measurements.
            <para>
            This method assumes that the weight of each data point is 1.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 10:39:05 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.ExponentialFitPredictionInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Calculates the prediction interval for the observations. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="confidenceLevel">
            The level of certainty for the prediction interval. <paramref name="confidenceLevel"/> specifies the probability that the 
            <paramref name="inputYData"/> values lie within the prediction interval in repeated measurements. <paramref name="confidenceLevel"/> must be between 0 and 1. 
            </param>
            <param name="amplitude">
            The amplitude of the fitted exponential model using the Least Square method. 
            </param>
            <param name="damping">
            The damping of the fitted exponential model using the Least Square method. 
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The prediction interval refers to the interval within which the <paramref name="inputYData"/> values are expected to fall in repeated measurements.
            </remarks>
            <example>
            The following example generates a set of exponential data according to the model: <format type="monospace">y = a * exp(b * x) + noise</format>. Then, the example fits the data against the exponential model using the Least Square method and calculates the prediction interval. 
            <code lang="VB.NET">
            Dim numSamples As Integer = 50
            Dim xData(numSamples - 1) As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim upperBound() As Double = Nothing, lowerBound() As Double = Nothing
            Dim amplitude, damping, residue, tolerance, a, b As Double
            Dim confidenceLevel As Double
             
            ' Generate xData of the input data set {xData, yData}
            For i As Integer = 0 To xData.Length - 1
                xData(i) = i
            Next
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 0.1
             
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * exp(xData * b) + noise 
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (a * Math.Exp(xData(i) * b)) + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Probability that new dependent value falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95
             
            ' Calculate exponential fit of the data set {xData, yData}
            fittedData = CurveFit.ExponentialFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, amplitude, damping, residue)
             
            ' Calculate the prediction interval 
            CurveFit.ExponentialFitPredictionInterval(xData, yData, weight, confidenceLevel, amplitude, damping, upperBound, lowerBound)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 50;
            double[] xData = new double[numSamples];
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double[] upperBound, lowerBound;
            double amplitude, damping, residue, tolerance, a, b;
            double confidenceLevel;
             
            // Generate xData of the input data set {xData, yData}
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = i;
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 0.1;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * exp(xData * b) + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = (a * Math.Exp(xData[i] * b)) + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
             
            // Probability that new dependent value falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95;
             
            // Calculate exponential fit of the data set {xData, yData}
            fittedData = CurveFit.ExponentialFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, out amplitude, out damping, out residue);
             
            // Calculate prediction interval 
            CurveFit.ExponentialFitPredictionInterval(xData, yData, weight, confidenceLevel, amplitude, damping, out upperBound, out lowerBound);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>3/20/2008 11:52:45 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitConfidenceInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the confidence interval for the best Gaussian-fitting method using a default value for 
            weight.
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="confidenceLevel">
            The level of certainty for the confidence interval. <paramref name="confidenceLevel"/> specifies the probability that the actual function lies 
            within the confidence interval. <paramref name="confidenceLevel"/> must be between 0 and 1.
            </param>
            <param name="amplitude">
            The amplitude of the fitted Gaussian model using the Least Square method.
            </param>
            <param name="center">
            The center of the fitted Gaussian model using the Least Square method.
            </param>
            <param name="standardDeviation">
            The standard deviation of the fitted Gaussian model using the Least Square method.
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
            <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of <paramref name="amplitude"/>. 
            </param>
            <param name="deltaCenter">
            Upon return, contains the uncertainty radius of <paramref name="center"/>. 
            </param>
            <param name="deltaStandardDeviation">
            Upon return, contains the uncertainty radius of <paramref name="standardDeviation"/>. 
            </param>
            <remarks>
            The confidence interval refers to the interval within which the 
            actual function is expected to fall. 
            <para>
            This method assumes that the weight of each data point is 1.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 10:39:43 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitConfidenceInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the confidence interval for the best Gaussian-fitting method. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="weight">
            The  weight of each data point.
            </param>
            <param name="confidenceLevel">
            The level of certainty for the confidence interval. <paramref name="confidenceLevel"/> specifies the probability that the actual function lies 
            within the confidence interval. <paramref name="confidenceLevel"/> must be between 0 and 1.
            </param>
            <param name="amplitude">
            The amplitude of the fitted Gaussian model using the Least Square method.
            </param>
            <param name="center">
            The center of the fitted Gaussian model using the Least Square method.
            </param>
            <param name="standardDeviation">
            The standard deviation of the fitted Gaussian model using the Least Square method.
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
            <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of <paramref name="amplitude"/>. 
            </param>
            <param name="deltaCenter">
            Upon return, contains the uncertainty radius of <paramref name="center"/>. 
            </param>
            <param name="deltaStandardDeviation">
            Upon return, contains the uncertainty radius of <paramref name="standardDeviation"/>. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The confidence interval refers to the interval within which the 
            actual function is expected to fall.
            </remarks>
            <example>
            The following example fits the data set {xData, yData} to the Gaussian model using the Least Square fit method. Then, the example calculates the initial estimate for the amplitude, center, and standard deviation and calculates the confidence interval.
            <code lang="VB.NET">
            Dim numSamples As Integer = 100
            Dim xData() As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim upperBound() As Double = Nothing, lowerBound() As Double = Nothing
            Dim initialAmplitude, initialCenter, initialStandardDeviation As Double
            Dim tolerance, amplitude, center, standardDeviation, residue As Double
            Dim deltaAmplitude, deltaCenter, deltaStandardDeviation, confidenceLevel As Double
             
            ' Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 7.0)
             
            ' Generate yData of the input data set {xData, yData}
            Dim gaussSignal As New GaussianNoiseSignal(0.1)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            For i As Integer = 0 To yData.Length - 1
                yData(i) = Math.Pow((xData(i) - 3.5), 2)
                yData(i) = (yData(i) / (Math.Pow(0.5, 2) * 2)) * -1
                yData(i) = Math.Exp(yData(i)) * 5
                yData(i) = noise(i) + yData(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
            initialAmplitude = 1.5
            initialCenter = 0.8
            initialStandardDeviation = 0.4
             
            ' Probability that the best fit falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95
             
            ' Calculate Gaussian fit of the data set {xData, yData}
            fittedData = CurveFit.GaussianFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, initialAmplitude, initialCenter, initialStandardDeviation, amplitude, center, standardDeviation, residue)
             
            ' Calculate the confidence interval. Use the amplitude, center, and standard deviation output parameters of the GaussianFit method.
            CurveFit.GaussianFitConfidenceInterval(xData, yData, weight, confidenceLevel, amplitude, center, standardDeviation, upperBound, lowerBound, deltaAmplitude, deltaCenter, deltaStandardDeviation)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 100;
            double[] xData;
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double[] upperBound, lowerBound;
            double initialAmplitude, initialCenter, initialStandardDeviation;
            double tolerance, amplitude, center, standardDeviation, residue;
            double deltaAmplitude, deltaCenter, deltaStandardDeviation, confidenceLevel;
             
            // Generate xData of the input data set {xData, yData} 
            xData = PatternGeneration.Ramp(numSamples, 1.0, 7.0);
             
            // Generate yData of the input data set {xData, yData} 
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.1);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            for (int i = 0; i &lt; yData.Length; i++)
            {
                yData[i] = Math.Pow((xData[i] - 3.5), 2);
                yData[i] = (yData[i] / (Math.Pow(0.5, 2) * 2)) * -1;
                yData[i] = Math.Exp(yData[i]) * 5;
                yData[i] = noise[i] + yData[i];
            }
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
            initialAmplitude = 1.5;
            initialCenter = 0.8;
            initialStandardDeviation = 0.4;
             
            // Probability that the best fit falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95;
             
            // Calculate Gaussian fit of the data set {xData, yData}
            fittedData = CurveFit.GaussianFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, initialAmplitude, initialCenter, initialStandardDeviation, out amplitude, out center, out standardDeviation, out residue);
             
            // Calculate the confidence interval. Use the amplitude, center, and standard deviation output parameters of the GaussianFit method.
            CurveFit.GaussianFitConfidenceInterval(xData, yData, weight, confidenceLevel, amplitude, center, standardDeviation, out upperBound, out lowerBound, out deltaAmplitude, out deltaCenter, out deltaStandardDeviation);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:03:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitPredictionInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Calculates the prediction interval for the observations using a default value for weight. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="confidenceLevel">
            The level of certainty for the prediction interval. <paramref name="confidenceLevel"/> specifies the probability that the 
            <paramref name="inputYData"/> values lie within the prediction interval in repeated measurements. <paramref name="confidenceLevel"/> must be between 0 and 1. 
            </param>
            <param name="amplitude">
            The amplitude of the fitted Gaussian model using the Least Square method.
            </param>
            <param name="center">
            The center of the fitted Gaussian model using the Least Square method.
            </param>
            <param name="standardDeviation">
            The standard deviation of the fitted Gaussian model using the Least Square method.
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
            <remarks>
            The prediction interval refers to the interval within which the <paramref name="inputYData"/> values are expected to fall in repeated measurements.
            <para>
            This method assumes that the weight of all the data points is 1.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and  <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 10:40:17 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.GaussianFitPredictionInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Calculates the prediction interval for the observations. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="confidenceLevel">
            The level of certainty for the prediction interval. <paramref name="confidenceLevel"/> specifies the probability that the 
            <paramref name="inputYData"/> values lie within the prediction interval in repeated measurements. <paramref name="confidenceLevel"/> must be between 0 and 1. 
            </param>
            <param name="amplitude">
            The amplitude of the fitted Gaussian model using the Least Square method.
            </param>
            <param name="center">
            The center of the fitted Gaussian model using the Least Square method.
            </param>
            <param name="standardDeviation">
            The standard deviation of the fitted Gaussian model using the Least Square method.
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The prediction interval refers to the interval within which the <paramref name="inputYData"/> values are expected to fall in repeated measurements.
            </remarks>
            <example>
            The following example fits the data set {xData, yData} to the Gaussian model using the Least Square fit method.  Then, the example calculates the initial estimate for the amplitude, center, and standard deviation and calculates the prediction interval.
            <code lang="VB.NET">
            Dim numSamples As Integer = 100
            Dim xData() As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim upperBound() As Double = Nothing, lowerBound() As Double = Nothing
            Dim initialAmplitude, initialCenter, initialStandardDeviation As Double
            Dim tolerance, amplitude, center, standardDeviation, residue As Double
            Dim confidenceLevel As Double
             
            ' Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 7.0)
             
            ' Generate yData of the input data set {xData, yData}
            Dim gaussSignal As New GaussianNoiseSignal(0.1)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            For i As Integer = 0 To yData.Length - 1
                yData(i) = Math.Pow((xData(i) - 3.5), 2)
                yData(i) = (yData(i) / (Math.Pow(0.5, 2) * 2)) * -1
                yData(i) = Math.Exp(yData(i)) * 5
                yData(i) = noise(i) + yData(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
            initialAmplitude = 1.5
            initialCenter = 0.8
            initialStandardDeviation = 0.4
             
            ' Probability that new dependent value falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95
             
            ' Calculate Gaussian fit of the data set {xData, yData}
            fittedData = CurveFit.GaussianFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, initialAmplitude, initialCenter, initialStandardDeviation, amplitude, center, standardDeviation, residue)
             
            ' Calculate the prediction interval. Use the amplitude, center, and standard deviation output parameters of the GaussianFit method.
            CurveFit.GaussianFitPredictionInterval(xData, yData, weight, confidenceLevel, amplitude, center, standardDeviation, upperBound, lowerBound)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 100;
            double[] xData;
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double[] upperBound, lowerBound;
            double initialAmplitude, initialCenter, initialStandardDeviation;
            double tolerance, amplitude, center, standardDeviation, residue;
            double confidenceLevel;
             
            // Generate xData of the input data set {xData, yData} 
            xData = PatternGeneration.Ramp(numSamples, 1.0, 7.0);
             
            // Generate yData of the input data set {xData, yData} 
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.1);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            for (int i = 0; i &lt; yData.Length; i++)
            {
                yData[i] = Math.Pow((xData[i] - 3.5), 2);
                yData[i] = (yData[i] / (Math.Pow(0.5, 2) * 2)) * -1;
                yData[i] = Math.Exp(yData[i]) * 5;
                yData[i] = noise[i] + yData[i];
            }
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
            initialAmplitude = 1.5;
            initialCenter = 0.8;
            initialStandardDeviation = 0.4;
             
            // Probability that new dependent value falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95;
             
            // Calculate Gaussian fit of the data set {xData, yData}
            fittedData = CurveFit.GaussianFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, initialAmplitude, initialCenter, initialStandardDeviation, out amplitude, out center, out standardDeviation, out residue);
             
            // Calculate the prediction interval. Use the amplitude, center, and standard deviation output parameters of the GaussianFit method.
            CurveFit.GaussianFitPredictionInterval(xData, yData, weight, confidenceLevel, amplitude, center, standardDeviation, out upperBound, out lowerBound);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:09:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitConfidenceInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
            <summary>
            Calculates the confidence interval for the best linear-fitting method using a default value for weight. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="confidenceLevel">
            The level of certainty for the confidence interval. <paramref name="confidenceLevel"/> specifies the probability that the actual method lies 
            within the confidence interval. <paramref name="confidenceLevel"/> must be between 0 and 1.
            </param>
            <param name="slope">
            The slope of the fitted linear model using the Least Square method. 
            </param>
            <param name="intercept">
            The intercept of the fitted linear model using the Least Square method. 
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
            <param name="deltaSlope">
            Upon return, contains the uncertainty radius of <paramref name="slope"/>. 
            </param>
            <param name="deltaIntercept">
            Upon return, contains the uncertainty radius of <paramref name="intercept"/>. 
            </param>
            <remarks>
            This method assumes that all the data points have a weight of 1.
            <para>
            The confidence interval refers to the interval within which the 
            actual method is expected to fall.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 10:40:38 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitConfidenceInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
            <summary>
            Calculates the confidence interval for the best linear-fitting method. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="weight">
            The  weight of each data point.
            </param>
            <param name="confidenceLevel">
            The level of certainty for the confidence interval. <paramref name="confidenceLevel"/> specifies the probability that the actual method lies 
            within the confidence interval. <paramref name="confidenceLevel"/> must be between 0 and 1.
            </param>
            <param name="slope">
            The slope of the fitted linear model using the Least Square method. 
            </param>
            <param name="intercept">
            The intercept of the fitted linear model using the Least Square method. 
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
            <param name="deltaSlope">
            Upon return, contains the uncertainty radius of <paramref name="slope"/>. 
            </param>
            <param name="deltaIntercept">
            Upon return, contains the uncertainty radius of <paramref name="intercept"/>. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The confidence interval refers to the interval within which the 
            actual method is expected to fall.
            </remarks>
            <example>
            The following example generates a set of linear data according to the model: <c>y = a * x + b + noise</c>. Then, the example fits the data against the linear model using the Least Square method and also calculates the confidence interval. 
            <code lang="VB.NET">
            Dim numSamples As Integer = 100
            Dim xData(numSamples - 1) As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim upperBound() As Double = Nothing, lowerBound() As Double = Nothing
            Dim slope, intercept, residue, tolerance, a, b As Double
            Dim confidenceLevel, deltaSlope, deltaIntercept As Double
             
            '  Generate xData of the input data set {xData, yData}
            For i As Integer = 0 To xData.Length - 1
                xData(i) = i
            Next
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 0.1
             
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * x + b + noise 
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (a * xData(i)) + b + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Probability that the best fit falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95
             
            ' Calculate linear fit of the data set {xData, yData}
            fittedData = CurveFit.LinearFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, slope, intercept, residue)
             
            ' Calculate the confidence interval 
            CurveFit.LinearFitConfidenceInterval(xData, yData, weight, confidenceLevel, slope, intercept, upperBound, lowerBound, deltaSlope, deltaIntercept)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 100;
            double[] xData = new double[numSamples];
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double[] upperBound, lowerBound;
            double slope, intercept, residue, tolerance, a, b;
            double confidenceLevel, deltaSlope, deltaIntercept;
             
            // Generate xData of the input data set {xData, yData}
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = i;
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 0.1;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * x + b + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = (a * xData[i]) + b + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
             
            // Probability that the best fit falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95;
             
            // Calculate linear fit of the data set {xData, yData}
            fittedData = CurveFit.LinearFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, out slope, out intercept, out residue);
             
            // Calculate the confidence interval
            CurveFit.LinearFitConfidenceInterval(xData, yData, weight, confidenceLevel, slope, intercept, out upperBound, out lowerBound, out deltaSlope, out deltaIntercept);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:14:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitPredictionInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Calculates the prediction interval for the observations using a default value for weight. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="confidenceLevel">
            The level of certainty for the prediction interval. <paramref name="confidenceLevel"/> specifies the probability that the 
            <paramref name="inputYData"/> values lie within the prediction interval in repeated measurements. <paramref name="confidenceLevel"/> must be between 0 and 1. 
            </param>
            <param name="slope">
            The slope of the fitted linear model using the Least Square method.
            </param>
            <param name="intercept">
            The intercept of the fitted linear model using the Least Square method.
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
            <remarks>
            This method assumes that the weight of all the data points is 1.
            <para>
            The prediction interval refers to the interval within which the <paramref name="inputYData"/> values are expected to fall in repeated measurements.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 10:41:12 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LinearFitPredictionInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Calculates the prediction interval for the observations. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x, y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x, y).
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="confidenceLevel">
            The level of certainty for the prediction interval. <paramref name="confidenceLevel"/> specifies the probability that the 
            <paramref name="inputYData"/> values lie within the prediction interval in repeated measurements. <paramref name="confidenceLevel"/> must be between 0 and 1. 
            </param>
            <param name="slope">
            The amplitude of the fitted linear model using the Least Square method.
            </param>
            <param name="intercept">
            The intercept of the fitted linear model using the Least Square method.
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The prediction interval refers to the interval within which the <paramref name="inputYData"/> values are expected to fall in repeated measurements.
            </remarks>
            <example>
            The following example generates a set of linear data according to the model: <c>y = a * x + b + noise</c>. Then, the example fits the data against the exponential model using the Least Square method and also calculates the prediction interval.
            <code lang="VB.NET">
            Dim numSamples As Integer = 100
            Dim xData(numSamples - 1) As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim upperBound() As Double = Nothing, lowerBound() As Double = Nothing
            Dim slope, intercept, residue, tolerance, a, b As Double
            Dim confidenceLevel As Double
             
            '  Generate xData of the input data set {xData, yData}
            For i As Integer = 0 To xData.Length - 1
                xData(i) = i
            Next
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 0.1
             
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * x + b + noise 
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (a * xData(i)) + b + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Probability that new dependent value falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95
             
            ' Calculate linear fit of the data set {xData, yData}
            fittedData = CurveFit.LinearFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, slope, intercept, residue)
             
            ' Calculate the prediction interval 
            CurveFit.LinearFitPredictionInterval(xData, yData, weight, confidenceLevel, slope, intercept, upperBound, lowerBound)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 100;
            double[] xData = new double[numSamples];
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double[] upperBound, lowerBound;
            double slope, intercept, residue, tolerance, a, b;
            double confidenceLevel;
             
            // Generate xData of the input data set {xData, yData}
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = i;
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 0.1;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * x + b + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = (a * xData[i]) + b + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
             
            // Probability that new dependent value falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95;
             
            // Calculate linear fit of the data set {xData, yData}
            fittedData = CurveFit.LinearFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, out slope, out intercept, out residue);
             
            // Calculate the prediction interval. 
            CurveFit.LinearFitPredictionInterval(xData, yData, weight, confidenceLevel, slope, intercept, out upperBound, out lowerBound);
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:15:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitConfidenceInterval(System.Double[],System.Double[],NationalInstruments.Analysis.Math.LogarithmType,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
            <summary>
            Calculates the confidence interval for the best logarithm-fitting method using a default value for weight. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="logBase">
            The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="confidenceLevel">
            The level of certainty for the confidence interval. <paramref name="confidenceLevel"/> specifies the probability that the actual method lies 
            within the confidence interval. <paramref name="confidenceLevel"/> must be between 0 and 1.
            </param>
            <param name="amplitude">
            The amplitude of the fitted logarithm model using the Least Square method. 
            </param>
            <param name="scale">
            The scale of the fitted logarithm model using the Least Square method. 
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
            <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of <paramref name="amplitude"/>. 
            </param>
            <param name="deltaScale">
            Upon return, contains the uncertainty radius of <paramref name="scale"/>. 
            </param>
            <remarks>
            The confidence interval refers to the interval within which the 
            actual method is expected to fall.
            <para>
            This method assumes that the weight of all of the data points is 1.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            are not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/11/2007 5:52:22 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitConfidenceInterval(System.Double[],System.Double[],System.Double[],NationalInstruments.Analysis.Math.LogarithmType,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
            <summary>
            Calculates the confidence interval for the best logarithm-fitting method. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="weight">
            The  weight of each data point.
            </param>
            <param name="logBase">
            The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="confidenceLevel">
            The level of certainty for the confidence interval. <paramref name="confidenceLevel"/> specifies the probability that the actual method lies 
            within the confidence interval. <paramref name="confidenceLevel"/> must be between 0 and 1.
            </param>
            <param name="amplitude">
            The amplitude of the fitted logarithm model using the Least Square method. 
            </param>
            <param name="scale">
            The scale of the fitted logarithm model using the Least Square method. 
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
            <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of <paramref name="amplitude"/>. 
            </param>
            <param name="deltaScale">
            Upon return, contains the uncertainty radius of <paramref name="scale"/>. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The confidence interval refers to the interval within which the 
            actual method is expected to fall.
            </remarks>
            <example>
            The following example generates a set of logarithmic data and fits the data against the logarithmic model using the Least Square method.  The example also calculates the confidence interval. 
            <code lang="VB.NET">
            Dim numSamples As Integer = 100
            Dim xData() As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim upperBound() As Double = Nothing, lowerBound() As Double = Nothing
            Dim tolerance, amplitude, scale, residue As Double
            Dim confidenceLevel, deltaAmplitude, deltaScale As Double
             
            '  Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 0.05, 3.0)
             
            ' Generate yData of the input data set {xData, yData}
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (xData(i) * 1.5)
                yData(i) = Math.Log(yData(i)) * 5.0
                yData(i) = yData(i) + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Probability that the best fit falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95
             
            ' Calculate Logarithm fit of the data set {xData, yData}.
            fittedData = CurveFit.LogarithmFit(xData, yData, FitMethod.LeastSquare, LogarithmType.Natural, weight, tolerance, amplitude, scale, residue)
             
            ' Calculate the confidence interval. Use the amplitude and scale put parameters of the LogarithmFit method.
            CurveFit.LogarithmFitConfidenceInterval(xData, yData, weight, LogarithmType.Natural, confidenceLevel, amplitude, scale, upperBound, lowerBound, deltaAmplitude, deltaScale)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 100;
            double[] xData;
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double[] upperBound, lowerBound;
            double tolerance, amplitude, scale, residue;
            double confidenceLevel, deltaAmplitude, deltaScale;
             
            // Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 0.05, 3.0);
             
            // Generate yData of the input data set {xData, yData}
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            for (int i = 0; i &lt; yData.Length; i++)
            {
                yData[i] = (xData[i] * 1.5);
                yData[i] = Math.Log(yData[i]) * 5.0;
                yData[i] = yData[i] + noise[i];
            }
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
             
            // Probability that the best fit falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95;
             
            // Calculate Logarithm fit of the data set {xData, yData}
            fittedData = CurveFit.LogarithmFit(xData, yData, FitMethod.LeastSquare, LogarithmType.Natural, weight, tolerance, out amplitude, out scale, out residue);
             
            // Calculate the confidence interval. Use the amplitude and scale output parameters of the LogarithmFit method.
            CurveFit.LogarithmFitConfidenceInterval(xData, yData, weight, LogarithmType.Natural, confidenceLevel, amplitude, scale, out upperBound, out lowerBound, out deltaAmplitude, out deltaScale);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:17:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitPredictionInterval(System.Double[],System.Double[],NationalInstruments.Analysis.Math.LogarithmType,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Calculates the prediction interval for the observations using a default value for weight. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x, y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x, y).
            </param>
            <param name="logBase">
            The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="confidenceLevel">
            The level of certainty for the prediction interval. <paramref name="confidenceLevel"/> specifies the probability that the 
            <paramref name="inputYData"/> values lie within the prediction interval in repeated measurements. <paramref name="confidenceLevel"/> must be between 0 and 1. 
            </param>
            <param name="amplitude">
            The amplitude of the fitted logarithm model using the Least Square method.
            </param>
            <param name="scale">
            The scale of the fitted logarithm model using the Least Square method.
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
            <remarks>
            The prediction interval refers to the interval within which the <paramref name="inputYData"/> values are expected to fall in repeated measurements.
            <para>
            This method assumes that the weight of each data point is 1.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 10:42:38 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.LogarithmFitPredictionInterval(System.Double[],System.Double[],System.Double[],NationalInstruments.Analysis.Math.LogarithmType,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Calculates the prediction interval for the observations. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x, y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x, y).
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="logBase">
            The base of the logarithm. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.LogarithmType"/> enumeration.
            </param>
            <param name="confidenceLevel">
            The level of certainty for the prediction interval. <paramref name="confidenceLevel"/> specifies the probability that the 
            <paramref name="inputYData"/> values lie within the prediction interval in repeated measurements. <paramref name="confidenceLevel"/> must be between 0 and 1. 
            </param>
            <param name="amplitude">
            The amplitude of the fitted logarithm model using the Least Square method.
            </param>
            <param name="scale">
            The scale of the fitted logarithm model using the Least Square method.
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The prediction interval refers to the interval within which the <paramref name="inputYData"/> values are expected to fall in repeated measurements.
            </remarks>
            <example>
            The following example generates a set of logarithmic data and fits the data against the logarithmic model using the Least Square method.  The example also calculates the prediction interval. 
            <code lang="VB.NET">
            Dim numSamples As Integer = 100
            Dim xData() As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim upperBound() As Double = Nothing, lowerBound() As Double = Nothing
            Dim tolerance, amplitude, scale, residue As Double
            Dim confidenceLevel As Double
             
            '  Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 0.05, 3.0)
             
            ' Generate yData of the input data set {xData, yData}
            Dim gaussSignal As New GaussianNoiseSignal(0.4)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            For i As Integer = 0 To yData.Length - 1
                yData(i) = (xData(i) * 1.5)
                yData(i) = Math.Log(yData(i)) * 5.0
                yData(i) = yData(i) + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Probability that new dependent value falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95
             
            ' Calculate Logarithm fit of the data set {xData, yData}. This operation is performed in place.
            fittedData = CurveFit.LogarithmFit(xData, yData, FitMethod.LeastSquare, LogarithmType.Natural, weight, tolerance, amplitude, scale, residue)
             
            ' Calculate the prediction interval. Use the amplitude and scale output parameters of the LogarithmFit method.
            CurveFit.LogarithmFitPredictionInterval(xData, yData, weight, LogarithmType.Natural, confidenceLevel, amplitude, scale, upperBound, lowerBound)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 100;
            double[] xData;
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double[] upperBound, lowerBound;
            double tolerance, amplitude, scale, residue;
            double confidenceLevel;
             
            // Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 0.05, 3.0);
             
            // Generate yData of the input data set {xData, yData}
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            for (int i = 0; i &lt; yData.Length; i++)
            {
                yData[i] = (xData[i] * 1.5);
                yData[i] = Math.Log(yData[i]) * 5.0;
                yData[i] = yData[i] + noise[i];
            }
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
             
            // Probability that new dependent value falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95;
             
            // Calculate Logarithm fit of the data set {xData, yData}.
            fittedData = CurveFit.LogarithmFit(xData, yData, FitMethod.LeastSquare, LogarithmType.Natural, weight, tolerance, out amplitude, out scale, out residue);
             
            // Calculate the prediction interval. Use the amplitude and scale output parameters of the LogarithmFit method.
            CurveFit.LogarithmFitPredictionInterval(xData, yData, weight, LogarithmType.Natural, confidenceLevel, amplitude, scale, out upperBound, out lowerBound);
             
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 3:18:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitConfidenceInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
            <summary>
            Calculates the confidence interval for the best power-fitting function using a default value for 
            weight. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="confidenceLevel">
            The level of certainty for the confidence interval. <paramref name="confidenceLevel"/> specifies the probability that the actual method lies 
            within the confidence interval. <paramref name="confidenceLevel"/> must be between 0 and 1.
            </param>
            <param name="amplitude">
            The amplitude of the fitted power model using the Least Square method. 
            </param>
            <param name="power">
            The power of the fitted power model using the Least Square method. 
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
            <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of <paramref name="amplitude"/>. 
            </param>
            <param name="deltaPower">
            Upon return, contains the uncertainty radius of <paramref name="power"/>. 
            </param>
            <remarks>
            The confidence interval refers to the interval within which the 
            actual method is expected to fall.
            <para>
            This method assumes that each of the data points has a weight of 1.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 10:42:50 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitConfidenceInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@,System.Double@)">
            <summary>
            Calculates the confidence interval for the best power-fitting function. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="weight">
            The  weight of each data point.
            </param>
            <param name="confidenceLevel">
            The level of certainty for the confidence interval. <paramref name="confidenceLevel"/> specifies the probability that the actual method lies 
            within the confidence interval. <paramref name="confidenceLevel"/> must be between 0 and 1.
            </param>
            <param name="amplitude">
            The amplitude of the fitted power model using the Least Square method. 
            </param>
            <param name="power">
            The power of the fitted power model using the Least Square method. 
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the confidence interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the confidence interval.
            </param>
            <param name="deltaAmplitude">
            Upon return, contains the uncertainty radius of <paramref name="amplitude"/>. 
            </param>
            <param name="deltaPower">
            Upon return, contains the uncertainty radius of <paramref name="power"/>. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The confidence interval refers to the interval within which the 
            actual method is expected to fall.
            </remarks>
            <example>
            The following example generates a set of power data according to the model: <c>y = a * x^b + noise.</c> 
            Then, the example fits the data against the power model using the Least Square method and calculates the confidence interval.
            <code lang="VB.NET">
            Dim numSamples As Integer = 50
            Dim xData() As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim upperBound() As Double = Nothing, lowerBound() As Double = Nothing
            Dim a, b, amplitude, power, residue, tolerance As Double
            Dim confidenceLevel, deltaAmplitude, deltaPower As Double
             
            ' Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 10.0)
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 2.0
             
            Dim gaussSignal As New GaussianNoiseSignal(0.3)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * x^b + noise
            For i As Integer = 0 To yData.Length - 1
                yData(i) = a * Math.Pow(xData(i), b) + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Probability that the best fit falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95
             
            ' Calculate power fit of the data set (xData, yData), using the Least Square method. 
            fittedData = CurveFit.PowerFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, amplitude, power, residue)
             
            ' Calculate the confidence interval 
            CurveFit.PowerFitConfidenceInterval(xData, yData, weight, confidenceLevel, amplitude, power, upperBound, lowerBound, deltaAmplitude, deltaPower)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 50;
            double[] xData;
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double[] upperBound, lowerBound;
            double a, b, amplitude, power, residue, tolerance;
            double confidenceLevel, deltaAmplitude, deltaPower;
             
            // Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 10.0);
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 2.0;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.3);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * x^b + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = a * Math.Pow(xData[i], b) + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
             
            // Probability that the best fit falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95;
             
            // Calculate power fit of the data set (xData, yData), using the Least Square method. 
            fittedData = CurveFit.PowerFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, out amplitude, out power, out residue);
             
            // Calculate the confidence interval 
            CurveFit.PowerFitConfidenceInterval(xData, yData, weight, confidenceLevel, amplitude, power, out upperBound, out lowerBound, out deltaAmplitude, out deltaPower);
             
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/29/2008 2:36:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitPredictionInterval(System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Calculates the prediction interval for the observations using a default value for weight. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="confidenceLevel">
            The level of certainty for the prediction interval. <paramref name="confidenceLevel"/> specifies the probability that the 
            <paramref name="inputYData"/> values lie within the prediction interval in repeated measurements. <paramref name="confidenceLevel"/> must be between 0 and 1. 
            </param>
            <param name="amplitude">
            The amplitude of the fitted power model using the Least Square method.
            </param>
            <param name="power">
            The power of the fitted power model using the Least Square method.
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
            <remarks>
            The prediction interval refers to the interval within which the <paramref name="inputYData"/> values are expected to fall in repeated measurements.
            <para>
            This method assumes that all of the data points have a weight of 1.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 10:43:15 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PowerFitPredictionInterval(System.Double[],System.Double[],System.Double[],System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Calculates the prediction interval for the observations. 
            </summary>
            <param name="inputXData">
            The x value of the input data set (x,y). 
            </param>
            <param name="inputYData">
            The y value of the input data set (x,y).
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="confidenceLevel">
            The level of certainty for the prediction interval. <paramref name="confidenceLevel"/> specifies the probability that the 
            <paramref name="inputYData"/> values lie within the prediction interval in repeated measurements. <paramref name="confidenceLevel"/> must be between 0 and 1. 
            </param>
            <param name="amplitude">
            The amplitude of the fitted power model using the Least Square method.
            </param>
            <param name="power">
            The power of the fitted power model using the Least Square method.
            </param>
            <param name="upperBound">
            Upon return, contains the upper bound of the prediction interval. 
            </param>
            <param name="lowerBound">
            Upon return, contains the lower bound of the prediction interval.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The prediction interval refers to the interval within which the <paramref name="inputYData"/> values are expected to fall in repeated measurements.
            </remarks>
            <example>
            The following example generates a set of power data according to the model: <c>y = a * x^b + noise</c>. Then, the example fits the data against the power model using the Least Square method and calculates the prediction interval.
            <code lang="VB.NET">
            Dim numSamples As Integer = 50
            Dim xData() As Double
            Dim yData(numSamples - 1) As Double
            Dim weight(numSamples - 1) As Double
            Dim noise(), fittedData() As Double
            Dim upperBound() As Double = Nothing, lowerBound() As Double = Nothing
            Dim a, b, amplitude, power, residue, tolerance As Double
            Dim confidenceLevel As Double
             
            ' Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 10.0)
             
            ' Generate yData of the input data set {xData, yData}
            a = 1.0
            b = 2.0
             
            Dim gaussSignal As New GaussianNoiseSignal(0.3)
            noise = gaussSignal.Generate(1000.0, numSamples)
             
            ' Applying model: yData = a * x^b + noise
            For i As Integer = 0 To yData.Length - 1
                yData(i) = a * Math.Pow(xData(i), b) + noise(i)
            Next
             
            For i As Integer = 0 To weight.Length - 1
                weight(i) = 1.0
            Next
             
            tolerance = 0.0001
             
            ' Probability that new dependent value falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95
             
            ' Calculate power fit of the data set (xData, yData), using the Least Square method 
            fittedData = CurveFit.PowerFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, amplitude, power, residue)
             
            ' Calculate the prediction interval
            CurveFit.PowerFitPredictionInterval(xData, yData, weight, confidenceLevel, amplitude, power, upperBound, lowerBound)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 50;
            double[] xData;
            double[] yData = new double[numSamples];
            double[] weight = new double[numSamples];
            double[] noise, fittedData;
            double[] upperBound, lowerBound;
            double amplitude, power, residue, tolerance;
            double confidenceLevel;
            double a, b;
             
            // Generate xData of the input data set {xData, yData}
            xData = PatternGeneration.Ramp(numSamples, 1.0, 10.0);
             
            // Generate yData of the input data set {xData, yData}
            a = 1.0;
            b = 2.0;
             
            GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.3);
            noise = gaussSignal.Generate(1000.0, numSamples);
             
            // Applying model: yData = a * x^b + noise
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = a * Math.Pow(xData[i], b) + noise[i];
             
            for (int i = 0; i &lt; weight.Length; i++)
                weight[i] = 1;
             
            tolerance = 0.0001;
             
            // Probability that new dependent value falls between lowerBound and upperBound is 95%
            confidenceLevel = 0.95;
             
            // Calculate power fit of the data set (xData, yData), using the Least Square method 
            fittedData = CurveFit.PowerFit(xData, yData, FitMethod.LeastSquare, weight, tolerance, out amplitude, out power, out residue);
             
            // Calculate the prediction interval 
            CurveFit.PowerFitPredictionInterval(xData, yData, weight, confidenceLevel, amplitude, power, out upperBound, out lowerBound);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/29/2008 2:37:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.RemoveOutliersUsingIndex(System.Double[],System.Double[],System.Int32[],System.Double[]@,System.Double[]@)">
            <summary>
            Removes the outliers specified by the indexes. The method does not use the array 
            of weights for the observations.
            </summary>
            <param name="inputXData">
            The array of independent values (X).
            </param>
            <param name="inputYData">
            The array of the dependent values (Y).
            </param>
            <param name="indexesOfOutliers">
            The indexes of the known outliers.
            </param>
            <param name="xDataWithoutOutliers">
            Upon return, contains the value of <paramref name="inputXData"/> with outliers removed.
            </param>
            <param name="yDataWithoutOutliers">
            Upon return, contains the value of <paramref name="inputYData"/> with outliers removed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="indexesOfOutliers"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:42:17 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.RemoveOutliersUsingIndex(System.Double[],System.Double[],System.Double[],System.Int32[],System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Removes the outliers specified by the indexes.
            </summary>
            <param name="inputXData">
            The array of independent values (X).
            </param>
            <param name="inputYData">
            The array of the dependent values (Y).
            </param>
            <param name="weight">
            The array of weights for the observations (X,Y).
            </param>
            <param name="indexesOfOutliers">
            The indexes of the known outliers.
            </param>
            <param name="xDataWithoutOutliers">
            Upon return, contains the value of <paramref name="inputXData"/> with outliers removed.
            </param>
            <param name="yDataWithoutOutliers">
            Upon return, contains the value of <paramref name="inputYData"/> with outliers removed.
            </param>
            <param name="weightWithoutOutliers">
            Upon return, contains the value of <paramref name="weight"/> with outliers removed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="indexesOfOutliers"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:42:05 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.RemoveOutliersUsingRange(System.Double[],System.Double[],NationalInstruments.Analysis.Math.RangeType,System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Removes data points that fall outside the specified range. The method does not use the array of 
            weights for the observations.
            </summary>
            <param name="inputXData">
            The array of independent values (X).
            </param>
            <param name="inputYData">
            The array of the dependent values (Y).
            </param>
            <param name="rangeType">
            The value specifying the axis to which the bounds in <paramref name="range"/> apply. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.RangeType"/> enumeration.
            </param>
            <param name="range">
            The upper and lower bounds of the range. 
            </param>
            <param name="xDataWithoutOutliers">
            Upon return, contains the value of <paramref name="inputXData"/> with outliers removed.
            </param>
            <param name="yDataWithoutOutliers">
            Upon return, contains the value of <paramref name="inputYData"/> with outliers removed.
            </param>
            <returns>
            The array containing the indexes of the outliers that were removed.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="range"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/> and <paramref name="inputYData"/> 
            is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="rangeType"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>If <paramref name="rangeType"/> is <see cref="F:NationalInstruments.Analysis.Math.RangeType.XRange"/> or 
            <see cref="F:NationalInstruments.Analysis.Math.RangeType.YRange"/>, then the first two elements in <paramref name="range"/> are treated as the upper and lower bounds for the axis specified using
            <paramref name="rangeType"/>.</para>
            	<para>If <paramref name="rangeType"/> is <see cref="F:NationalInstruments.Analysis.Math.RangeType.XAndYRange"/>, then this method uses the first
            and second elements in <paramref name="range"/> as the upper and lower bounds for the x-axis and the third and fourth elements in 
            <paramref name="range"/> as the upper and lower bounds for the y-axis.
            </para>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:42:42 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.RemoveOutliersUsingRange(System.Double[],System.Double[],System.Double[],NationalInstruments.Analysis.Math.RangeType,System.Double[],System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Removes data points that fall outside the specified range.
            </summary>
            <param name="inputXData">
            The array of independent values (X).
            </param>
            <param name="inputYData">
            The array of the dependent values (Y).
            </param>
            <param name="weight">
            The array of weights for the observations (X,Y).
            </param>
            <param name="rangeType">
            The value specifying the axis to which the bounds in <paramref name="range"/> apply. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.RangeType"/> enumeration.
            </param>
            <param name="range">
            The upper and lower bounds of the range. 
            </param>
            <param name="xDataWithoutOutliers">
            Upon return, contains the value of <paramref name="inputXData"/> with outliers removed.
            </param>
            <param name="yDataWithoutOutliers">
            Upon return, contains the value of <paramref name="inputYData"/> with outliers removed.
            </param>
            <param name="weightWithoutOutliers">
            Upon return, contains the value of <paramref name="weight"/> with outliers removed.
            </param>
            <returns>
            The array containing the indexes of the outliers that were removed.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputXData"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="range"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="inputXData"/>, <paramref name="inputYData"/>, 
            and <paramref name="weight"/> is not the same.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="rangeType"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>If <paramref name="rangeType"/> is <see cref="F:NationalInstruments.Analysis.Math.RangeType.XRange"/> or 
            <see cref="F:NationalInstruments.Analysis.Math.RangeType.YRange"/>, then the first two elements in <paramref name="range"/> are treated as the upper and lower bounds for the axis specified using
            <paramref name="rangeType"/>.</para>
            	<para>If <paramref name="rangeType"/> is <see cref="F:NationalInstruments.Analysis.Math.RangeType.XAndYRange"/>, then this method uses the first
            and second elements in <paramref name="range"/> as the upper and lower bounds for the x-axis and the third and fourth elements in 
            <paramref name="range"/> as the upper and lower bounds for the y-axis.
            </para>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 11:41:50 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.PolynomialInterpolation(System.Double[],System.Double[],System.Double,System.Double@)">
            <summary>
            Performs polynomial interpolation.
            </summary>
            <param name="inputXData">
            The known <format type="italics">x</format>-values for the planar function.
            </param>
            <param name="inputYData">
            The known <format type="italics">y</format>-values for the planar function.
            </param>
            <param name="xValue">
            The <format type="italics">x</format>-value at which the tabulated function is to be interpolated.
            </param>
            <param name="errorEstimate">
            Upon return, contains an estimate of the error in interpolation.
            </param>
            <returns>
            An estimate of the <format type="italics">y</format>-value corresponding to the given <paramref name="xValue"/> for the tabulated function.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            Internal computation results in a singular matrix.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The number of samples in <paramref name="inputXData"/> is equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputXData"/> is not equal to the number of samples in <paramref name="inputYData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            There is a pole at the requested <paramref name="xValue"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The method calculates the return value 
            <para indent="true">
            		<format type="italics">P</format><format type="subscript"><format type="italics">n</format><entity value="ndash"/>1</format>(<format type="italics">x</format>)
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where 
            </term>
            			<description>
            				<format type="italics">P</format><format type="subscript"><format type="italics">n</format><entity value="ndash"/>1</format> represents the unique polynomial of degree <format type="italics">n</format><entity value="ndash"/>1 that passes through the <format type="italics">n</format> points (<format type="italics">x<format type="subscript">i </format>y<format type="subscript">i</format></format>).
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the interpolation value given a set of data points {xData, yData} using a polynomial function.
            <code lang="VB.NET">
            Dim xData() As Double = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0}
            Dim yData() As Double = {1.0, 2.7, 7.4, 150.0, 80.0, 220.0}
            Dim interpValue, interpError, xValue As Double
             
            xValue = 2.0
            interpValue = CurveFit.PolynomialInterpolation(xData, yData, xValue, interpError)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xData = new double[] { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 };
            double[] yData = new double[] { 1.00, 2.70, 7.40, 150.00, 80.00, 220.00 };
            double interpValue, interpError, xValue;
             
            xValue = 2.0;
             
            interpValue = CurveFit.PolynomialInterpolation(xData, yData, xValue, out interpError);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/9/2008 8:55:53 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.RationalInterpolation(System.Double[],System.Double[],System.Double,System.Double@)">
            <summary>
            Interpolates <format type="italics">f</format> at <format type="italics">x</format> using a rational function. 
            </summary>
            <param name="inputXData">
            The known <format type="italics">x</format>-values for the planar function.
            </param>
            <param name="inputYData">
            The known <format type="italics">y</format>-values for the planar function.
            </param>
            <param name="xValue">
            The value at which the tabulated function is to be interpolated.
            </param>
            <param name="errorEstimate">
            Upon return, contains the estimate of error in the interpolation.
            </param>
            <returns>
            Returns the estimate of the <format type="italics">y</format>-value corresponding to the given <paramref name="xValue"/> for the tabulated function.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            Interpolating function has a pole at the requested value.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The number of samples in <paramref name="inputXData"/> is equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputXData"/> is not equal to the number of samples in <paramref name="inputYData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            There is a pole at the requested <paramref name="xValue"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The rational function
            <para indent="true">
            		<image src="RationalInterpolation1.gif"/>
            	</para>
            	<para>
            passes through all the points formed by <paramref name="inputXData"/> and <paramref name="inputYData"/>. <format type="italics">P</format> and <format type="italics">Q</format> are polynomials, and the rational function is unique, given a set of <format type="italics">n</format> points (<format type="italics">x<format type="subscript">i </format>y<format type="subscript">i</format></format>), where <format type="italics">f(x<format type="subscript">i</format>) = y<format type="subscript">i</format></format>, <format type="italics">f</format> is any function, and given a number <format type="italics">x</format> in the range of the <format type="italics">x<format type="subscript">i</format></format> values.
            </para>
            	<para>
            This method calculates the return value <format type="italics">y</format> using
            </para>
            	<para indent="true">
            		<image src="RationalInterpolation2.gif"/>
            	</para>
            	<para>
            If the number of points is odd, the degrees of freedom of <format type="italics">P</format> and <format type="italics">Q</format> are 
            <para indent="true">
            			<image src="RationalInterpolation3.gif"/>. 
            </para>
            If the number of points is even, the degrees of freedom of <format type="italics">P</format> are 
            <para indent="true">
            			<image src="RationalInterpolation4.gif"/>, and
            </para>
            the degrees of freedom of <format type="italics">Q</format> are 
            <para indent="true">
            			<image src="RationalInterpolation5.gif"/>
            		</para>
            		<list type="table" bordered="false">
            			<listheader>
            				<term></term>
            				<description></description>
            			</listheader>
            			<item>
            				<term>
            where
            </term>
            				<description>
            					<format type="italics">n</format> is the total number of points formed by <paramref name="inputXData"/> and <paramref name="inputYData"/>.
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the interpolation value given a set of data points {xData, yData} using a rational function.
            <code lang="VB.NET">
            Dim xData() As Double = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0}
            Dim yData() As Double = {1.0, 2.7, 7.4, 150.0, 80.0, 220.0}
            Dim interpValue, interpError, xValue As Double
             
            xValue = 2.0
             
            interpValue = CurveFit.RationalInterpolation(xData, yData, xValue, interpError)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xData = new double[] { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 };
            double[] yData = new double[] { 1.00, 2.70, 7.40, 150.00, 80.00, 220.00 };
            double interpValue, interpError, xValue;
             
            xValue = 2.0;
             
            interpValue = CurveFit.RationalInterpolation(xData, yData, xValue, out interpError);
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/9/2008 9:06:47 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.SplineInterpolation(System.Double[],System.Double[],System.Double[],System.Double)">
            <summary>
            Calculates the interpolated <format type="italics">y</format>-value at the given <format type="italics">x</format>-value for the unique polynomial passing through the 
            set of points (inputXData, inputYData) using a cubic spline interpolation.
            </summary>
            <param name="inputXData">
            The known <format type="italics">x</format>-values for the planar function.
            </param>
            <param name="inputYData">
            The known <format type="italics">y</format>-values for the planar function.
            </param>
            <param name="secondDerivatives">
            The array of second derivatives which specify the interpolant. This array should be generated by the 
            <see cref="M:NationalInstruments.Analysis.Math.CurveFit.SplineInterpolant(System.Double[],System.Double[],System.Double,System.Double)"/> method.
            </param>
            <param name="xValue">
            The <format type="italics">x</format>-value at which the tabulated function is to be interpolated.
            </param>
            <returns>
            An estimate of the <format type="italics">y</format>-value corresponding to the given <paramref name="xValue"/> for the tabulated function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The number of samples in <paramref name="inputXData"/> is equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputXData"/> is not equal to the number of samples in <paramref name="inputYData"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            The points are formed by <paramref name="inputXData"/> and <paramref name="inputYData"/>, and <format type="italics">n</format> is the total number of points.
                </para>
            	<para>
            On the interval [<format type="italics">xi, xi </format>+ 1], the output interpolation <format type="italics">y</format>-value is defined by
            </para>
            	<para indent="true">
            		<image src="SplineInterpolation1.gif"/>
            	</para>
            and
            <para indent="true">
            		<image src="SplineInterpolation2.gif"/>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the second derivatives of a spline interpolation function given the data set {xData, yData}. Then, the example calculates the spline interpolated value of the given data set. 
            <code lang="VB.NET">
            Dim xData() As Double = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0}
            Dim yData() As Double = {1.0, 2.7, 7.4, 150.0, 80.0, 220.0}
            Dim secondDerivatives() As Double
            Dim initialBoundary, finalBoundary, xValue, interpValue As Double
             
            ' Causes SplineInterpolant method to set the initial boundary condition for a natural spine
            initialBoundary = 1.0E+30
             
            ' Causes SplineInterpolant method to set the final boundary condition for a natural spine
            finalBoundary = 1.0E+30
             
            xValue = 0.45
             
            ' Calculate secondDerivatives
            secondDerivatives = CurveFit.SplineInterpolant(xData, yData, initialBoundary, finalBoundary)
             
            ' Calculate spline interpolated value  
            interpValue = CurveFit.SplineInterpolation(xData, yData, secondDerivatives, xValue)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xData = new double[] {0.00, 1.00, 2.00, 3.00, 4.00, 5.00 };
            double[] yData = new double[] { 1.0, 2.70, 7.40, 150.00, 80.00, 220.00 };
            double[] secondDerivatives;
            double initialBoundary, finalBoundary, xValue, interpValue;
            Random rnd = new Random();
             
            // Causes SplineInterpolant method to set the initial boundary condition for a natural spine
            initialBoundary = 1.00E+30;
             
            // Causes SplineInterpolant method to set the final boundary condition for a natural spine
            finalBoundary = 1.00E+30;
             
            xValue = 0.45;
             
            // Calculate secondDerivatives
            secondDerivatives = CurveFit.SplineInterpolant(xData, yData, initialBoundary, finalBoundary);
             
            // Calculate spline interpolated value  
            interpValue = CurveFit.SplineInterpolation(xData, yData, secondDerivatives, xValue);
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/9/2008 9:09:48 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.SplineInterpolant(System.Double[],System.Double[],System.Double,System.Double)">
            <summary>
            Calculates the second derivatives used by the cubic <see cref="M:NationalInstruments.Analysis.Math.CurveFit.SplineInterpolation(System.Double[],System.Double[],System.Double[],System.Double)"/>.
            </summary>
            <param name="inputXData">
            The known <format type="italics">x</format>-values for the planar function.
            </param>
            <param name="inputYData">
            The known <format type="italics">y</format>-values for the planar function.
            </param>
            <param name="initialBoundary">
            The first derivative of the interpolant at the first element of <paramref name="inputXData"/>.
            </param>
            <param name="finalBoundary">
            The first derivative of the interpolant at the last element of <paramref name="inputXData"/>.
            </param>
            <returns>
            The second derivatives to be used in a cubic spline interpolation. This array can be 
            used with the method <see cref="M:NationalInstruments.Analysis.Math.CurveFit.SplineInterpolation(System.Double[],System.Double[],System.Double[],System.Double)"/> to calculate an interpolation value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The number of samples in <paramref name="inputXData"/> is equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputXData"/> is not equal to the number of samples in <paramref name="inputYData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputXData"/> samples are not distinct.
            </para>
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The cubic spline interpolant is the continuously differentiable curve that runs through the set of points (<paramref name="inputXData"/>, <paramref name="inputYData"/>), given the boundary conditions that the interpolant's derivative must match specified values at the first and last elements of <paramref name="inputXData"/>.
            <para>
            		<paramref name="inputXData"/> and <paramref name="inputYData"/> are of length <format type="italics">n</format> and contain a tabulated function, 
            </para>
            	<para indent="true">
            		<format type="italics">f(x<format type="subscript">i</format>) = y<format type="subscript">i</format></format>
            	</para>
            with
            <para indent="true">
            		<format type="italics">x</format><format type="subscript">0</format>&lt;<format type="italics">x</format><format type="subscript">1</format>&lt;... <format type="italics">x</format><format type="subscript">n<entity value="ndash"/>1</format>
            	</para>
            	<paramref name="initialBoundary"/> and <paramref name="finalBoundary"/> are the first derivatives of the interpolating function <format type="italics">g(x)</format> at points 0 and <format type="italics">n</format>–1, respectively. <format type="italics">g(x)</format> passes all the points formed by <paramref name="inputXData"/> and <paramref name="inputYData"/>. The output interpolant can be used in the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.SplineInterpolation(System.Double[],System.Double[],System.Double[],System.Double)"/> method.
            <para>
            If <paramref name="initialBoundary"/> and <paramref name="finalBoundary"/> are equal to or greater than 10<format type="superscript">30</format>, the method sets the corresponding boundary condition for a natural spline, with zero second derivative on that boundary.
            </para>
            The interpolating function <format type="italics">g(x)</format> passes through all the points
            <para indent="true">
            {<format type="italics">x</format><format type="subscript">i</format>, <format type="italics">y</format><format type="subscript">i</format>}, <format type="italics">g(x<format type="subscript">i</format>)</format> = <format type="italics">y<format type="subscript">i</format></format>
            	</para>
            where <format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1.
            <para>
            The method obtains the interpolating function <format type="italics">g(x)</format> by interpolating every interval [<format type="italics">x<format type="subscript">i </format>, x</format><format type="subscript"><format type="italics">i</format> + 1</format>] with a cubic polynomial function <format type="italics">P<format type="subscript">i</format>(x)</format>that meets the following conditions:
            </para>
            	<list type="number">
            		<item>
            			<description>
            				<image src="SplineInterpolant1.gif"/>
            			</description>
            		</item>
            		<item>
            			<description>
            				<image src="SplineInterpolant2.gif"/>
            			</description>
            		</item>
            		<item>
            			<description>
            				<format type="italics">g(x)</format> has continuous first and second derivatives everywhere in the range <image src="SplineInterpolant3.gif"/>: 
            </description>
            		</item>
            	</list>
            	<list type="bullet">
            		<item>
            			<description>
            				<image src="SplineInterpolant4.gif"/>
            			</description>
            		</item>
            		<item>
            			<description>
            				<image src="SplineInterpolant5.gif"/>
            			</description>
            		</item>
            	</list> 
            For the preceding conditions, <format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>2. 
            <para>
            From the last condition, we derive the following equations:
            </para>
            	<para indent="true">
            		<image src="SplineInterpolant6.gif"/>
            	</para>
            	<para indent="true">
            		<image src="SplineInterpolant7.gif"/>
            	</para>
            These are <format type="italics">n</format><entity value="ndash"/>2 linear equations with <format type="italics">n</format> unknowns <image src="SplineInterpolant8.gif"/>
            	<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>2. This method computes 
            <para indent="true">
            		<image src="SplineInterpolant9.gif"/>
            	</para>
            from <paramref name="initialBoundary"/> and <paramref name="finalBoundary"/> using the formula 
            <para indent="true">
            		<image src="SplineInterpolant10.gif"/>
            	</para>
            Here 
            <para indent="true">
            		<image src="SplineInterpolant11.gif"/>
            	</para>
            You can derive this formula from the preceding conditions. This method then uses 
            <para indent="true">
            		<image src="SplineInterpolant9.gif"/>
            	</para>
            to solve all the 
            <para indent="true">
            		<image src="SplineInterpolant8.gif"/>
            	</para>
            for <format type="italics">i</format> = 1,..., <format type="italics">n</format><entity value="ndash"/>2.
            <para indent="true">
            		<image src="SplineInterpolant8.gif"/>
            	</para>
            is the output interpolant. You can use the interpolant as an input to the <see cref="M:NationalInstruments.Analysis.Math.CurveFit.SplineInterpolation(System.Double[],System.Double[],System.Double[],System.Double)"/> method to interpolate <format type="italics">y</format> at any value of <format type="italics">x</format><format type="subscript">0 </format>= <format type="italics">x </format>= <format type="italics">x</format><format type="subscript"><format type="italics">n</format><entity value="ndash"/>1</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the second derivatives of a spline interpolation function given the data set {xData, yData}. 
            <code lang="VB.NET">
            Dim xData() As Double = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0}
            Dim yData() As Double = {1.0, 2.7, 7.4, 150.0, 80.0, 220.0}
            Dim secondDerivatives() As Double
            Dim initialBoundary, finalBoundary As Double
             
            ' Causes SplineInterpolant method to set the initial boundary condition for a natural spine
            initialBoundary = 1.0E+30
             
            ' Causes SplineInterpolant method to set the final boundary condition for a natural spine
            finalBoundary = 1.0E+30
             
            ' Calculate secondDerivatives
            secondDerivatives = CurveFit.SplineInterpolant(xData, yData, initialBoundary, finalBoundary)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xData = new double[] { 0.00, 1.00, 2.00, 3.00, 4.00, 5.00 };
            double[] yData = new double[] { 1.0, 2.70, 7.40, 150.00, 80.00, 220.00 };
            double[] secondDerivatives;
            double initialBoundary, finalBoundary;
             
            // Causes SplineInterpolant method to set the initial boundary condition for a natural spine
            initialBoundary = 1.00E+30;
             
            // Causes SplineInterpolant method to set the final boundary condition for a natural spine
            finalBoundary = 1.00E+30;
             
            // Calculate secondDerivatives
            secondDerivatives = CurveFit.SplineInterpolant(xData, yData, initialBoundary, finalBoundary);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/9/2008 9:08:27 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.NonLinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.ModelFunctionCallback,System.Double[],System.Double@)">
            <summary>
            Determines the least squares set of coefficients that best fit the set of input data points (<format type="italics">X, Y</format>) as 
            expressed by a nonlinear function <format type="italics">y</format> = <format type="italics">f</format>(<format type="italics">x, a</format>) where <format type="italics">a</format> is the set of coefficients, using the Levenberg-Marquardt algorithm.
            </summary>
            <param name="inputXData">
            The array whose elements contain the <format type="italics">x</format> coordinates of the (<format type="italics">x, y</format>) data sets to be fitted.
            </param>
            <param name="inputYData">
            The array whose elements contain the <format type="italics">y</format> coordinates of the (<format type="italics">x, y</format>) data sets to be fitted.
            </param>
            <param name="callback">
            The delegate that specifies the <see cref="T:NationalInstruments.Analysis.Math.ModelFunctionCallback"/> used in the nonlinear-fitting algorithm.
            </param>
            <param name="coefficients">
            On input, contains the initial guess of the nonlinear fit coefficients. On return, contains the fitted coefficients that best describe 
            the nonlinear curve fitting given the user-supplied model function.
            </param>
            <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
            <returns>
            The array of fitted values, <format type="italics">y</format>fit<format type="subscript">i</format> = <format type="italics">f</format>(<format type="italics">x</format><format type="subscript">i</format>, <format type="italics">a</format>), where <format type="italics">f</format> is the user-supplied nonlinear model function, and <format type="italics">a</format> is the set of best-fit coefficients.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The number of samples in <paramref name="inputXData"/> is equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputXData"/> is not equal to the number of samples in <paramref name="inputYData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputXData"/> is less than the order (the number of elements in <paramref name="coefficients"/>).
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method assumes prior knowledge of the nonlinear relationship between the <format type="italics">x</format> 
            and <format type="italics">y</format> coordinates. It also gives the best fit curve <format type="italics">y</format> = <format type="italics">f</format>(<format type="italics">x, a</format>).
            <para>
            You must pass a pointer to the nonlinear function <format type="italics">f</format>(<format type="italics">x, a</format>) 
            along with a set of initial guess coefficients <format type="italics">a</format>. <see cref="M:NationalInstruments.Analysis.Math.CurveFit.NonLinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.ModelFunctionCallback,System.Double[],System.Double@)"/> 
            does not always give the correct answer. The correct output sometimes depends on the initial choice 
            of <format type="italics">a</format>. It is very important to verify the final result.
            </para>
            	<para>
            		<see cref="M:NationalInstruments.Analysis.Math.CurveFit.NonLinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.ModelFunctionCallback,System.Double[],System.Double@)"/> calculates the output mean 
            squared error using the following formula:
            </para>
            	<para indent="true">
            		<image src="nonlinfit.gif"/>
            	</para>
            	<note type="note">
            This method has no iteration limit, that is, it iterates until it converges. The iteration stops on the second occasion that the value of the merit function decreases by a negligible amount (0.001).
            Use the overload with <format type="italics">maximumIterations</format> if you need to limit the number of iterations.
            </note>
            </remarks>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <seealso example="Analysis/Enterprise/NonLinearFit" launch="false">Non-Linear Fit Example</seealso>
            <lastupdated>1/30/2013 12:22:50 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.NonLinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.ModelFunctionCallback,System.Double[],System.Double@,System.Int32)">
            <summary>
            Determines the least squares set of coefficients that best fit the set of input data points (<format type="italics">X, Y</format>) as 
            expressed by a nonlinear function <format type="italics">y</format> = <format type="italics">f</format>(<format type="italics">x, a</format>) where <format type="italics">a</format> is the set of coefficients, using the Levenberg-Marquardt algorithm. Use this method to specify
            the maximum number of iterations allowed.
            </summary>
            <param name="inputXData">
            The array whose elements contain the <format type="italics">x</format> coordinates of the (<format type="italics">x, y</format>) data sets to be fitted.
            </param>
            <param name="inputYData">
            The array whose elements contain the <format type="italics">y</format> coordinates of the (<format type="italics">x, y</format>) data sets to be fitted.
            </param>
            <param name="callback">
            The delegate that specifies the <see cref="T:NationalInstruments.Analysis.Math.ModelFunctionCallback"/> used in the nonlinear-fitting algorithm.
            </param>
            <param name="coefficients">
            On input, contains the initial guess of the nonlinear fit coefficients. On return, contains the fitted coefficients that best describe 
            the nonlinear curve fitting given the user-supplied model function.
            </param>
            <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
            <param name="maximumIterations">
            The maximum number of iterations allowed. If the method reaches maximum iteration without reaching a solution, then it throws an exception.
            </param>
            <returns>
            The array of fitted values, <format type="italics">y</format>fit<format type="subscript">i</format> = <format type="italics">f</format>(<format type="italics">x</format><format type="subscript">i</format>, <format type="italics">a</format>), where <format type="italics">f</format> is the user-supplied nonlinear model function, and <format type="italics">a</format> is the set of best-fit coefficients.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The number of samples in <paramref name="inputXData"/> is equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputXData"/> is not equal to the number of samples in <paramref name="inputYData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputXData"/> is less than the order (the number of elements in <paramref name="coefficients"/>).
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method assumes prior knowledge of the nonlinear relationship between the <format type="italics">x</format> 
            and <format type="italics">y</format> coordinates. It also gives the best fit curve <format type="italics">y</format> = <format type="italics">f</format>(<format type="italics">x, a</format>).
            <para>
            You must pass a pointer to the nonlinear function <format type="italics">f</format>(<format type="italics">x, a</format>) 
            along with a set of initial guess coefficients <format type="italics">a</format>. <see cref="M:NationalInstruments.Analysis.Math.CurveFit.NonLinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.ModelFunctionCallback,System.Double[],System.Double@)"/> 
            does not always give the correct answer. The correct output sometimes depends on the initial choice 
            of <format type="italics">a</format>. It is very important to verify the final result.
            </para>
            	<para>
            		<see cref="M:NationalInstruments.Analysis.Math.CurveFit.NonLinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.ModelFunctionCallback,System.Double[],System.Double@)"/> calculates the output mean 
            squared error using the following formula:
            </para>
            	<para indent="true">
            		<image src="nonlinfit.gif"/>
            	</para>
            	<note type="note">
            This method iterates until it converges or <paramref name="maximumIterations"/> is reached. The iteration stops on the second occasion that the value of the merit function decreases by a negligible amount (0.001).
            </note>
            </remarks>
            <example>
            The following example fits the data set (xData, yData) to the nonlinear model using the nonlinear method callback, ModelFunction.
            <code lang="VB.NET">
            Private Sub myFunction()
                Dim numSamples As Integer = 50
                Dim xData(numSamples - 1) As Double
                Dim yData(numSamples - 1) As Double
                Dim coefficients() As Double
                Dim noise(), fittedData() As Double
                Dim a, b, meanSquaredError As Double
                Dim maximumIterations As Integer
                Dim callback As ModelFunctionCallback = New ModelFunctionCallback(AddressOf ModelFunction)
             
                '  Generate xData of the input data set {xData, yData}
                For i As Integer = 0 To xData.Length - 1
                    xData(i) = i
                Next
             
                ' Generate yData of the input data set {xData, yData}
                a = 1.0
                b = 0.1
             
                Dim gaussSignal As New GaussianNoiseSignal(0.4)
                noise = gaussSignal.Generate(1000.0, numSamples)
             
                ' Applying an exponential model: yData = a * exp(xData * b) + noise
                For i As Integer = 0 To yData.Length - 1
                    yData(i) = (a * Math.Exp(xData(i) * b)) + noise(i)
                Next
             
                ' Generate a ramp pattern that represents coefficients
                coefficients = PatternGeneration.Ramp(numSamples, 0.0, 3.0)
             
                maximumIterations = 100
             
                ' Calculate non linear fit of data set (xData, yData) using the nonlinear function callback, ModelFunction
                fittedData = CurveFit.NonLinearFit(xData, yData, callback, coefficients, meanSquaredError, maximumIterations)
            End Sub
             
                ' Callback function that implements the fitting model 
            Private Function ModelFunction(ByVal x As Double, ByVal coefficients As Double()) As Double
                    Return (coefficients(0) * System.Math.Exp(coefficients(1) * x)) + coefficients(2)
            End Function
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            private void myFunction()
            {
                int numSamples = 50;
                double[] xData = new double[numSamples];
                double[] yData = new double[numSamples];
                double[] coefficients;
                double[] noise, fittedData;
                double a, b, meanSquaredError;
                int maximumIterations;
                ModelFunctionCallback callback = new ModelFunctionCallback(ModelFunction);
             
                // Generate xData of the input data set {xData, yData}
                for (int i = 0; i &lt; xData.Length; i++)
                    xData[i] = i;
             
                // Generate yData of the input data set {xData, yData}
                a = 1.0;
                b = 0.1;
             
                GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
                noise = gaussSignal.Generate(1000.0, numSamples);
             
                // Applying an exponential model: yData = a * exp(xData * b) + noise
                for (int i = 0; i &lt; yData.Length; i++)
                    yData[i] = (a * Math.Exp(xData[i] * b)) + noise[i];
             
                // Generate a ramp pattern that represents coefficients
                coefficients = PatternGeneration.Ramp(numSamples, 0.0, 3.0);
             
                maximumIterations = 100;
             
                // Calculate linear fit of the data set {xData, yData}
                fittedData = CurveFit.NonLinearFit(xData, yData, callback, coefficients, out meanSquaredError, maximumIterations);
            }
             
            // Callback function that implements the fitting model
            private double ModelFunction(double x, double[] coefficients)
            {
                return (coefficients[0] * Math.Exp(coefficients[1] * x)) + coefficients[2];
            }
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <seealso example="Analysis/Enterprise/NonLinearFit" launch="false">Non-Linear Fit Example</seealso>
            <lastupdated>1/30/2013 12:23:01 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.CurveFit.NonLinearFit(System.Double[],System.Double[],System.Double[],NationalInstruments.Analysis.Math.ModelFunctionCallback,System.Double[],System.Double@,System.Int32,System.Int32@)">
            <summary>
            Determines the least squares set of coefficients that best fit the set of input data points (<format type="italics">X, Y</format>) as 
            expressed by a nonlinear function <format type="italics">y</format> = <format type="italics">f</format>(<format type="italics">x, a</format>) where <format type="italics">a</format> is the set of coefficients, using the Levenberg-Marquardt algorithm. Use this method to specify <paramref name="weight"/> for each data point
            and the maximum number of iterations allowed.
            </summary>
            <param name="inputXData">
            The array whose elements contain the <format type="italics">x</format> coordinates of the (<format type="italics">x, y</format>) data sets to be fitted.
            </param>
            <param name="inputYData">
            The array whose elements contain the <format type="italics">y</format> coordinates of the (<format type="italics">x, y</format>) data sets to be fitted.
            </param>
            <param name="weight">
            The weight of each data point.
            </param>
            <param name="callback">
            The delegate that specifies the <see cref="T:NationalInstruments.Analysis.Math.ModelFunctionCallback"/> used in the nonlinear-fitting algorithm.
            </param>
            <param name="coefficients">
            On input, contains the initial guess of the nonlinear fit coefficients. On return, contains the fitted coefficients that best describe 
            the nonlinear curve fitting given the user-supplied model function.
            </param>
            <param name="meanSquaredError">
            Upon return, contains the mean squared error generated by the difference between the fitted curve and the raw data.
            </param>
            <param name="maximumIterations">
            The maximum number of iterations allowed. If the method reaches maximum iteration without reaching a solution, then it throws an exception.
            </param>
            <param name="actualNumberOfIterations">
            Upon return, contains the actual number of iterations required to reach the final results.
            </param>
            <returns>
            The array of fitted values, <format type="italics">y</format>fit<format type="subscript">i</format> = <format type="italics">f</format>(<format type="italics">x</format><format type="subscript">i</format>, <format type="italics">a</format>), where <format type="italics">f</format> is the user-supplied nonlinear model function, and <format type="italics">a</format> is the set of best-fit coefficients.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputXData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The number of samples in <paramref name="inputXData"/> is equal to zero. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputXData"/>,  <paramref name="inputYData"/>, and <paramref name="weight"/> is not the same. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputXData"/> is less than the order (the number of elements in <paramref name="coefficients"/>).
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            Maximum iteration exceeded.
            </exception>
            <remarks>
            This method assumes prior knowledge of the nonlinear relationship between the <format type="italics">x</format> 
            and <format type="italics">y</format> coordinates. It also gives the best fit curve <format type="italics">y</format> = <format type="italics">f</format>(<format type="italics">x, a</format>).
            <para>
            You must pass a pointer to the nonlinear function <format type="italics">f</format>(<format type="italics">x, a</format>) 
            along with a set of initial guess coefficients <format type="italics">a</format>. <see cref="M:NationalInstruments.Analysis.Math.CurveFit.NonLinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.ModelFunctionCallback,System.Double[],System.Double@)"/> 
            does not always give the correct answer. The correct output sometimes depends on the initial choice 
            of <format type="italics">a</format>. It is very important to verify the final result.
            </para>
            	<para>
            		<see cref="M:NationalInstruments.Analysis.Math.CurveFit.NonLinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.ModelFunctionCallback,System.Double[],System.Double@)"/> calculates the output mean 
            squared error using the following formula:
            </para>
            	<para indent="true">
            		<image src="nonlinfit.gif"/>
            	</para>
            	<note type="note">
            This method iterates until it converges or <paramref name="maximumIterations"/> is reached. The iteration stops on the second occasion that the value of the merit function decreases by a negligible amount (0.001).
            </note>
            </remarks>
            <example>
            The following example fits the data set (xData, yData) to the nonlinear model using the nonlinear method callback, <c>ModelFunction</c>.
            <code lang="VB.NET">
            Private Sub myFunction()
                Dim numSamples As Integer = 50
                Dim xData(numSamples - 1) As Double
                Dim yData(numSamples - 1) As Double
                Dim weight(numSamples - 1) As Double
                Dim coefficients() As Double
                Dim noise(), fittedData() As Double
                Dim a, b, meanSquaredError As Double
                Dim maximumIterations, actualNumberOfIterations As Integer
                Dim callback As ModelFunctionCallback = New ModelFunctionCallback(AddressOf ModelFunction)
             
                '  Generate xData of the input data set {xData, yData}
                For i As Integer = 0 To xData.Length - 1
                    xData(i) = i
                Next
             
                ' Generate yData of the input data set {xData, yData}
                a = 1.0
                b = 0.1
             
                Dim gaussSignal As New GaussianNoiseSignal(0.4)
                noise = gaussSignal.Generate(1000.0, numSamples)
             
                ' Applying an exponential model: yData = a * exp(xData * b) + noise
                For i As Integer = 0 To yData.Length - 1
                    yData(i) = (a * Math.Exp(xData(i) * b)) + noise(i)
                Next
             
                ' Generate weight for input data
                For i As Integer = 0 To weight.Length - 1
                    weight(i) = 1
                Next
             
                ' Generate a ramp pattern that represents coefficients
                coefficients = PatternGeneration.Ramp(numSamples, 0.0, 3.0)
             
                maximumIterations = 100
             
                ' Calculate non linear fit of data set (xData, yData) using the nonlinear function callback, ModelFunction
                fittedData = CurveFit.NonLinearFit(xData, yData, weight, callback, coefficients, meanSquaredError, maximumIterations, actualNumberOfIterations)
            End Sub
             
            ' Callback function that implements the fitting model 
            Private Function ModelFunction(ByVal x As Double, ByVal coefficients As Double()) As Double
                Return (coefficients(0) * System.Math.Exp(coefficients(1) * x)) + coefficients(2)
            End Function
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            private void myFunction()
            {
                int numSamples = 50;
                double[] xData = new double[numSamples];
                double[] yData = new double[numSamples];
                double[] weight = new double[numSamples];
                double[] coefficients;
                double[] noise, fittedData;
                double a, b, meanSquaredError;
                int maximumIterations, actualNumberOfIterations;
                ModelFunctionCallback callback = new ModelFunctionCallback(ModelFunction);
             
                // Generate xData of the input data set {xData, yData}
                for (int i = 0; i &lt; xData.Length; i++)
                    xData[i] = i;
             
                // Generate yData of the input data set {xData, yData}
                a = 1.0;
                b = 0.1;
             
                GaussianNoiseSignal gaussSignal = new GaussianNoiseSignal(0.4);
                noise = gaussSignal.Generate(1000.0, numSamples);
             
                // Applying an exponential model: yData = a * exp(xData * b) + noise
                for (int i = 0; i &lt; yData.Length; i++)
                    yData[i] = (a * Math.Exp(xData[i] * b)) + noise[i];
             
               // Generate weight for input data
               for (int i = 0; i &lt; weight.Length; i++)
                   weight[i] = 1; 
             
                // Generate a ramp pattern that represents coefficients
                coefficients = PatternGeneration.Ramp(numSamples, 0.0, 3.0);
             
                maximumIterations = 100;
             
                // Calculate linear fit of the data set {xData, yData}
               fittedData = CurveFit.NonLinearFit(xData, yData, weight, callback, coefficients, out meanSquaredError, maximumIterations, out actualNumberOfIterations);}
             
            // Callback function that implements the fitting model
            private double ModelFunction(double x, double[] coefficients)
            {
                return (coefficients[0] * Math.Exp(coefficients[1] * x)) + coefficients[2];
            }
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <seealso example="Analysis/Enterprise/NonLinearFit" launch="false">Non-Linear Fit Example</seealso>
            <lastupdated>1/30/2013 12:22:40 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.EigenMatrixType">
            <summary>
            Specifies the type of input matrix for the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.EigenValueVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenMatrixType)"/> method.
            </summary>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>6/20/2003 9:13:07 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.EigenMatrixType.General">
            <summary>
            Specifies a general input matrix.
            </summary>
            <lastupdated>6/20/2003 9:13:13 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.EigenMatrixType.Hermitian">
            <summary>
            Specifies a Hermitian input matrix.
            </summary>
            <lastupdated>9/29/2005 10:20:23 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Internal.EigenOutput">
            <summary>Specifies the output choice.  Choose to either compute only the eigenvalues or both the eigenvalues and the eigenvectors.
            </summary>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>5/28/2003 11:36:42 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Internal.EigenOutput.EigenValues">
            <summary>
            Calculate eigenvalues only.
            </summary>
            <lastupdated>5/28/2003 11:36:46 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Internal.EigenOutput.EigenValuesAndVectors">
            <summary>
            Calculate eigenvalues and eigenvectors.
            </summary>
            <lastupdated>5/28/2003 11:36:48 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.FitMethod">
            <summary>
            The fit method used by the curve-fitting methods.
            </summary>
            <lastupdated>9/12/2005 1:23:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.FitMethod.LeastSquare">
            <summary>
            The curve-fitting method uses the least-square fit method.
            </summary>
            <lastupdated>9/12/2005 1:24:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.FitMethod.LeastAbsoluteResidual">
            <summary>
            The curve-fitting method uses the least absolute residual fit method. This is a robust-fitting method, 
            which is insensitive to the outliers.
            </summary>
            <lastupdated>9/12/2005 1:23:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.FitMethod.Bisquare">
            <summary>
            The curve-fitting method uses the bisquare fit method. This is a robust-fitting method, which is 
            insensitive to the outliers.
            </summary>
            <lastupdated>9/29/2005 10:20:52 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.IntegrationMethod">
            <summary>
            Specifies the <see cref="T:NationalInstruments.Analysis.Math.IntegrationMethod"/> used for numeric integration.
            </summary>
            <lastupdated>5/28/2003 11:36:56 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.IntegrationMethod.TrapeziodalRule">
            <exclude/>
            <lastupdated>7/7/2004 6:38:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.IntegrationMethod.TrapezoidalRule">
            <summary>
            Uses Trapezoidal Rule in the computation for the numeric integration.
            </summary>
            <lastupdated>7/7/2004 6:39:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.IntegrationMethod.SimpsonsRule">
            <summary>
            Uses Simpsons' Rule in the computation for the numeric integration.
            </summary>
            <lastupdated>6/24/2003 10:05:18 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.IntegrationMethod.Simpsons3by8Rule">
            <summary>
            Uses Simpsons' 3/8 Rule in the computation for the numeric integration.
            </summary>
            <lastupdated>6/2/2003 2:03:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.IntegrationMethod.BodeRule">
            <summary>
            Uses Bode Rule in the computation for the numeric integration.
            </summary>
            <lastupdated>5/28/2003 11:38:00 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.LinearAlgebra">
            <summary>
            Provides a set of methods that perform linear algebra operations.
            </summary>
            <threadsafety safety="unsafe"/>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <remarks>
            Placeholder
            </remarks>
            <seealso example="Analysis/Enterprise/LinearAlgebra" launch="false">Linear Algebra</seealso>
            <lastupdated>1/31/2013 11:41:12 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.#ctor">
            <exclude/>
            <lastupdated>9/10/2005 5:37:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.#cctor">
            <exclude/>
            <lastupdated>9/10/2005 5:37:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.DotProduct(System.Double[],System.Double[])">
            <summary>Calculates the dot product of two vectors.
            </summary>
            <param name="vectorA">
            The first vector to be used in the computation of the dot product. The number of elements in <format type="italics">x</format> must be the same as the number of elements in <paramref name="vectorB"/>.
            </param>
            <param name="vectorB">
            The second vector to be used in the computation of the dot product. The number of elements in <format type="italics">y</format> must be the same as the number of elements in <paramref name="vectorA"/>.
            </param>
            <returns>
            The dot product of <paramref name="vectorA"/> and <paramref name="vectorB"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="vectorA"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="vectorB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="vectorA"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    The number of samples in <paramref name="vectorB"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="vectorA"/> is not the same size as <paramref name="vectorB"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Let <format type="italics">X</format> represent <paramref name="vectorA"/> and <format type="italics">Y</format> represent <paramref name="vectorB"/>. The method obtains the dot product
                <format type="italics">XY</format> using the formula:
            <para indent="true">
                    <image src="DotProduct.gif"/>
                </para>
            where <format type="italics">n</format> is the number of data points. Notice that the output value <format type="italics">XY</format> is a scalar value. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 5:03:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.DotProduct(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
            <summary>Calculates the dot product of two <see cref="T:NationalInstruments.ComplexDouble"/> vectors.
            </summary>
            <param name="vectorA">
            The first <see cref="T:NationalInstruments.ComplexDouble"/> vector to be used in the computation of the dot product. The number of elements in <format type="italics">x</format> must be the same as the number of elements in <paramref name="vectorB"/>.
            </param>
            <param name="vectorB">
            The second <see cref="T:NationalInstruments.ComplexDouble"/> vector to be used in the computation of the dot product. The number of elements in <format type="italics">y</format> must be the same as the number of elements in <paramref name="vectorA"/>.
            </param>
            <returns>
            The dot product of <paramref name="vectorA"/> and <paramref name="vectorB"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="vectorA"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="vectorB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="vectorA"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    The number of samples in <paramref name="vectorB"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="vectorA"/> is not the same size as <paramref name="vectorB"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Let <format type="italics">X</format> represent <paramref name="vectorA"/> and <format type="italics">Y</format> represent <paramref name="vectorB"/>. The method obtains the dot product
                <format type="italics">XY</format> using the formula:
            <para indent="true">
                    <image src="DotProduct.gif"/>
                </para>
            where <format type="italics">n</format> is the number of data points. Notice that the output value <format type="italics">XY</format> is a scalar value. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 5:01:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Multiply(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="matrixA">
            The first matrix to be multiplied. The number of columns in <paramref name="matrixA"/> must match the number of 
            rows in <paramref name="matrixB"/>.
            </param>
            <param name="matrixB">
            The second matrix to be multiplied.
            </param>
            <returns>The result of the matrix multiplication. If <paramref name="matrixA"/> has size <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">k</format>, and <paramref name="matrixB"/> 
            has size <format type="italics">k</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">m</format>, then this matrix is of size <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">m</format>. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="matrixA"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="matrixB"/> has incorrect size for matrix multiplication. Matrix multiplication failed.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <paramref name="matrixA"/> is an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">k</format> matrix and <paramref name="matrixB"/> is a <format type="italics">k</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">m</format> matrix, the matrix multiplication of <format type="italics">A</format> and <format type="italics">B, C = AB</format>, results in a matrix, <format type="italics">C</format>, whose dimensions are <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">m</format>. Let <format type="italics">A</format> represent <paramref name="matrixA"/>, <format type="italics">B</format> represent <paramref name="matrixB"/>, and <format type="italics">C</format> represent the return value of <format type="italics">A</format> x <format type="italics">B</format>. The method obtains the elements of <format type="italics">C</format> using the formula
            <para indent="true">
                    <image src="Multiply.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where 
            </term>
                        <description>
                            <format type="italics">n</format> represents the number of rows in <paramref name="matrixA"/>, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">k</format> represents the number of columns in <paramref name="matrixA"/> and the number of rows in <paramref name="matrixB"/>, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">m</format> represents the number of columns in <paramref name="matrixB"/>.
            </description>
                    </item>
                </list>
                <note type="note">
            The <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.Multiply(System.Double[0:,0:],System.Double[0:,0:])"/> method performs a strict matrix multiplication and not an element-by-element 2D multiplication. In general, <format type="italics">AB <entity value="ne"/> BA</format>. 
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2004 1:39:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Multiply(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:])">
            <summary>
            Multiplies two <see cref="T:NationalInstruments.ComplexDouble"/> matrices.
            </summary>
            <param name="matrixA">
            The first <see cref="T:NationalInstruments.ComplexDouble"/> matrix to be multiplied. The number of columns in <paramref name="matrixA"/> must match the number of 
            rows in <paramref name="matrixB"/>.
            </param>
            <param name="matrixB">
            The second <see cref="T:NationalInstruments.ComplexDouble"/> matrix to be multiplied.
            </param>
            <returns>The <see cref="T:NationalInstruments.ComplexDouble"/> result of the matrix multiplication. If <paramref name="matrixA"/> has size <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">k</format>, and <paramref name="matrixB"/> 
            has size <format type="italics">k</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">m</format>, then this matrix is of size <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">m</format>. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="matrixA"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="matrixB"/> has incorrect size for matrix multiplication. Matrix multiplication failed.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <paramref name="matrixA"/> is an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">k</format> matrix and <paramref name="matrixB"/> is a <format type="italics">k</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">m</format> matrix, the matrix multiplication of <format type="italics">A</format> and <format type="italics">B, C = AB</format>, results in a matrix, <format type="italics">C</format>, whose dimensions are <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">m</format>. Let <format type="italics">A</format> represent <paramref name="matrixA"/>, <format type="italics">B</format> represent <paramref name="matrixB"/>, and <format type="italics">C</format> represent the return value of <format type="italics">A</format> x <format type="italics">B</format>. The method obtains the elements of <format type="italics">C</format> using the formula
            <para indent="true">
                    <image src="Multiply.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where 
            </term>
                        <description>
                            <format type="italics">n</format> represents the number of rows in <paramref name="matrixA"/>, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">k</format> represents the number of columns in <paramref name="matrixA"/> and the number of rows in <paramref name="matrixB"/>, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">m</format> represents the number of columns in <paramref name="matrixB"/>.
            </description>
                    </item>
                </list>
                <note type="note">
            The <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.Multiply(System.Double[0:,0:],System.Double[0:,0:])"/> method performs a strict matrix multiplication and not an element-by-element 2D multiplication. In general, <format type="italics">AB <entity value="ne"/> BA</format>. 
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2004 1:38:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.MultiplyMatrixByVector(System.Double[0:,0:],System.Double[])">
            <summary>
            Multiplies a real input matrix and a real input vector.
            </summary>
            <param name="inputMatrix">
            The real input matrix to multiply. The number of columns in <paramref name="inputMatrix"/> must match the number of 
            elements in <paramref name="inputVector"/>.
            </param>
            <param name="inputVector">
            The real input vector to multiply.
            </param>
            <returns>If <paramref name="inputMatrix"/> has size <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">k</format>, then the multiplication of <paramref name="inputMatrix"/> by <paramref name="inputVector"/> results in a vector of size <format type="italics">n</format>. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputMatrix"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputVector"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	The number of columns in <paramref name="inputMatrix"/> and the size of <paramref name="inputVector"/> don't match. Matrix and vector multiplication failed.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <paramref name="inputMatrix"/> is an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">k</format> matrix, then <paramref name="inputVector"/> should be of size <format type="italics">k</format>, and the matrix and vector multiplication will produce a vector of size <format type="italics">n</format>. Let <format type="italics">A</format> represent <paramref name="inputMatrix"/>, <format type="italics">B</format> represent <paramref name="inputVector"/>, and <format type="italics">C</format> represent the return value of <format type="italics">A</format> x <format type="italics">B</format>. The method obtains the elements of <format type="italics">C</format> using the formula
            <para indent="true">
            		<image src="Multiply.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where 
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of rows in <paramref name="inputMatrix"/> and the size of <paramref name="inputVector"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">k</format> represents the number of columns in <paramref name="inputMatrix"/>.</description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/14/2009 10:54:26 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.MultiplyMatrixByVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[])">
            <summary>
            Multiplies a <see cref="T:NationalInstruments.ComplexDouble"/> input matrix and a <see cref="T:NationalInstruments.ComplexDouble"/> input vector.
            </summary>
            <param name="inputMatrix">
            The <see cref="T:NationalInstruments.ComplexDouble"/> input matrix to multiply. The number of columns in <paramref name="inputMatrix"/> must match the number of 
            elements in <paramref name="inputVector"/>.
            </param>
            <param name="inputVector">
            The <see cref="T:NationalInstruments.ComplexDouble"/> input vector to multiply.
            </param>
            <returns>If <paramref name="inputMatrix"/> has size <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">k</format>, then the multiplication of <paramref name="inputMatrix"/> by <paramref name="inputVector"/> results in a vector of size <format type="italics">n</format>. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="inputMatrix"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="inputVector"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	The number of columns in <paramref name="inputMatrix"/> and the size of <paramref name="inputVector"/> don't match. Matrix and vector multiplication failed.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If <paramref name="inputMatrix"/> is an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">k</format> matrix, then <paramref name="inputVector"/> should be of size <format type="italics">k</format>, and the matrix and vector multiplication will produce a vector of size <format type="italics">n</format>. Let <format type="italics">A</format> represent <paramref name="inputMatrix"/>, <format type="italics">B</format> represent <paramref name="inputVector"/>, and <format type="italics">C</format> represent the return value of <format type="italics">A</format> x <format type="italics">B</format>. The method obtains the elements of <format type="italics">C</format> using the formula
            <para indent="true">
            		<image src="Multiply.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where 
            </term>
            			<description>
            				<format type="italics">n</format> represents the number of rows in <paramref name="inputMatrix"/> and the size of <paramref name="inputVector"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">k</format> represents the number of columns in <paramref name="inputMatrix"/>.</description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/14/2009 10:54:01 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Inverse(System.Double[0:,0:])">
            <summary>
            Calculates the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.Inverse(System.Double[0:,0:])"/> of a square matrix. 
            </summary>
            <param name="matrix">
            The square matrix to be inverted.
            </param>
            <returns>
            The <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.Inverse(System.Double[0:,0:])"/> of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            	<paramref name="matrix"/> is singular.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="matrix"/> is not a square matrix.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="matrix"/> is singular.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Use this method if the type of matrix is not known. If the type of matrix is known (<see cref="T:NationalInstruments.Analysis.Math.MatrixType"/>), 
            use the  <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralInverse(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType)"/> (Enterprise Package only) method as specifying the matrix type 
            can speed up computation.
            <para>
            Let <format type="italics">A</format> be <paramref name="matrix"/> and <format type="italics">I</format> be the identity matrix. You obtain the return value by solving the system <format type="italics">AB = I</format> for <format type="italics">B</format>.
            </para>
            	<para>
            If <format type="italics">A</format> is a nonsingular matrix, you can show that the solution to the preceding system is unique and that it corresponds to the inverse matrix of <format type="italics">A</format>
            	</para>
            	<para indent="true">
            		<format type="italics">B</format> = <format type="italics">A</format><format type="superscript"><entity value="ndash"/>1</format>
            	</para>
            	<para>
            and <format type="italics">B</format> is therefore an inverse matrix. A nonsingular matrix is a matrix in which no row or column contains a linear combination of any other row or column, respectively.
            </para>
            	<note type="note">
            The numerical implementation of the matrix inversion is not only numerically intensive but, because of its recursive nature, is also highly sensitive to round-off errors introduced by the floating-point numeric coprocessor. Although the computations use the maximum possible accuracy, the method cannot always solve for the system.
            <para>
            You cannot always determine beforehand whether <paramref name="matrix"/> is singular, especially with large systems. The <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.Inverse(System.Double[0:,0:])"/> method detects singular matrices and returns an error, so you do not need to verify whether you have a valid system before using this method.
            </para>
            		<para> If you use this method on an ill-conditioned matrix, the result may be inaccurate due to a loss of precision from arithmetic methods.   The results could also vary between machines because National Instruments uses different optimizations based on processor type.</para>
            	</note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>12/15/2011 1:55:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Transpose(System.Double[0:,0:])">
            <summary>Calculates the transpose matrix. 
            </summary>
            <param name="matrix">
            The matrix whose transpose is to be calculated.
            </param>
            <returns>
            The transposed matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the input matrix is <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">m</format>, then the output matrix is <format type="italics">m</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 5:17:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Transpose(NationalInstruments.ComplexDouble[0:,0:])">
            <summary>Calculates the <see cref="T:NationalInstruments.ComplexDouble"/> transpose matrix. 
            </summary>
            <param name="matrix">
            The <see cref="T:NationalInstruments.ComplexDouble"/> matrix whose Transpose is to be calculated.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.ComplexDouble"/> transposed matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the input matrix is <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">m</format>, then the output matrix is <format type="italics">m</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 5:17:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Determinant(System.Double[0:,0:])">
            <summary>Calculates the determinant of a square matrix with an unknown 
            <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/>.  The result is a scalar value. 
            </summary>
            <param name="matrix">
            The square matrix whose determinant is to be computed.
            </param>
            <returns>
            The determinant of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>
            If the determinant is zero, <paramref name="matrix"/> is said to be singular. Use this method if the type of 
            <paramref name="matrix"/> is unknown. If <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> is known, 
            use the overload. Specifying the correct <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> can significantly 
            speed up computation.
            </para>
                <para>
            Let <format type="italics">A</format> be a square matrix that represents <paramref name="matrix"/>, and let <format type="italics">L</format> and <format type="italics">U</format> represent the lower and upper triangular matrices, respectively, of <format type="italics">A</format> such that
            <para>
                        <para indent="true">
                            <format type="italics">A = LU</format>
                        </para>
                    </para>
            where the main diagonal elements of the lower triangular matrix <format type="italics">L</format> are arbitrarily set to one. The method finds the determinant of <format type="italics">A</format> by the product of the main diagonal elements of the upper triangular matrix <format type="italics">U</format>,
                    <para indent="true">
                        <image src="Determinant.gif"/>
                    </para>
                    <list type="table" bordered="false">
                        <listheader>
                            <term></term>
                            <description></description>
                        </listheader>
                        <item>
                            <term>
            where
            </term>
                            <description>
            |<format type="italics">A</format>| is the determinant of <format type="italics">X</format> and
            </description>
                        </item>
                        <item>
                            <term>
                            </term>
                            <description>
                                <format type="italics">n</format> is the dimension of <format type="italics">X</format>.
            </description>
                        </item>
                    </list>
                </para>
                <note type="note">
            Choose <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> 
            correctly, as it affects the speed of computation.
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/7/2004 6:09:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Determinant(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType)">
            <summary>Calculates the determinant of a square matrix with a known <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/>. 
            The result is a scalar value. 
            </summary>
            <param name="matrix">
            The square matrix whose determinant is to be computed.
            </param>
            <param name="matrixType">
            The type of input matrix. 
            </param>
            <returns>
            The determinant of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
                <para>
            -or-
            </para>
                <para>
            Invalid <paramref name="matrixType"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>
            If the determinant is zero, <paramref name="matrix"/> is said to be singular. If <paramref name="matrixType"/> is 
            unknown, use the overload. Choosing the correct <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/>  can significantly speed up computation.
            </para>
                <para>
            Let <format type="italics">A</format> be a square matrix that represents <paramref name="matrix"/>, and let L and U represent the lower and upper triangular matrices, respectively, of <format type="italics">A</format> such that
            <para>
                        <para indent="true">
                            <format type="italics">A</format> = LU
                        </para>
                    </para>
            where the main diagonal elements of the lower triangular matrix L are arbitrarily set to one. The method finds the determinant of <format type="italics">A</format> by the product of the main diagonal elements of the upper triangular matrix U,
                    <para indent="true">
                        <image src="Determinant.gif"/>
                    </para>
                    <list type="table" bordered="false">
                        <listheader>
                            <term></term>
                            <description></description>
                        </listheader>
                        <item>
                            <term>
            where
            </term>
                            <description>
            |<format type="italics">A</format>| is the determinant of <format type="italics">X</format> and 
            </description>
                        </item>
                        <item>
                            <term>
                            </term>
                            <description>
                                <format type="italics">n</format> is the dimension of <format type="italics">X</format>. 
            </description>
                        </item>
                    </list>
                </para>
                <note type="note">
            Choose <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> 
            correctly, as it affects the speed of computation.
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/7/2004 6:08:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Determinant(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.MatrixType)">
            <summary>Calculates the determinant of a <see cref="T:NationalInstruments.ComplexDouble"/> square matrix.  The result is a scalar value. 
            </summary>
            <param name="matrix">
            The square matrix whose determinant is to be computed.
            </param>
            <param name="matrixType">
            The type of matrix. 
            </param>
            <returns>
            The determinant of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
                <para>
            -or-
            </para>
                <para>
            Invalid <paramref name="matrixType"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the determinant is zero, <paramref name="matrix"/> is said to be singular.
            <para>
            Let <format type="italics">A</format> be a square matrix that represents <paramref name="matrix"/>, and let <format type="italics">L</format> and <format type="italics">U</format> represent the lower and upper triangular matrices, respectively, of <format type="italics">A</format> such that
            <para>
                        <para indent="true">
                            <format type="italics">A = LU</format>
                        </para>
                    </para>
            where the main diagonal elements of the lower triangular matrix <format type="italics">L</format> are arbitrarily set to one. The method finds the determinant of <format type="italics">A</format> by the product of the main diagonal elements of the upper triangular matrix <format type="italics">U</format>,
                    <para indent="true">
                        <image src="Determinant.gif"/>
                    </para>
                    <list type="table" bordered="false">
                        <listheader>
                            <term></term>
                            <description></description>
                        </listheader>
                        <item>
                            <term>
            where
            </term>
                            <description>
            |<format type="italics">A</format>| is the determinant of <format type="italics">X</format> and 
            </description>
                        </item>
                        <item>
                            <term>
                            </term>
                            <description>
                                <format type="italics">n</format> is the dimension of <format type="italics">X</format>.
            </description>
                        </item>
                    </list>
                </para>
                <note type="note">
            Choose <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> 
            correctly, as it affects the speed of computation.
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/7/2004 6:11:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Trace(System.Double[0:,0:])">
            <summary>Calculates the trace of a matrix. The trace is the sum of all the diagonal elements of the matrix.
            </summary>
            <param name="inputSquareMatrix">
            The matrix whose trace is to be calculated.
            </param>
            <returns>
            The trace of <paramref name="inputSquareMatrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="inputSquareMatrix"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Let <format type="italics">A</format> be a matrix that represents <paramref name="inputSquareMatrix"/> and <format type="italics">tr(A)</format> be trace. The trace of <format type="italics">A</format> is the sum of the main diagonal elements of <format type="italics">A</format>
                <para indent="true">
                    <image src="Trace.gif"/>
                </para>
            where <format type="italics">n</format> is the size of <paramref name="inputSquareMatrix"/>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 5:17:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Trace(NationalInstruments.ComplexDouble[0:,0:])">
            <summary>Calculates the trace of a <see cref="T:NationalInstruments.ComplexDouble"/> matrix. The trace is the sum of all the diagonal elements of the matrix.
            </summary>
            <param name="inputSquareMatrix">
            The <see cref="T:NationalInstruments.ComplexDouble"/> matrix whose trace is to be calculated.
            </param>
            <returns>
            The trace of <paramref name="inputSquareMatrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="inputSquareMatrix"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Let <format type="italics">A</format> be a matrix that represents <paramref name="inputSquareMatrix"/> and <format type="italics">tr(A)</format> be trace. The trace of <format type="italics">A</format> is the sum of the main diagonal elements of <format type="italics">A</format>
                <para indent="true">
                    <image src="Trace.gif"/>
                </para>
            where <format type="italics">n</format> is the size of <paramref name="inputSquareMatrix"/>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 5:16:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.OuterProduct(System.Double[],System.Double[])">
            <summary>
            Computes the outer product of the real input vectors.
            </summary>
            <param name="vectorA">
            The first vector to be used in the computation of the outer product.
            </param>
            <param name="vectorB">
            The second vector to be used in the computation of the outer product.
            </param>
            <returns>
            The outer product of the input vectors.  If <paramref name="vectorA"/> is of dimensions <format type="italics">m</format> and 
            <paramref name="vectorB"/> is of dimensions <format type="italics">n</format>, then the size of this matrix is <format type="italics">m</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n</format>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="vectorA"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="vectorB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="vectorA"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    The number of samples in <paramref name="vectorB"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Let <format type="italics">X</format> represent <paramref name="vectorA"/>, and <format type="italics">Y</format> represent <paramref name="vectorB"/>. The method obtains the outer product using the following formula:
            <para indent="true">
                    <image src="OuterProduct.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">A</format> represents the 2D return value,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">n</format> represents the number of elements in <paramref name="vectorA"/>, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">m</format> represents the number of elements in <paramref name="vectorB"/>. 
            </description>
                    </item>
                </list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 5:12:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.OuterProduct(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
            <summary>
            Computes the outer product of the <see cref="T:NationalInstruments.ComplexDouble"/>  input vectors.
            </summary>
            <param name="vectorA">
            The first <see cref="T:NationalInstruments.ComplexDouble"/> vector to be used in the computation of the outer product.
            </param>
            <param name="vectorB">
            The second <see cref="T:NationalInstruments.ComplexDouble"/> vector to be used in the computation of the outer product.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.ComplexDouble"/> outer product of the input vectors.  If <paramref name="vectorA"/> is of dimensions <format type="italics">m</format> and 
            <paramref name="vectorB"/> is of dimensions <format type="italics">n</format>, then the size of this matrix is <format type="italics">m</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n</format>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="vectorA"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="vectorB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="vectorA"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    The number of samples in <paramref name="vectorB"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Let <format type="italics">X</format> represent <paramref name="vectorA"/>, and <format type="italics">Y</format> represent <paramref name="vectorB"/>. The method obtains outer product using the following formula:
            <para indent="true">
                    <image src="OuterProduct.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">A</format> represents the 2D return value,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">n</format> represents the number of elements in <paramref name="vectorA"/>, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">m</format> represents the number of elements in <paramref name="vectorB"/>. 
            </description>
                    </item>
                </list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 5:12:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Rank(System.Double[0:,0:],System.Double)">
            <summary>
            Calculates the rank of a real input matrix. 
            </summary>
            <param name="matrix">
            The input matrix whose rank is to be determined. The input matrix can be square or rectangular.
            </param>
            <param name="tolerance">
            The value that is used to calculate the rank of <paramref name="matrix"/>. The rank is the number of singular values 
            of the input matrix that are larger than the tolerance.
            </param>
            <returns>
            The resulting rank of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The rank of a matrix is defined as the maximum number of linearly independent rows or columns of the matrix.  It is always less than or equal to the 
            minimum number of rows and columns of the matrix. 
            Any negative tolerance (default is <entity value="ndash"/>1) causes an internal tolerance of 
            <para indent="true">
            max(<format type="italics">m,n</format>)*<format type="italics">A</format>2*eps 
            </para>
            to be used,
            <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where 
            </term>
                        <description>
                            <format type="italics">A</format>2 represents the 2<entity value="ndash"/>norm of <paramref name="matrix"/>,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">m</format> represents the number of rows in <format type="italics">A</format>,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">n</format> represents the number of columns in <format type="italics">A</format>, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            eps = 2<format type="superscript"><entity value="ndash"/>52</format> = 2.22<format type="italics">e</format>
                            <entity value="ndash"/> 16.
            </description>
                    </item>
                </list>
                <para indent="true">
                </para>
            Matrix rank is the number of singular values in <paramref name="matrix"/> that are larger than the tolerance. Rank is the maximum number of independent rows or columns in <paramref name="matrix"/>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 5:13:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Rank(NationalInstruments.ComplexDouble[0:,0:],System.Double)">
            <summary>
            Calculates the rank 
            of a <see cref="T:NationalInstruments.ComplexDouble"/> input matrix. 
            </summary>
            <param name="matrix">
            The <see cref="T:NationalInstruments.ComplexDouble"/> input matrix whose rank is to be determined. The input matrix can be square or rectangular.
            </param>
            <param name="tolerance">
            The value that is used to calculate the rank of <paramref name="matrix"/>. The rank is the number of singular values 
            of the input matrix that are larger than the tolerance.
            </param>
            <returns>
            The resulting rank of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The rank of a matrix is defined as the maximum number of linearly independent rows or columns of the matrix.  It is always less than or equal to the 
            minimum number of rows and columns of the matrix. 
            Any negative tolerance (default is <entity value="ndash"/>1) causes an internal tolerance of 
            <para indent="true">
            max(<format type="italics">m,n</format>)*<format type="italics">A</format>2*eps 
            </para>
            to be used,
            <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where 
            </term>
                        <description>
                            <format type="italics">A</format>2 represents the 2<entity value="ndash"/>norm of <paramref name="matrix"/>,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">m</format> represents the number of rows in <format type="italics">A</format>,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">n</format> represents the number of columns in <format type="italics">A</format>, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            eps = 2<format type="superscript"><entity value="ndash"/>52</format> = 2.22<format type="italics">e</format>
                            <entity value="ndash"/> 16.
            </description>
                    </item>
                </list>
                <para indent="true">
                </para>
            Matrix rank is the number of singular values in <paramref name="matrix"/> that are larger than the tolerance. Rank is the maximum number of independent rows or columns in <paramref name="matrix"/>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 5:13:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Norm(System.Double[0:,0:],NationalInstruments.Analysis.Math.NormType)">
            <summary>
            Calculates the norm of the input matrix. The norm of a matrix is a scalar that 
            gives some measure of the size of the elements in the matrix.
            </summary>
            <param name="matrix">
            The matrix whose norm is to be calculated. <paramref name="matrix"/> can be either rectangular or square.  
            </param>
            <param name="normType">
            The type of norm which is used to compute the norm of <paramref name="matrix"/>. <see cref="T:NationalInstruments.Analysis.Math.NormType"/> gives the available types of norms.
            </param>
            <returns>
            The norm of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
            Invalid <paramref name="normType"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>
            Let <format type="italics">A</format> represent <paramref name="matrix"/>, the norm of <format type="italics">A</format> is represented by 
            <para indent="true">
                        <image src="Norm.gif"/>
                    </para>
            where <format type="italics">p</format> can be 1, 2, <format type="italics">F</format>, <image src="infinity.gif"/>. Different values of <format type="italics">p</format> mean different types of norms that are computed. 
            </para>
                <para>
                    <see cref="F:NationalInstruments.Analysis.Math.NormType.TwoNorm"/>
                    <image src="Norm3.gif"/> is the largest singular value of <paramref name="matrix"/>. 
            </para>
                <para>
                    <see cref="F:NationalInstruments.Analysis.Math.NormType.OneNorm"/>
                    <image src="Norm2.gif"/> is the largest column sum of <paramref name="matrix"/>.
            </para>
                <para>
                    <see cref="F:NationalInstruments.Analysis.Math.NormType.FrobeniusNorm"/>
                    <image src="Norm4.gif"/> is equal to 
            <para indent="true">
                        <image src="Norm6.gif"/>
                    </para>
            where diag A<format type="superscript">T</format>A means the diagonal elements of <paramref name="matrix"/> 
            A<format type="superscript">T</format>A, A<format type="superscript">T</format> is the transpose of A.
            </para>
                <para>
                    <see cref="F:NationalInstruments.Analysis.Math.NormType.InfiniteNorm"/>
                    <image src="Norm5.gif"/> is the largest row sum of <paramref name="matrix"/>.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Math.NormType"/>
            <lastupdated>7/9/2003 5:12:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Norm(System.Double[],NationalInstruments.Analysis.Math.VectorNormType)">
            <summary>
            Calculate the norm of the input vector and normalize the input vector.
            </summary>
            <param name="vector">
            The input array to calculate the norm from. On output, the input array gets normalized.
            </param>
            <param name="normType">
            The norm type to compute.
            </param>
            <returns>
            The norm of <paramref name="vector"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>This method obtains the norm using the following formula according to <paramref name="normType"/>:</para>
            	<list type="table">
            		<listheader>
            			<term>Formula</term>
            			<description>normType</description>
            		</listheader>
            		<item>
            			<term>
            				<image src="UnitVectorform_0.png"/>
            			</term>
            			<description>
            				<see cref="F:NationalInstruments.Analysis.Math.VectorNormType.OneNorm" crefType="Unqualified"/>
            			</description>
            		</item>
            		<item>
            			<term>
            				<image src="UnitVectorform_1.png"/>
            			</term>
            			<description>
            				<see cref="F:NationalInstruments.Analysis.Math.VectorNormType.TwoNorm" crefType="Unqualified"/>
            			</description>
            		</item>
            		<item>
            			<term>
            				<image src="UnitVectorform_2.png"/>
            			</term>
            			<description>
            				<see cref="F:NationalInstruments.Analysis.Math.VectorNormType.InfiniteNorm" crefType="Unqualified"/>
            			</description>
            		</item>
            		<item>
            			<term>
            				<image src="UnitVectorform_3.png"/>
            			</term>
            			<description>
            				<see cref="F:NationalInstruments.Analysis.Math.VectorNormType.NegativeInfiniteNorm" crefType="Unqualified"/>
            			</description>
            		</item>
            	</list>
            	<para>Where <format type="italics">x</format> is <paramref name="vector"/>.</para>
            	<para>This method calculates the unit vector using the following equation:</para>
            	<para indent="true"><image src="UnitVectorform_5.png"/></para>
            </remarks>
            <lastupdated>12/1/2011 12:51:47 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Norm(System.Double[],System.Double)">
            <summary>
            Calculate the norm of the input vector and normalize the input vector.
            </summary>
            <param name="vector">
            The input array to calculate the norm from. On output, the input array gets normalized.
            </param>
            <param name="usedDefinedNorm">
            A user-defined norm type to compute.
            </param>
            <returns>
            The norm of <paramref name="vector"/>.
            </returns>
            <remarks>
            	<para>This method obtains the norm using the following formula:</para>
            	<para indent="true"><image src="UnitVectorform_4.png"/></para>
            	<para>Where <format type="italics">x</format> is <paramref name="vector"/>, <format type="italics">y</format> is <paramref name="usedDefinedNorm"/>.</para>
            	<para>This method calculates the unit vector using the following equation:</para>
            	<para indent="true"><image src="UnitVectorform_5.png"/></para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>12/1/2011 12:44:36 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Norm(NationalInstruments.ComplexDouble[],NationalInstruments.Analysis.Math.VectorNormType)">
            <summary>
            Calculate the norm of the input vector and normalize the input vector.
            </summary>
            <param name="vector">
            The input array to calculate the norm from. On output, the input array gets normalized.
            </param>
            <param name="normType">
            The norm type to compute.
            </param>
            <returns>
            The norm of <paramref name="vector"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <lastupdated>11/11/2011 1:47:39 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Norm(NationalInstruments.ComplexDouble[],System.Double)">
            <summary>
            Calculate the norm of the input vector and normalize the input vector.
            </summary>
            <param name="vector">
            The input array to calculate the norm from. On output, the input array gets normalized.
            </param>
            <param name="usedDefinedNorm">
            A user-defined norm type to compute.
            </param>
            <returns>
            The norm of <paramref name="vector"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <lastupdated>11/11/2011 1:47:34 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.Norm(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.NormType)">
            <summary>
            Calculates the norm of the <see cref="T:NationalInstruments.ComplexDouble"/> input matrix. The norm of a matrix is a scalar that 
            gives some measure of the size of the elements in the matrix.
            </summary>
            <param name="matrix">
            The <see cref="T:NationalInstruments.ComplexDouble"/> matrix whose norm is to be calculated. <paramref name="matrix"/> can be either rectangular or square.  
            </param>
            <param name="normType">
            The type of norm which is used to compute the norm of <paramref name="matrix"/>. <see cref="T:NationalInstruments.Analysis.Math.NormType"/> gives the available types of norms.
            </param>
            <returns>
            The norm of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
            Invalid <paramref name="normType"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>
            Let <format type="italics">A</format> represent <paramref name="matrix"/>, the norm of <format type="italics">A</format> is represented by 
            <para indent="true">
                        <image src="Norm.gif"/>
                    </para>
            where <format type="italics">p</format> can be 1, 2, <format type="italics">F</format>, <image src="infinity.gif"/>. Different values of <format type="italics">p</format> mean different types of norms that are computed. 
            </para>
                <para>
                    <see cref="F:NationalInstruments.Analysis.Math.NormType.TwoNorm"/>
                    <image src="Norm3.gif"/> is the largest singular value of <paramref name="matrix"/>. 
            </para>
                <para>
                    <see cref="F:NationalInstruments.Analysis.Math.NormType.OneNorm"/>
                    <image src="Norm2.gif"/> is the largest column sum of <paramref name="matrix"/>.
            </para>
                <para>
                    <see cref="F:NationalInstruments.Analysis.Math.NormType.FrobeniusNorm"/>
                    <image src="Norm4.gif"/> is equal to 
            <para indent="true">
                        <image src="Norm6.gif"/>
                    </para>
            where diag A<format type="superscript">T</format>A means the diagonal elements of <paramref name="matrix"/> 
            A<format type="superscript">T</format>A, A<format type="superscript">T</format> is the transpose of A.
            </para>
                <para>
                    <see cref="F:NationalInstruments.Analysis.Math.NormType.InfiniteNorm"/>
                    <image src="Norm5.gif"/> is the largest row sum of <paramref name="matrix"/>.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.Analysis.Math.NormType"/>
            <lastupdated>7/9/2003 5:12:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.ConditionNumber(System.Double[0:,0:],NationalInstruments.Analysis.Math.NormType)">
            <summary>
            Calculates the condition number of a matrix. The condition number of a matrix measures the sensitivity of a system solution of linear equations to 
            errors in the data.
            </summary>
            <param name="matrix">
            The input matrix whose condition number is to be determined.  <paramref name="matrix"/> must be square, 
            unless the norm type is a 2-norm, in which case <paramref name="matrix"/> can be square or rectangular.
            </param>
            <param name="normType">
            The <see cref="T:NationalInstruments.Analysis.Math.NormType"/> that should be used to compute the condition number of the matrix.
            </param>
            <returns>
            The <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.ConditionNumber(System.Double[0:,0:],NationalInstruments.Analysis.Math.NormType)"/> of <paramref name="matrix"/>. 
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
                <paramref name="matrix"/> is singular.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is rectangular but <see cref="T:NationalInstruments.Analysis.Math.NormType"/> is not
            <see cref="F:NationalInstruments.Analysis.Math.NormType.TwoNorm"/>.
                </para>
                <para>
            -or-
            </para>
                <para>
            Invalid <paramref name="normType"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.ConditionNumber(System.Double[0:,0:],NationalInstruments.Analysis.Math.NormType)"/> defines <format type="italics">c</format> as
            <para indent="true">
                    <image src="ConditionNumber1.gif"/>
                </para>
            where <image src="ConditionNumber2.gif"/> is the norm of <paramref name="matrix"/>
                <format type="italics">A</format>. Different values of <format type="italics">p</format> define the different <paramref name="normType"/>, therefore <format type="italics">p</format> defines different types of computations of condition numbers.
            <para>
            For the 2-norm <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.ConditionNumber(System.Double[0:,0:],NationalInstruments.Analysis.Math.NormType)"/>, <format type="italics">c</format> is the ratio of the largest, singular value of <format type="italics">A</format> to the smallest, singular value of <format type="italics">A</format>.
            </para>
                <para>
            The condition number of a matrix gives an indication of the accuracy of the results from a matrix inversion and a linear equation solution. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/7/2004 6:37:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.ConditionNumber(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.NormType)">
            <summary>
            Calculates the <see cref="T:NationalInstruments.ComplexDouble"/> condition number of a matrix. 
            The condition number of a matrix measures the sensitivity of a system solution of linear equations to 
            errors in the data.
            </summary>
            <param name="matrix">
            The input matrix whose condition number is to be determined.  <paramref name="matrix"/> must be square, 
            unless the norm type is a 2-norm, in which case, <paramref name="matrix"/> can be square or rectangular.
            </param>
            <param name="normType">
            The <see cref="T:NationalInstruments.Analysis.Math.NormType"/> used to compute the condition number of the matrix.
            </param>
            <returns>
            The condition number of <paramref name="matrix"/>. 
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
                <paramref name="matrix"/> is singular.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is rectangular but <see cref="T:NationalInstruments.Analysis.Math.NormType"/> is not
            <see cref="F:NationalInstruments.Analysis.Math.NormType.TwoNorm"/>.
                </para>
                <para>
            -or-
            </para>
                <para>
            Invalid <paramref name="normType"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.ConditionNumber(System.Double[0:,0:],NationalInstruments.Analysis.Math.NormType)"/> defines <format type="italics">c</format> as
            <para indent="true">
                    <image src="ConditionNumber1.gif"/>
                </para>
            where <image src="ConditionNumber2.gif"/> is the norm of <paramref name="matrix"/>
                <format type="italics">A</format>. Different values of <format type="italics">p</format> define the different <paramref name="normType"/>, therefore <format type="italics">p</format> defines different types of computations of condition numbers.
            <para>
            For the 2-norm <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.ConditionNumber(System.Double[0:,0:],NationalInstruments.Analysis.Math.NormType)"/>, <format type="italics">c</format> is the ratio of the largest, singular value of <format type="italics">A</format> to the smallest, singular value of <format type="italics">A</format>.
            </para>
                <para>
            The condition number of a matrix gives an indication of the accuracy of the results from a matrix inversion and a linear equation solution. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/7/2004 6:22:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateIdentityMatrix(System.Int32)">
            <summary>
            Generates an identity matrix.
            </summary>
            <param name="size">
            The number of diagonal elements in the identity matrix.
            </param>
            <returns>
            Returns the generated identity matrix.
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="size"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Generate an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n</format> identity matrix.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/27/2003 5:10:40 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateIdentityMatrixComplex(System.Int32)">
            <summary>
            Generates a <see cref="T:NationalInstruments.ComplexDouble"/> identity matrix.
            </summary>
            <param name="size">
            The number of diagonal elements in the identity matrix.
            </param>
            <returns>
            Returns the generated <see cref="T:NationalInstruments.ComplexDouble"/> identity matrix.
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="size"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Generate an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n</format> identity matrix.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/27/2003 5:10:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateDiagonalMatrix(System.Double[])">
            <summary>
            Generates a diagonal matrix.
            </summary>
            <param name="diagonalData">
            The input array.
            </param>
            <returns>
            The generated diagonal matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="diagonalData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="diagonalData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Generate an <format type="italics">nx</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">nx</format> diagonal matrix whose diagonal elements are the elements of <format type="italics">X</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/27/2003 5:08:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateDiagonalMatrix(NationalInstruments.ComplexDouble[])">
            <summary>
            Generates a <see cref="T:NationalInstruments.ComplexDouble"/> diagonal matrix.
            </summary>
            <param name="diagonalData">
            The <see cref="T:NationalInstruments.ComplexDouble"/> input array.
            </param>
            <returns>
            The generated <see cref="T:NationalInstruments.ComplexDouble"/> diagonal matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="diagonalData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="diagonalData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Generate an <format type="italics">nx</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">nx</format> diagonal matrix whose diagonal elements are the elements of <format type="italics">X</format>.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/27/2003 5:08:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateToeplitzMatrix(System.Double[],System.Double[])">
            <summary>
            Generates a Toeplitz matrix.
            </summary>
            <param name="inputXData">
            The array that is the first row in the generated Toeplitz matrix.
            </param>
            <param name="inputYData">
            The array that is the first column in the generated Toeplitz matrix.
            </param>
            <returns>
            The generated Toeplitz matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="inputXData"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/27/2003 5:10:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateToeplitzMatrix(NationalInstruments.ComplexDouble[],NationalInstruments.ComplexDouble[])">
            <summary>
            Generates a <see cref="T:NationalInstruments.ComplexDouble"/> Toeplitz matrix.
            </summary>
            <param name="inputXData">
            The <see cref="T:NationalInstruments.ComplexDouble"/> array that is the first row in the generated Toeplitz matrix.
            </param>
            <param name="inputYData">
            The <see cref="T:NationalInstruments.ComplexDouble"/> array that is the first column in the generated Toeplitz matrix.
            </param>
            <returns>
                
            The generated <see cref="T:NationalInstruments.ComplexDouble"/> Toeplitz matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="inputXData"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="inputYData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="inputXData"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    The number of samples in <paramref name="inputYData"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/27/2003 5:10:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateVandermondeMatrix(System.Double[])">
            <summary>
            Generates a Vandermonde matrix.
            </summary>
            <param name="baseValues">
            The input array.
            </param>
            <returns>
            The generated Vandermonde matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="baseValues"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="baseValues"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Generate an <format type="italics">nx</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">nx</format> Vandermonde matrix whose columns are powers of the elements of <format type="italics">X</format>. The elements of a Vandermonde matrix are:
            <para indent="true">
                    <image src="CreateVandermondeMatrix.gif"/>
                </para>
            where <format type="italics">i,j</format> = 0... <format type="italics">nx</format><entity value="ndash"/>1. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/27/2003 5:09:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateVandermondeMatrix(NationalInstruments.ComplexDouble[])">
            <summary>
            Generates a <see cref="T:NationalInstruments.ComplexDouble"/> Vandermonde matrix.
            </summary>
            <param name="baseValues">
            The <see cref="T:NationalInstruments.ComplexDouble"/> input array.
            </param>
            <returns>
            The generated <see cref="T:NationalInstruments.ComplexDouble"/> Vandermonde matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="baseValues"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="baseValues"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Generate an <format type="italics">nx</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">nx</format> Vandermonde matrix whose columns are powers of the elements of <format type="italics">X</format>. The elements of a Vandermonde matrix are:
            <para indent="true">
                    <image src="CreateVandermondeMatrix.gif"/>
                </para>
            where <format type="italics">i,j</format> = 0... <format type="italics">nx</format><entity value="ndash"/>1. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/27/2003 5:09:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateCompanionMatrix(System.Double[])">
            <summary>
            Generates a companion matrix.
            </summary>
            <param name="polynomialCoefficients">
            The input array.
            </param>
            <returns>
            The generated companion matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="polynomialCoefficients"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="polynomialCoefficients"/> is equal to zero.
            </exception>
            <exception cref="T:System.DivideByZeroException">
            A divide by zero error occurred when calculating the matrix elements.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Generate an <format type="italics">nx</format><entity value="ndash"/>1<entity value="ndash"/>by<entity value="ndash"/><format type="italics">nx</format><entity value="ndash"/>1 companion matrix. If vector <format type="italics">X</format> is a vector of a <paramref name="polynomialCoefficients"/>, the first element of <format type="italics">X</format> is the coefficient of the highest order, the last element of <format type="italics">X</format> is the constant term in the polynomial, the corresponding companion matrix is constructed as follows: the first row is 
            <para indent="true">
                    <image src="CreateCompanionMatrix.gif"/>
                </para>
            the rest of <format type="italics">B</format> from the second row is an identity matrix. 
            <para>
            The eigenvalues of a companion matrix contain the roots of the corresponding polynomial. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/27/2003 5:07:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CreateCompanionMatrix(NationalInstruments.ComplexDouble[])">
            <summary>
            Generates a <see cref="T:NationalInstruments.ComplexDouble"/> companion matrix.
            </summary>
            <param name="polynomialCoefficients">
            The <see cref="T:NationalInstruments.ComplexDouble"/> input array.
            </param>
            <returns>
            The generated <see cref="T:NationalInstruments.ComplexDouble"/> companion matrix.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="polynomialCoefficients"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="polynomialCoefficients"/> is equal to zero.
            </exception>
            <exception cref="T:System.DivideByZeroException">
            A divide by zero error occurred when calculating the matrix elements.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
             Generate an <format type="italics">nx</format><entity value="ndash"/>1<entity value="ndash"/>by<entity value="ndash"/><format type="italics">nx</format><entity value="ndash"/>1 companion matrix. If vector <format type="italics">X</format> is a vector of a <paramref name="polynomialCoefficients"/>, the first element of <format type="italics">X</format> is the coefficient of the highest order, the last element of <format type="italics">X</format> is the constant term in the polynomial, the corresponding companion matrix is constructed as follows: the first row is 
            <para indent="true">
                    <image src="CreateCompanionMatrix.gif"/>
                </para>
            the rest of <format type="italics">B</format> from the second row is an identity matrix. 
            <para>
            The eigenvalues of a companion matrix contain the roots of the corresponding polynomial. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/27/2003 5:07:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.IsPositiveDefinite(System.Double[0:,0:])">
            <summary>
            Checks the positive definiteness of the real square input matrix <format type="italics">A</format>.  A real matrix is 
            positive definite if and only if it is symmetric and of the quadratic form <format type="italics">X'AX</format> &gt; 0 
            for all nonzero vectors <format type="italics">X</format>. 
            </summary>
            <param name="matrix">
            The input matrix which is to be tested for positive definiteness.
            </param>
            <returns>
            The positive definiteness of <paramref name="matrix"/>. <see langword="true"/> if <paramref name="matrix"/>
            is positive definite; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>7/9/2003 5:06:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.IsPositiveDefinite(NationalInstruments.ComplexDouble[0:,0:])">
            <summary>
            Checks the positive definiteness of the <see cref="T:NationalInstruments.ComplexDouble"/> square input matrix <format type="italics">A</format>.  A matrix is 
            positive definite if and only if it is symmetric and of the quadratic form <format type="italics">X'AX</format> &gt; 0 
            for all nonzero vectors <format type="italics">X</format>. 
            </summary>
            <param name="matrix">
            The <see cref="T:NationalInstruments.ComplexDouble"/> input matrix which is to be tested for positive definiteness.
            </param>
            <returns>
            The positive definiteness of <paramref name="matrix"/>. <see langword="true"/> if <paramref name="matrix"/>
            is positive definite; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>6/25/2003 5:06:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(System.Double[0:,0:],System.Double)">
            <summary>
            Calculates the generalized inverse of a rectangular, real input matrix. This method uses the Singular Value Decomposition (SVD) technique.
            </summary>
            <param name="matrix">
            The input matrix whose <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(System.Double[0:,0:],System.Double)"/> is to be computed. <paramref name="matrix"/> can be either rectangular or square.  
            </param>
            <param name="tolerance">
            The value below which all the singular values are set equal to zero. This value determines the level of accuracy in the 
            final solution.
            </param>
            <returns>
            The result <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(System.Double[0:,0:],System.Double)"/> of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            You compute <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(System.Double[0:,0:],System.Double)"/>
                <paramref name="matrix "/>
                <format type="italics">A</format><format type="superscript">+</format> by using the SVD algorithm and any singular value less than the tolerance, which is set to zero.
            If the <format type="italics">m</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n </format><paramref name="matrix "/>
                <format type="italics">A</format><format type="superscript">+</format> satisfies the following four Moore-Penrose conditions:
            <list type="number">
                    <item>
                        <description>
                            <format type="italics">A</format>
                            <format type="italics">A</format><format type="superscript">+</format>
                            <format type="italics">A</format> = <format type="italics">A</format>
                        </description>
                    </item>
                    <item>
                        <description>
                            <format type="italics">A</format><format type="superscript">+</format>
                            <format type="italics">A</format>
                            <format type="italics">A</format><format type="superscript">+</format> = <format type="italics">A</format><format type="superscript">+</format>
                        </description>
                    </item>
                    <item>
                        <description>
                            <format type="italics">A</format>
                            <format type="italics">A</format><format type="superscript">+</format> is a symmetric matrix 
            </description>
                    </item>
                    <item>
                        <description>
                            <format type="italics">A</format><format type="superscript">+</format>
                            <format type="italics">A</format> is a symmetric matrix
            </description>
                    </item>
                </list>
            then <format type="italics">A</format><format type="superscript">+</format> is called the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(System.Double[0:,0:],System.Double)"/> of <paramref name="matrix "/>
                <format type="italics">A</format>.
            <para>
            If <paramref name="matrix"/> A is square and not singular, then the pseudoinverse is the same as the 
            inverse of a matrix, and the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(System.Double[0:,0:],System.Double)"/> 
            method should be used as a more efficient method of computing the inverse of <paramref name="matrix"/>.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/25/2003 5:13:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(NationalInstruments.ComplexDouble[0:,0:],System.Double)">
            <summary>
            Calculates the generalized inverse of a rectangular, <see cref="T:NationalInstruments.ComplexDouble"/> input matrix. This method uses the Singular Value Decomposition (SVD) technique.
            </summary>
            <param name="matrix">
            The <see cref="T:NationalInstruments.ComplexDouble"/> input matrix whose <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(System.Double[0:,0:],System.Double)"/> is to be computed. <paramref name="matrix"/> can be either rectangular or square.  
            </param>
            <param name="tolerance">
            The value below which all the singular values are set equal to zero. This value determines the level of accuracy in the 
            final solution.
            </param>
            <returns>
            The result <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(System.Double[0:,0:],System.Double)"/> of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            You compute <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(System.Double[0:,0:],System.Double)"/>
                <paramref name="matrix "/>
                <format type="italics">A</format><format type="superscript">+</format> by using the SVD algorithm where the singular values are compared to the tolerance, before being used in the computation.
            If the <format type="italics">m</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n </format><paramref name="matrix "/>
                <format type="italics">A</format><format type="superscript">+</format> satisfies the following four Moore-Penrose conditions:
            <list type="number">
                    <item>
                        <description>
                            <format type="italics">A</format>
                            <format type="italics">A</format><format type="superscript">+</format>
                            <format type="italics">A</format> = <format type="italics">A</format>
                        </description>
                    </item>
                    <item>
                        <description>
                            <format type="italics">A</format><format type="superscript">+</format>
                            <format type="italics">A</format>
                            <format type="italics">A</format><format type="superscript">+</format> = <format type="italics">A</format><format type="superscript">+</format>
                        </description>
                    </item>
                    <item>
                        <description>
                            <format type="italics">A</format>
                            <format type="italics">A</format><format type="superscript">+</format> is a Hermitian matrix 
            </description>
                    </item>
                    <item>
                        <description>
                            <format type="italics">A</format><format type="superscript">+</format>
                            <format type="italics">A</format> is a Hermitian matrix
            </description>
                    </item>
                </list>
            then <format type="italics">A</format><format type="superscript">+</format> is called the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(System.Double[0:,0:],System.Double)"/> of <paramref name="matrix "/>
                <format type="italics">A</format>.
            <para>
            If <paramref name="matrix"/> A is square and not singular, then the pseudoinverse is the same as the 
            inverse of a matrix, and the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.PseudoInverse(System.Double[0:,0:],System.Double)"/> 
            method should be used as a more efficient method of computing the inverse of <paramref name="matrix"/>.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/25/2003 5:13:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.KroneckerProduct(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>Calculates the Kronecker product of two matrices.
            </summary>
            <param name="matrixA">
            The first real matrix to use in the computation of the dot product.</param>
            <param name="matrixB">
            The second real matrix to use in the computation of the dot product.</param>
            <returns>
            The Kronecker product of <paramref name="matrixA"/> and <paramref name="matrixB"/>. If <paramref name="matrixA"/> is m-by-n and 
            <paramref name="matrixB"/> is k-by-l, then the size of the Kronecker product matrix is nk-by-ml.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="matrixA"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="matrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Computes the Kronecker product result matrix z as follows:
            <para indent="true">
            		<image src="KroneckerProductform_4.png"/>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:48:17 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.KroneckerProduct(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:])">
            <summary>Calculates the Kronecker product of two <see cref="T:NationalInstruments.ComplexDouble"/> matrices.
            </summary>
            <param name="matrixA">
            The first <see cref="T:NationalInstruments.ComplexDouble"/> matrix to use in the computation of the dot product.</param>
            <param name="matrixB">
            The second <see cref="T:NationalInstruments.ComplexDouble"/> matrix to use in the computation of the dot product.</param>
            <returns>
            The Kronecker product of <paramref name="matrixA"/> and <paramref name="matrixB"/>. If <paramref name="matrixA"/> is m-by-n and 
            <paramref name="matrixB"/> is k-by-l then the size of the Kronecker product matrix is nk-by-ml.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="matrixA"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="matrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Computes the Kronecker product result matrix z as follows:
            <para indent="true">
            		<image src="KroneckerProductform_4.png"/>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:47:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.AutocorrelationMatrix(System.Double[],System.Int32,NationalInstruments.Analysis.Math.AutocorrelationMatrixMethod)">
            <summary>
            Computes the autocorrelation matrix of the input vector with the specified order and method.
            </summary>
            <param name="inputVector">
            The input vector.
            </param>
            <param name="order">
            The order of the autocorrelation matrix.
            </param>
            <param name="method">
            The method used to compute the autocorrelation matrix.
            </param>
            <returns>
            The autocorrelation matrix of the input vector.
            </returns>
            <remarks><para>This method obtains the autocorrelation matrix using the following formula:</para>
            <para indent="true"><image src="AutoCorrMtrxform_0.png"/></para>
            <para>Where <format type="italics">A</format> is the autocorrelation matrix, <format type="italics">R</format> is the data matrix, and <format type="italics">s</format> is the normalization factor. <format type="italics">R<format type="superscript">H</format></format> is the conjugate transpose of matrix <format type="italics">R</format>.</para>
            </remarks>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            <paramref name="order"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputVector "/> is <see langword="null"/>.
            </exception>
            <lastupdated>5/29/2012 2:02:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.AutocorrelationMatrix(NationalInstruments.ComplexDouble[],System.Int32,NationalInstruments.Analysis.Math.AutocorrelationMatrixMethod)">
            <summary>
            Computes the autocorrelation matrix of the input vector with the specified order and method.
            </summary>
            <param name="inputVector">
            The input vector.
            </param>
            <param name="order">
            The order of the autocorrelation matrix.
            </param>
            <param name="method">
            The method used to compute the autocorrelation matrix.
            </param>
            <returns>
            The autocorrelation matrix of the input vector.
            </returns>
            <remarks><para>This method obtains the autocorrelation matrix using the following formula:</para>
            <para indent="true"><image src="AutoCorrMtrxform_0.png"/></para>
            <para>Where <format type="italics">A</format> is the autocorrelation matrix, <format type="italics">R</format> is the data matrix, and <format type="italics">s</format> is the normalization factor. <format type="italics">R<format type="superscript">H</format></format> is the conjugate transpose of matrix <format type="italics">R</format>.</para>
            </remarks>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            <paramref name="order"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputVector "/> is <see langword="null"/>.
            </exception>
            <lastupdated>5/29/2012 2:03:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralInverse(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType)">
            <summary>Calculates the inverse of a real, square input matrix <format type="italics">A</format>.  If <format type="italics">A</format><format type="superscript"><entity value="ndash"/>1</format> denotes the inverse of the 
            matrix <format type="italics">A</format>, then <format type="italics">A</format><format type="italics">A</format><format type="superscript"><entity value="ndash"/>1</format> = <format type="italics">I</format>, where <format type="italics">I</format> is the identity matrix. 
            </summary>
            <param name="matrix">
            The square matrix whose inverse is to be calculated.
            </param>
            <param name="matrixType">
            The type of <paramref name="matrix"/>.  Choose <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> correctly as it affects the speed of computation. If the type of <paramref name="matrix"/> is not known then use the 
            <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.Inverse(System.Double[0:,0:])"/> method.
            </param>
            <returns>
            The result of <paramref name="matrix"/> inversion.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="matrix"/> is not a square matrix.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="matrix"/> is singular.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            Invalid <paramref name="matrixType"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Let <format type="italics">A</format> be <paramref name="matrix"/> and <format type="italics">I</format> be the identity matrix. You obtain the return value by solving the system <format type="italics">AB = I</format> for <format type="italics">B</format>.
            <para>
            If <format type="italics">A</format> is a nonsingular matrix, you can show that the solution to the preceding system is unique and that it corresponds to the inverse matrix of <format type="italics">A</format>
            	</para>
            	<para indent="true">
            		<format type="italics">B</format> = <format type="italics">A</format><format type="superscript"><entity value="ndash"/>1</format>
            	</para>
            	<para>
            and <format type="italics">B</format> is therefore an inverse matrix. A nonsingular matrix is a matrix in which no row or column contains a linear combination of any other row or column, respectively.
            </para>
            	<note type="note">
            The numerical implementation of the matrix inversion is not only numerically intensive but, because of its recursive nature, is also highly sensitive to round-off errors introduced by the floating-point numeric coprocessor. Although the computations use the maximum possible accuracy, the method cannot always solve for the system.
            <para>
            You cannot always determine beforehand whether <paramref name="matrix"/> is singular, especially with large systems. The <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralInverse(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType)"/> method detects singular matrices and returns an error, so you do not need to verify whether you have a valid system before using this method.
            </para>
            		<para> If you use this method on an ill-conditioned matrix, the result may be inaccurate due to a loss of precision from arithmetic methods.   The results could also vary between machines because National Instruments uses different optimizations based on processor type.</para>
            	</note>
            </remarks>
            <security condition="unmanagedcode"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>3/27/2012 2:22:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralInverse(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.MatrixType)">
            <summary>Calculates the inverse of a <see cref="T:NationalInstruments.ComplexDouble"/>, square input matrix <format type="italics">A</format>.  If <format type="italics">A</format><format type="superscript"><entity value="ndash"/>1</format> denotes the inverse of the 
            matrix <format type="italics">A</format>, then <format type="italics">A</format><format type="italics">A</format><format type="superscript"><entity value="ndash"/>1</format> = <format type="italics">I</format>, where <format type="italics">I</format> is the identity matrix. 
            </summary>
            <param name="matrix">
            The <see cref="T:NationalInstruments.ComplexDouble"/> square matrix whose inverse is to be calculated.
            </param>
            <param name="matrixType">
            The type of <paramref name="matrix"/>.  Choose <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> correctly as it affects the speed of computation. If the type of <paramref name="matrix"/> is not known then use the 
            <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.Inverse(System.Double[0:,0:])"/> method.
            </param>
            <returns>
            The result of <paramref name="matrix"/> inversion.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
            <para>
            -or-
            </para>
            <para>
            <paramref name="matrix"/> is not a square matrix.
            </para>
            <para>
            -or-
            </para>
            <para>
            <paramref name="matrix"/> is singular.
            </para>
            <para>
            -or-
            </para>
            <para>
            Invalid <paramref name="matrixType"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Let <format type="italics">A</format> be <paramref name="matrix"/> and <format type="italics">I</format> be the identity matrix. You obtain the return value by solving the system <format type="italics">AB = I</format> for <format type="italics">B</format>.
            <para>
            If <format type="italics">A</format> is a nonsingular matrix, you can show that the solution to the preceding system is unique and that it corresponds to the inverse matrix of <format type="italics">A</format>
            </para>
            <para indent="true">
            <format type="italics">B</format> = <format type="italics">A</format><format type="superscript"><entity value="ndash"/>1</format>
            </para>
            <para>
            and <format type="italics">B</format> is therefore an inverse matrix. A nonsingular matrix is a matrix in which no row or column contains a linear combination of any other row or column, respectively.
            </para>
            <note type="note">
            The numerical implementation of the matrix inversion is not only numerically intensive but, because of its recursive nature, is also highly sensitive to round-off errors introduced by the floating-point numeric coprocessor. Although the computations use the maximum possible accuracy, the method cannot always solve for the system.
            <para>
            You cannot always determine beforehand whether <paramref name="matrix"/> is singular, especially with large systems. The <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralInverse(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType)"/> method detects singular matrices and returns an error, so you do not need to verify whether you have a valid system before using this method.
            </para>
            <para> If you use this method on an ill-conditioned matrix, the result may be inaccurate due to a loss of precision from arithmetic methods.   The results could also vary between machines because National Instruments uses different optimizations based on processor type.</para>
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <packages>
            <package name="Enterprise"/>
            </packages>
            <lastupdated>3/27/2012 1:59:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralDeterminant(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType)">
            <summary>
            This member is obsolete. Use the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.Determinant(System.Double[0:,0:])"/>
            method to achieve the same functionality.
            </summary>
            <param name="matrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="matrixType">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/19/2009 3:07:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralLinearEquations(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.MatrixType)">
            <summary>
            This method is obsolete. Use the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHand(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[])"/>
            method to achieve the same functionality.
            </summary>
            <param name="coefficientMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="knownVector">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="matrixType">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/19/2009 3:07:55 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralLinearEquations(System.Double[0:,0:],System.Double[],NationalInstruments.Analysis.Math.MatrixType,System.Boolean@)">
            <summary>
            This method is obsolete. Use the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHand(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[])"/>
            method to achieve the same functionality.
            </summary>
            <param name="coefficientMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="knownVector">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="matrixType">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="isFullRank">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/19/2009 3:07:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralLinearEquations(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[],NationalInstruments.Analysis.Math.MatrixType)">
            <summary>
            This method is obsolete. Use the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHand(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[])"/>
            method to achieve the same functionality.
            </summary>
            <param name="coefficientMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="knownVector">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="matrixType">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/19/2009 3:07:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralLinearEquations(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[],NationalInstruments.Analysis.Math.MatrixType,System.Boolean@)">
            <summary>
            This method is obsolete. Use the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHand(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[])"/>
            method to achieve the same functionality.
            </summary>
            <param name="coefficientMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="knownVector">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="matrixType">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="isFullRank">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/19/2009 3:07:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CholeskyFactorization(System.Double[0:,0:])">
            <summary>
            Calculates the Cholesky factorization  of a real, symmetric positive definite input matrix. 
            </summary>
            <param name="matrix">
            The input square, positive definite matrix whose Cholesky factorization is to be computed.
            </param>
            <returns>
            The result of the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.CholeskyFactorization(System.Double[0:,0:])"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a positive definite matrix.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Cholesky factorization of an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n</format> symmetric positive definite <paramref name="matrix"/>
                <format type="italics">A</format> is given by 
            <para indent="true">
                    <image src="Cholesky1.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">R</format> represents an upper triangular matrix of dimensions <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n</format>, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <image src="Cholesky2.gif"/> is the transpose of <format type="italics">R</format>.
            </description>
                    </item>
                </list>
            </remarks>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>7/9/2003 3:34:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.CholeskyFactorization(NationalInstruments.ComplexDouble[0:,0:])">
            <summary>
            Calculates the Cholesky factorization of a complex, positive definite input matrix. 
            </summary>
            <param name="matrix">
            The input square, positive definite matrix whose Cholesky factorization is to be computed.
            </param>
            <returns>
            The result of the Cholesky factorization.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a positive definite matrix.
            </para>
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The Cholesky factorization of an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n</format> symmetric positive definite <paramref name="matrix"/>
                <format type="italics">A</format> is given by 
            <para indent="true">
                    <format type="italics">A = R<format type="superscript">H</format>R</format>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">R</format> represents an upper triangular matrix of dimensions <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n</format>, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">R<format type="superscript">H</format></format> is the complex conjugate transpose of <format type="italics">R</format>.
            </description>
                    </item>
                </list>
            </remarks>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>7/9/2003 3:33:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SymmetricEigenValueVector(System.Double[0:,0:])">
            <summary>Computes the eigenvalues, <format type="italics">l</format>, of a symmetric, real square input matrix.  
            </summary>
            <param name="matrix">
            The input matrix.
            </param>
            <returns>
            A vector which contains the eigenvalues of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The maximum number of iterations has been exceeded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The eigenvalue problem is to determine the nontrivial solutions to the equation
            <para indent="true">
                    <format type="italics">AX = <entity value="lambda"/>X</format>
                </para>
                <para>
                    <list type="table" bordered="false">
                        <listheader><term></term><description></description></listheader>
                        <item>
                            <term>
            where
            </term>
                            <description>
                                <format type="italics">A</format> is a <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n </format>
                                <paramref name="matrix"/>,
            </description>
                        </item>
                        <item>
                            <term>
                            </term>
                            <description>
                                <format type="italics">X</format> is a vector with <format type="italics">n</format> elements, and
            </description>
                        </item>
                        <item>
                            <term>
                            </term>
                            <description>
                                <format type="italics"><entity value="lambda"/>X</format> is a scalar. 
            </description>
                        </item>
                    </list>
            The <format type="italics">n</format> values of <format type="italics"><entity value="lambda"/>X</format> that satisfy the equation are the eigenvalues of <format type="italics">A</format> and the corresponding values of <format type="italics">X</format> are the right eigenvectors of <format type="italics">A</format>. A symmetric, real matrix always has real eigenvalues and eigenvectors. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.EigenValueVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenMatrixType)"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>7/7/2004 6:36:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SymmetricEigenValueVector(System.Double[0:,0:],System.Double[0:,0:]@)">
            <summary>Computes the eigenvalues, <format type="italics">l</format>, and their corresponding eigenvectors, 
            <format type="italics">x</format>, of a symmetric, real square input matrix with the specified eigenvectors.  
            </summary>
            <param name="matrix">
            The input matrix.
            </param>
            <param name="eigenVectors">
            The resulting eigenvectors of the input matrix.  
            </param>
            <returns>
            A vector which contains the eigenvalues of the input matrix.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The maximum number of iterations has been exceeded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>
            If only eigenvalues are required, use the overloaded method instead, as it is faster.
            </para>
                <paramref name="eigenVectors"/> is an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n</format> real matrix where the <format type="italics">i</format><format type="superscript">th</format> 
            column is the eigenvector corresponding to the <format type="italics">i</format><format type="superscript">th</format> component of the eigenvalues vector.  
            Each <paramref name="eigenVectors"/> is normalized so that its largest component is equal to one.
            <para>
            The eigenvalue problem is to determine the nontrivial solutions to the equation
            </para>
                <para indent="true">
                    <format type="italics">AX = <entity value="lambda"/>X</format>
                </para>
                <para>
                    <list type="table" bordered="false">
                        <listheader><term></term><description></description></listheader>
                        <item>
                            <term>
            where
            </term>
                            <description>
                                <format type="italics">A</format> is an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n </format>
                                <paramref name="matrix"/>,
            </description>
                        </item>
                        <item>
                            <term>
                            </term>
                            <description>
                                <format type="italics">X</format> is a vector with <format type="italics">n</format> elements, and
            </description>
                        </item>
                        <item>
                            <term>
                            </term>
                            <description>
                                <format type="italics"><entity value="lambda"/>X</format> is a scalar. 
            </description>
                        </item>
                    </list>
            The <format type="italics">n</format> values of <format type="italics"><entity value="lambda"/>X</format> that satisfy the equation are the eigenvalues of <format type="italics">A</format> and the corresponding values of <format type="italics">X</format> are the right eigenvectors of <format type="italics">A</format>. A symmetric, real matrix always has real eigenvalues and <paramref name="eigenVectors"/>. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.EigenValueVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenMatrixType)"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>7/7/2004 6:36:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:])">
            <summary>
            Calculates the eigenvalues and their corresponding eigenvectors of a general, real square input 
            matrix. The method returns only the eigenvalues.
            </summary>
            <param name="matrix">
            The square input matrix whose eigenvalues are to be computed.
            </param>
            <returns>
            The resulting <see cref="T:NationalInstruments.ComplexDouble"/> eigenvalues of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The eigenvalue problem is to determine the nontrivial solutions to the equation
            <para indent="true">
                    <format type="italics">AX = <entity value="lambda"/>X</format>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">A</format> is an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n </format>
                            <paramref name="matrix"/>, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">X</format> is a vector with <format type="italics">n</format> elements, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <entity value="lambda"/> is a scalar.
            </description>
                    </item>
                </list>
            The <format type="italics">n</format> values of <entity value="lambda"/> that satisfy the equation are the eigenvalues of <format type="italics">A</format>, and the corresponding values of <format type="italics">X</format> are the right eigenvectors of <format type="italics">A</format>. A symmetric, real matrix always has real eigenvalues and eigenvectors.
            <note type="note">
            When you know that your input matrix is symmetric, you should use <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SymmetricEigenValueVector(System.Double[0:,0:])"/> 
            because less computation is required for symmetric matrices.
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SymmetricEigenValueVector(System.Double[0:,0:])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.EigenValueVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenMatrixType)"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 5:27:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:],NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Calculates the eigenvalues and their corresponding eigenvectors of a general, real square input matrix.
            </summary>
            <param name="matrix">
            The square input matrix whose eigenvalues and eigenvectors are to be computed.
            </param>
            <param name="eigenVectors">
            The resulting eigenvectors of <paramref name="matrix"/>.  
            </param>
            <returns>
            The resulting <see cref="T:NationalInstruments.ComplexDouble"/> eigenvalues of <paramref name="matrix"/>.  
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>
            The eigenvalue problem is to determine the nontrivial solutions for the equation
            <para indent="true">
                        <format type="italics">AX = <entity value="lambda"/>X</format>
                    </para>
                    <list type="table" bordered="false">
                        <listheader><term></term><description></description></listheader>
                        <item>
                            <term>
            where
            </term>
                            <description>
                                <format type="italics">A</format> is an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n </format>
                                <paramref name="matrix"/>, 
            </description>
                        </item>
                        <item>
                            <term>
                            </term>
                            <description>
                                <format type="italics">X</format> is a vector with <format type="italics">n</format> elements, and 
            </description>
                        </item>
                        <item>
                            <term>
                            </term>
                            <description>
                                <entity value="lambda"/> is a scalar.
            </description>
                        </item>
                    </list>
            The <format type="italics">n</format> values of <entity value="lambda"/> that satisfy the equation are the eigenvalues of <format type="italics">A</format>, and the corresponding values of <format type="italics">X</format> are the right <paramref name="eigenVectors"/> of <format type="italics">A</format>.  A Hermitian matrix always has real eigenvalues.
            <para>
            Eigenvalues is a complex vector of <format type="italics">n</format> elements, which contains all of the computed eigenvalues of <paramref name="matrix"/>. <paramref name="matrix"/> could have complex eigenvalues if it is not a Hermitian matrix.
            </para>
                    <paramref name="eigenVectors"/> is an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n</format> complex matrix containing all the computed eigenvectors of <paramref name="matrix"/>. The <format type="italics">i</format><format type="superscript">th</format> column of <paramref name="eigenVectors"/> is the eigenvector corresponding to the <format type="italics">i</format><format type="superscript">th</format> component of the vector, eigenvalues. Each eigenvector is normalized so that its largest component is always unity. 
            </para>
                <note type="note">
            When you know that your input matrix is symmetric, you should use <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SymmetricEigenValueVector(System.Double[0:,0:])"/> 
            because less computation is required for symmetric matrices.
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SymmetricEigenValueVector(System.Double[0:,0:])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.EigenValueVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenMatrixType)"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 5:28:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.EigenValueVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenMatrixType)">
            <summary>
            Calculates the eigenvalues of a <see cref="T:NationalInstruments.ComplexDouble"/> square input matrix. Only the eigenvalues are returned.
            </summary>
            <param name="matrix">
            The square input matrix whose eigenvalues are to be computed.
            </param>
            <param name="matrixType">
            The type of the input matrix. A value from the  <see cref="T:NationalInstruments.Analysis.Math.EigenMatrixType"/> enumeration.
            </param>
            <returns>
            The resulting <see cref="T:NationalInstruments.ComplexDouble"/> eigenvalues of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The maximum number of iterations has been exceeded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The eigenvalue problem is to determine the nontrivial solutions to the equation
            <para indent="true">
                    <format type="italics">AX = <entity value="lambda"/>X</format>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">A</format> is an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n </format>
                            <paramref name="matrix"/>, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">X</format> is a vector with <format type="italics">n</format> elements, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <entity value="lambda"/> is a scalar.
            </description>
                    </item>
                </list>
            The <format type="italics">n</format> values of <entity value="lambda"/> that satisfy the equation are the eigenvalues of <format type="italics">A</format>, and the corresponding values of <format type="italics">X</format> are the right eigenvectors of <format type="italics">A</format>. A symmetric, real matrix always has real eigenvalues and eigenvectors. 
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SymmetricEigenValueVector(System.Double[0:,0:])"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>7/7/2004 6:37:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.EigenValueVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenMatrixType,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Calculates the eigenvalues and their corresponding eigenvectors of a <see cref="T:NationalInstruments.ComplexDouble"/> square input matrix. Only the eigenvalues are returned.
            </summary>
            <param name="matrix">
            The square input matrix whose eigenvalues and eigenvectors are to be computed.
            </param>
            <param name="matrixType">
            The type of the input matrix. A value from the  <see cref="T:NationalInstruments.Analysis.Math.EigenMatrixType"/> enumeration.
            </param>
            <param name="eigenVectors">
            The resulting eigenvectors of <paramref name="matrix"/>.  
            </param>
            <returns>
            The resulting <see cref="T:NationalInstruments.ComplexDouble"/> eigenvalues of <paramref name="matrix"/>.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The maximum number of iterations has been exceeded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="matrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The eigenvalue problem is to determine the nontrivial solutions to the equation
            <para indent="true">
                    <format type="italics">AX = <entity value="lambda"/>X</format>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">A</format> is an <format type="italics">n</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">n </format>
                            <paramref name="matrix"/>, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">X</format> is a vector with <format type="italics">n</format> elements, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <entity value="lambda"/> is a scalar.
            </description>
                    </item>
                </list>
            The <format type="italics">n</format> values of <entity value="lambda"/> that satisfy the equation are the eigenvalues of <format type="italics">A</format>, and the corresponding values of <format type="italics">X</format> are the right eigenvectors of <format type="italics">A</format>. A symmetric, real matrix always has real eigenvalues and eigenvectors. 
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:])"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SymmetricEigenValueVector(System.Double[0:,0:])"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>7/7/2004 6:37:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.LinearEquations(System.Double[0:,0:],System.Double[])">
            <summary>
            This method is obsolete. Use the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHand(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[])"/>
            method to achieve the same functionality.
            </summary>
            <param name="coefficientMatrix">
            This parameter is not documented because the member is obsolete.</param>
            <param name="knownArray">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/19/2009 3:08:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.LUFactorization(System.Double[0:,0:],System.Int32[]@,System.Int32@)">
            <summary>Performs LU <see cref="T:NationalInstruments.ComplexDouble"/> matrix decomposition. 
            </summary>
            <param name="matrix">
            On input, contains the square matrix to be LU factorization decomposed.
            Upon return, contains the LU factorization decomposed matrix.
            </param>
            <param name="permutationVector">
            Upon return, contains the permutation information obtained from the LU factorization decomposition.  This vector is needed if you plan 
            to call <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.ForwardSubstitution(System.Double[0:,0:],System.Double[],System.Int32[])"/>.
            </param>
            <param name="sign">
            Upon return, contains the number of row exchanges that occurred during the LU factorization decomposition. This output is 0 if there was an even number of row exchanges, or no exchanges. 
            This output is 1 if there was an odd number of row exchanges during the LU factorization decomposition. 
            </param>
            <returns>
            The LU factorization decomposed matrix.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
                <paramref name="matrix"/> is singular.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="matrix"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="permutationVector"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    The number of samples in <paramref name="permutationVector"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
                </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                The <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.LUFactorization(System.Double[0:,0:],System.Int32[]@,System.Int32@)"/> method factors <paramref name="matrix "/>
                <format type="italics">A</format> into two triangular matrices; one is a lower triangular matrix L with ones on the diagonal, and the other is an upper triangular matrix U, so that 
            <para indent="true">
                    <format type="italics">PA</format> = LU
            </para>
                <para>
            where <format type="italics">P</format> is a permutation matrix, which consists of the identity matrix with some rows exchanged. 
            </para>
                <para>
            Factorization is the key step for inverting a matrix, computing the determinant of a matrix, and solving a linear equation. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>7/7/2004 6:36:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.LUFactorization(NationalInstruments.ComplexDouble[0:,0:],System.Int32[]@,System.Int32@)">
            <summary>Performs LU matrix decomposition. 
            </summary>
            <param name="matrix">
            On input, contains the <see cref="T:NationalInstruments.ComplexDouble"/> square matrix to be LU factorization decomposed.
            Upon return, contains the LU factorization decomposed <see cref="T:NationalInstruments.ComplexDouble"/> matrix.
            </param>
            <param name="permutationVector">
            Upon return, contains the permutation information obtained from the LU factorization decomposition.  This vector is needed if you plan 
            to call <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.ForwardSubstitution(System.Double[0:,0:],System.Double[],System.Int32[])"/>.
            </param>
            <param name="sign">
            Upon return, contains the number of row exchanges that occurred during the LU factorization decomposition. This output is 0 if there was an even number of row exchanges, or no exchanges. 
            This output is 1 if there was an odd number of row exchanges during the LU factorization decomposition. 
            </param>
            <returns>
            The LU factorization decomposed <see cref="T:NationalInstruments.ComplexDouble"/> matrix.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
                <paramref name="matrix"/> is singular.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="matrix"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="permutationVector"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="matrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="matrix"/> is not a square matrix.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                The <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.LUFactorization(System.Double[0:,0:],System.Int32[]@,System.Int32@)"/> method factors <paramref name="matrix "/>
                <format type="italics">A</format> into two triangular matrices; one is a lower triangular matrix L with ones on the diagonal, and the other is an upper triangular matrix U, so that 
            <para indent="true">
                    <format type="italics">PA</format> = LU
            </para>
                <para>
            where <format type="italics">P</format> is a permutation matrix, which consists of the identity matrix with some rows exchanged. 
            </para>
                <para>
            Factorization is the key step for inverting a matrix, computing the determinant of a matrix, and solving a linear equation. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>7/7/2004 6:36:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.ForwardSubstitution(System.Double[0:,0:],System.Double[],System.Int32[])">
            <summary>
            Calculates the solution to the linear equation <format type="italics">Ax = y</format>, where the matrix <format type="italics">A</format> is a lower triangular matrix in which the diagonal elements have a value of 1.
            </summary>
            <param name="coefficientMatrix">
            The square matrix of coefficients.
            </param>
            <param name="knownVector">
            The array that represents the set of known dependent variable values.
            </param>
            <param name="permutationVector">
            An input vector obtained from the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.LUFactorization(System.Double[0:,0:],System.Int32[]@,System.Int32@)"/> decomposition.  
            </param>
            <returns>
            The solution to the linear system of equations.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>
                    <paramref name="coefficientMatrix"/> is <see langword="null"/>.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="knownVector"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="coefficientMatrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="coefficientMatrix"/> is neither a lower triangular matrix nor a matrix from the LU decomposition.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="coefficientMatrix"/> is not a square matrix.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="knownVector"/> is not the same size as the number of rows or columns of <paramref name="coefficientMatrix"/>. 
            </para>
                <para>
            -or-
            </para>
                <para>
                Invalid <paramref name="permutationVector"/> specified. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <paramref name="permutationVector"/> has the row exchange information. If there was no row exchange in the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.LUFactorization(System.Double[0:,0:],System.Int32[]@,System.Int32@)"/> decomposition then, 
            <para indent="true">
                    <format type="italics">p[i] = i</format>.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.LUFactorization(System.Double[0:,0:],System.Int32[]@,System.Int32@)"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>7/9/2003 5:04:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.BackwardSubstitution(System.Double[0:,0:],System.Double[])">
            <summary>
            Solves the linear equation <format type="italics">Ax = y</format> by backward substitution.  
            The matrix <format type="italics">A</format> is a lower triangular matrix whose diagonal elements are all ones. 
            </summary>
            <param name="coefficientMatrix">
            The input square matrix. This matrix can be either a lower triangular matrix or a matrix from the 
            LU decomposition.
            </param>
            <param name="knownVector">
            The array that represents the set of known dependent variable values.
            </param>
            <returns>
            The solution to the linear system of equations.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="coefficientMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="coefficientMatrix"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    The number of samples in <paramref name="knownVector"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="coefficientMatrix"/> is neither a lower triangular matrix nor a matrix from the LU decomposition.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="coefficientMatrix"/> is not a square matrix.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="knownVector"/> is not the same size as the number of rows or columns of <paramref name="coefficientMatrix"/>. 
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>7/7/2004 6:12:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[]@,System.Double[0:,0:]@)">
            <summary>
            This method overload is obsolete. Use a different overload that takes a <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/>  to achieve the same functionality.
            </summary>
            <param name="inputMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="uMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="singularValues">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="vMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/19/2009 3:08:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[]@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            This method overload is obsolete. Use a different overload that takes a <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/>  to achieve the same functionality.
            </summary>
            <param name="inputMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="uMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="singularValues">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="vMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/19/2009 3:08:11 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdSingularValues(System.Double[0:,0:])">
            <summary>
            This method overload is obsolete. Use the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SingularValues(System.Double[0:,0:])"/> method to achieve the same functionality.
            </summary>
            <param name="matrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/19/2009 3:08:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdSingularValues(NationalInstruments.ComplexDouble[0:,0:])">
            <summary>
            This method overload is obsolete. Use the <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.SingularValues(System.Double[0:,0:])"/> method to achieve the same functionality.
            </summary>
            <param name="matrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/19/2009 3:08:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SingularValues(System.Double[0:,0:])">
            <summary>
            Computes the singular value decomposition (SVD) of a real matrix and returns only the singular values.
            </summary>
            <param name="inputMatrix">
            The matrix to decompose.
            </param>
            <returns>
            The singular values in descending order.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method computes the SVD of a real matrix, as follows: 
            <para indent="true">
            A = USV<format type="superscript">H</format>
                </para>
            U is a column orthogonal matrix. That is, U<format type="superscript">H</format>U = I, where I is the 
            identity matrix and U<format type="superscript">H</format> is the transpose of U. S is a diagonal matrix whose diagonal elements are the 
            singular values of A. V is also a column orthogonal matrix. That is, 
            V<format type="superscript">H</format>V = I, where V<format type="superscript">H</format> is the transpose of V.
            </remarks>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/12/2005 10:03:45 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SingularValues(NationalInstruments.ComplexDouble[0:,0:])">
            <summary>
            Computes the singular value decomposition (SVD) of a complex matrix and returns only the singular values.
            </summary>
            <param name="inputMatrix">
            The matrix to decompose.
            </param>
            <returns>
            The singular values in descending order.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method computes the SVD of a real matrix, as follows: 
            <para indent="true">
            A = USV<format type="superscript">H</format>
                </para>
            U is a column orthogonal matrix. That is, U<format type="superscript">H</format>U = I, where I is the 
            identity matrix and U<format type="superscript">H</format> is the transpose of U. S is a diagonal matrix whose diagonal elements are the 
            singular values of A. V is also a column orthogonal matrix. That is, 
            V<format type="superscript">H</format>V = I, where V<format type="superscript">H</format> is the transpose of V.
            </remarks>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/12/2005 10:02:23 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)">
            <summary>
            Balances, in place, a real, general matrix so that its eigenvectors can be computed more accurately.
            </summary>
            <param name="inputSquareMatrix">
            On input, the matrix to be balanced. On output, the balanced matrix.
            </param>
            <param name="balanceMethod">
            An enumeration specifying how to balance the matrix. This is a value from the 
            <see cref="T:NationalInstruments.Analysis.Math.BalanceMethod"/> enumeration. If <paramref name="balanceMethod"/> is 
            <see cref="F:NationalInstruments.Analysis.Math.BalanceMethod.NeitherPermutedNorScaled"/>, <paramref name="indexLow"/> = 0, 
            <paramref name="indexHigh"/> = matrix size <entity value="ndash"/> 1, 
            scale[i] = 1, where i = 0 to matrix size <entity value="ndash"/> 1.
            </param>
            <param name="indexLow">
            Upon return, contains the low index that records the permutation information. The <paramref name="indexLow"/> and 
            <paramref name="indexHigh"/> values are such that on output, 
            balanced matrix[i,j] is 0, if i <entity value="gt"/> j and 
            (i <entity value="le"/> j &lt;
            	<paramref name="indexLow"/> or 
            <paramref name="indexHigh"/>
            	&lt; i <entity value="le"/> matrix size <entity value="ndash"/> 1).
            </param>
            <param name="indexHigh">
            Upon return, contains the high index that records the permutation information. The <paramref name="indexLow"/> and 
            <paramref name="indexHigh"/> values are such that on output, 
            balanced matrix[i,j] is 0, if i <entity value="gt"/> j and 
            (i <entity value="le"/> j &lt;
            	<paramref name="indexLow"/> or 
            <paramref name="indexHigh"/>
            	&lt; i <entity value="le"/> matrix size <entity value="ndash"/> 1).
            </param>
            <returns>
            The scale information.
            </returns>
            <remarks>
            If you want to compute more accurate eigenvectors for an asymmetric matrix, complete the following steps:
            <list type="number">
            		<item>
            			<description>
            Balance the original matrix using this method.
            </description>
            		</item>
            		<item>
            			<description>
            Use <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:])"/> to get the eigenvectors of the balanced matrix. 
            </description>
            		</item>
            		<item>
            			<description>
            Use <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.BackTransformEigenVectors(System.Double[0:,0:],NationalInstruments.Analysis.Math.EigenVectorSide,NationalInstruments.Analysis.Math.BalanceMethod,System.Int32,System.Int32,System.Double[])"/> to back-transform the eigenvectors of the balanced matrix to the eigenvectors of the original matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrix"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="balanceMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 12:39:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.QRAlgorithm,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            This method overload is obsolete. Use an overload of this method that requires a <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/>
            to achieve the same functionality.
            </summary>
            <param name="inputMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="algorithm">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="qMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="rMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/19/2009 3:08:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            This method overload is obsolete. Use an overload of this method that requires a <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/>
            to achieve the same functionality.
            </summary>
            <param name="inputMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="qMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="rMatrix">
            This parameter is not documented because the member is obsolete.
            </param>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/19/2009 3:08:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHandInPlace(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[])">
            <summary>
            Solves real linear equations of the form AX = B with a single right-hand known vector. This method is a versatile linear equations solver and performs this operation in place.
            </summary>
            <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
            <param name="matrixType">
            The type of <paramref name="coefficientMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> enumeration. 
            </param>
            <param name="knownVector">
            On input, contains the right-hand known vector. On output, contains the answer vector. 
            This is a matrix in a linear system with a single right-hand known vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="coefficientMatrix"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="knownVector"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="coefficientMatrix"/> is not a square matrix.
            <para>
            -or-
            </para>
            	<para>
                    Number of rows in <paramref name="coefficientMatrix"/> is not equal to the length of <paramref name="knownVector"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="matrixType"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 10:40:34 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHandInPlace(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.MatrixType,NationalInstruments.ComplexDouble[])">
            <summary>
            Solves complex linear equations of the form AX = B with a single right-hand known vector. This method is a versatile complex linear equations solver and performs this operation in place.
            </summary>
            <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
            <param name="matrixType">
            The type of <paramref name="coefficientMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> enumeration. 
            </param>
            <param name="knownVector">
            On input, contains the right-hand known vector. On output, contains the answer vector. 
            This is a matrix in a linear system with a single right-hand known vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="coefficientMatrix"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="knownVector"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="coefficientMatrix"/> is not a square matrix.
            <para>
            -or-
            </para>
            	<para>
                    Number of rows in <paramref name="coefficientMatrix"/> is not equal to the length of <paramref name="knownVector"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="matrixType"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 10:40:24 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHand(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[])">
            <summary>
            Solves real linear equations of the form AX = B with a single right-hand known vector. This method is a versatile linear equations solver.
            </summary>
            <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
            <param name="matrixType">
            The type of <paramref name="coefficientMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> enumeration. 
            </param>
            <param name="knownVector">
            The right-hand known vector.
            </param>
            <returns>
            The answer vector.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="coefficientMatrix"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="knownVector"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="coefficientMatrix"/> is not a square matrix.
            <para>
            -or-
            </para>
                <para>
                    Number of rows in <paramref name="coefficientMatrix"/> is not equal to the length of <paramref name="knownVector"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="matrixType"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/12/2005 10:12:11 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsSingleRightHand(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.MatrixType,NationalInstruments.ComplexDouble[])">
            <summary>
            Solves complex linear equations of the form AX = B with a single right-hand known vector. 
            This method is a versatile complex linear equations solver.
            </summary>
            <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
            <param name="matrixType">
            The type of <paramref name="coefficientMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> enumeration. 
            </param>
            <param name="knownVector">
            The right-hand known vector.
            </param>
            <returns>
            The answer vector.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="coefficientMatrix"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="knownVector"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="coefficientMatrix"/> is not a square matrix.
            <para>
            -or-
            </para>
                <para>
                    Number of rows in <paramref name="coefficientMatrix"/> is not equal to the length of <paramref name="knownVector"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="matrixType"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/12/2005 10:11:32 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsMultipleRightHandInPlace(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[0:,0:])">
            <summary>
            Solves real linear equations of the form AX = B with multiple right-hand known vectors. This 
            method is a versatile linear equations solver and performs this operation in place.
            </summary>
            <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
            <param name="matrixType">
            The type of <paramref name="coefficientMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> enumeration. 
            </param>
            <param name="knownVectors">
            On input, contains the right-hand known vectors. On output, contains the answer vectors. 
            This is a matrix in a linear system with multiple right-hand known vectors. 
            In this case, each column of <paramref name="knownVectors"/> is a known vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="coefficientMatrix"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="knownVectors"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="coefficientMatrix"/> is not a square matrix.
            <para>
            -or-
            </para>
            	<para>
                    Number of rows in <paramref name="coefficientMatrix"/> is not equal to the length of <paramref name="knownVectors"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="matrixType"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:45:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsMultipleRightHandInPlace(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.MatrixType,NationalInstruments.ComplexDouble[0:,0:])">
            <summary>
            Solves complex linear equations of the form AX = B with multiple right-hand known vectors. This 
            method is a versatile linear equations solver and performs this operation in place.
            </summary>
            <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
            <param name="matrixType">
            The type of <paramref name="coefficientMatrix"/>. A values from the <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> enumeration. 
            </param>
            <param name="knownVectors">
            On input, this contains the right-hand known vectors. On output, this contains the answer vectors. 
            This is a matrix in a linear system with multiple right-hand known vectors. 
            In this case, each column of <paramref name="knownVectors"/> is a known vector.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="coefficientMatrix"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="knownVectors"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="coefficientMatrix"/> is not a square matrix.
            <para>
            -or-
            </para>
            	<para>
                    Number of rows in <paramref name="coefficientMatrix"/> is not equal to length of <paramref name="knownVectors"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="matrixType"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:45:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsMultipleRightHand(System.Double[0:,0:],NationalInstruments.Analysis.Math.MatrixType,System.Double[0:,0:])">
            <summary>
            Solves real linear equations of the form AX = B with multiple right-hand known vectors. This method is a versatile linear equations solver.
            </summary>
            <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
            <param name="matrixType">
            The type of <paramref name="coefficientMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> enumeration. 
            </param>
            <param name="knownVectors">
            The right-hand known vectors.
            </param>
            <returns>
            The answer vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="coefficientMatrix"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="knownVectors"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="coefficientMatrix"/> is not a square matrix.
            <para>
            -or-
            </para>
            	<para>
                    Number of rows in <paramref name="coefficientMatrix"/> is not equal to the length of <paramref name="knownVectors"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="matrixType"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:45:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SolveLinearEquationsMultipleRightHand(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.MatrixType,NationalInstruments.ComplexDouble[0:,0:])">
            <summary>
            Solves complex linear equations of the form AX = B with multiple right-hand known vectors. This method is a versatile complex linear equations solver.
            </summary>
            <param name="coefficientMatrix">
            The coefficient matrix A.
            </param>
            <param name="matrixType">
            The type of <paramref name="coefficientMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.MatrixType"/> enumeration. 
            </param>
            <param name="knownVectors">
            The right-hand known vectors.
            </param>
            <returns>
            The answer vectors.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="coefficientMatrix"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="knownVectors"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="coefficientMatrix"/> is not a square matrix.
            <para>
            -or-
            </para>
            	<para>
                    Number of rows in <paramref name="coefficientMatrix"/> is not equal to the length of <paramref name="knownVectors"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="matrixType"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:44:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@)">
            <summary>
            Performs the QR factorization for a real matrix and computes only the R matrix.
            </summary>
            <param name="inputMatrix">
            The real input matrix.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="rMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents an orthogonal matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents <paramref name="rMatrix"/>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 2:53:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a real matrix.
            </summary>
            <param name="inputMatrix">
            The real input matrix.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="qMatrix"/> and <paramref name="rMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
            <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents <paramref name="qMatrix"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents <paramref name="rMatrix"/>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 2:53:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a complex input matrix and computes only the R matrix.
            </summary>
            <param name="inputMatrix">
            The complex input matrix.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="inputMatrix"/> and <paramref name="rMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents an orthogonal matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents <paramref name="rMatrix"/>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 2:52:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorization(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a complex matrix.
            </summary>
            <param name="inputMatrix">
            The complex input matrix.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="qMatrix"/> and <paramref name="rMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
            <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents <paramref name="qMatrix"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents <paramref name="rMatrix"/>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 2:52:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlace(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption)">
            <summary>
            Calculates the QR factorization for a real matrix in place, and computes only the R matrix.
            </summary>
            <param name="inputMatrix">
            On input, contains the real input matrix, on output contains the upper triangular matrix R.
            </param>
            <param name="sizeOption">
            The value specifying how to size the R matrix. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
                <list type="table" bordered="false">
                    <listheader>
                        <term></term>
                        <description></description>
                    </listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
            P represents a permutation matrix, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            Q represents an orthogonal matrix, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            R represents an upper triangular matrix.
            </description>
                    </item>
                </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 6:05:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlace(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a real matrix in place.
            </summary>
            <param name="inputMatrix">
            On input, contains the real input matrix, on output contains the upper triangular matrix R.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="qMatrix"/> and the R matrix. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q.
            </param>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents <paramref name="qMatrix"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents an upper triangular matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 2:53:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlace(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption)">
            <summary>
            Calculates the QR factorization for a complex matrix in place, and computes only the R matrix.
            </summary>
            <param name="inputMatrix">
            On input, contains the complex input matrix, on output contains the upper triangular matrix R.
            </param>
            <param name="sizeOption">
            The value specifying how to size the R matrix. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
                <list type="table" bordered="false">
                    <listheader>
                        <term></term>
                        <description></description>
                    </listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
            P represents a permutation matrix, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            Q represents an orthogonal matrix, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            R represents an upper triangular matrix.
            </description>
                    </item>
                </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 6:03:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlace(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a complex matrix in place.
            </summary>
            <param name="inputMatrix">
            On input, contains the complex input matrix, on output contains the upper triangular matrix R.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="qMatrix"/> and the R matrix. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q.
            </param>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents <paramref name="qMatrix"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents an upper triangular matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 2:53:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotVector(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a real matrix and records the pivoting information as 
            a vector. The method only computes the R matrix.
            </summary>
            <param name="inputMatrix">
            The real input matrix.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="rMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA<entity value="ndash"/>1].
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents an orthogonal matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents <paramref name="rMatrix"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:17:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotVector(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a real matrix and records the pivoting information as a vector.
            </summary>
            <param name="inputMatrix">
            The real input matrix.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="qMatrix"/> and <paramref name="rMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
            <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA<entity value="ndash"/>1].
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents <paramref name="qMatrix"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents <paramref name="rMatrix"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:17:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a complex matrix and records the pivoting information as a 
            vector. The method only computes the R matrix.
            </summary>
            <param name="inputMatrix">
            The complex input matrix.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="rMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA<entity value="ndash"/>1].
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents an orthogonal matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents <paramref name="rMatrix"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:17:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a complex matrix and records the pivoting information as a vector.
            </summary>
            <param name="inputMatrix">
            The complex input matrix.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="qMatrix"/> and <paramref name="rMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
            <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA<entity value="ndash"/>1].
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents <paramref name="qMatrix"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents <paramref name="rMatrix"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:17:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotVector(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption)">
            <summary>
            Calculates the QR factorization for a real matrix in place and records the pivoting information as 
            a vector. The method only computes the R matrix.
            </summary>
            <param name="inputMatrix">
            On input, contains the real input matrix, on output contains the upper triangular matrix R.
            </param>
            <param name="sizeOption">
            The value specifying how to size the R matrix. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA<entity value="ndash"/>1].
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents an orthogonal matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents an upper triangular matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:17:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotVector(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a real matrix in place and records the pivoting information as a vector.
            </summary>
            <param name="inputMatrix">
            On input, contains the real input matrix, on output contains the upper triangular matrix R.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="qMatrix"/> and the R matrix. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA<entity value="ndash"/>1].
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents <paramref name="qMatrix"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents an upper triangular matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:17:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption)">
            <summary>
            Calculates the QR factorization for a complex matrix in place and records the pivoting information 
            as a vector. The method only computes the R matrix.
            </summary>
            <param name="inputMatrix">
            On input, contains the complex input matrix, on output contains the upper triangular matrix R.
            </param>
            <param name="sizeOption">
            The value specifying how to size the R matrix. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA<entity value="ndash"/>1].
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents an orthogonal matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents an upper triangular matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:16:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotVector(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a complex matrix in place and records the pivoting information as a vector.
            </summary>
            <param name="inputMatrix">
            On input, contains the complex input matrix, on output contains the upper triangular matrix R.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="qMatrix"/> and the R matrix. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR.  The columns 
            of AP are the columns of A in the following order: pvt[0], pvt[1], pvt[2],..., pvt[colA<entity value="ndash"/>1].
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents <paramref name="qMatrix"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents an upper triangular matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:17:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotMatrix(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a real matrix and records the pivoting information as a 
            matrix. The method only computes the R matrix.
            </summary>
            <param name="inputMatrix">
            The real input matrix.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="rMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR. This is the 
            permutation matrix, P, in AP = QR. <paramref name="inputMatrix"/> is pivoted so that abs(diag(<paramref name="rMatrix"/>)) 
            are in descending order.
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents an orthogonal matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents <paramref name="rMatrix"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:20:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotMatrix(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a real matrix and records the pivoting information as a matrix.
            </summary>
            <param name="inputMatrix">
            The real input matrix.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="qMatrix"/> and <paramref name="rMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
            <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR. This is the 
            permutation matrix, P, in AP = QR. <paramref name="inputMatrix"/> is pivoted so that abs(diag(<paramref name="rMatrix"/>)) 
            are in descending order.
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents <paramref name="qMatrix"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents <paramref name="rMatrix"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:20:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotMatrix(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a complex matrix and records the pivoting information as a 
            matrix. The method only computes the R matrix.
            </summary>
            <param name="inputMatrix">
            The complex input matrix.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="rMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR. This is the 
            permutation matrix, P, in AP = QR. <paramref name="inputMatrix"/> is pivoted so that abs(diag(<paramref name="rMatrix"/>)) 
            are in descending order.
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents an orthogonal matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents <paramref name="rMatrix"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:19:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationWithPivotMatrix(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a complex matrix and records the pivoting information as a matrix.
            </summary>
            <param name="inputMatrix">
            The complex input matrix.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="qMatrix"/> and <paramref name="rMatrix"/>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="rMatrix">
            Upon return, contains the upper triangular matrix R. 
            </param>
            <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR. This is the 
            permutation matrix, P, in AP = QR. <paramref name="inputMatrix"/> is pivoted so that abs(diag(<paramref name="rMatrix"/>)) 
            are in descending order.
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents <paramref name="qMatrix"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents <paramref name="rMatrix"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:19:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotMatrix(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption)">
            <summary>
            Calculates the QR factorization for a real matrix in place and records the pivoting information 
            as a matrix. The method only computes the R matrix.
            </summary>
            <param name="inputMatrix">
            On input, contains the real input matrix, on output contains the upper triangular matrix R.
            </param>
            <param name="sizeOption">
            The value specifying how to size the R matrix. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR. This is the 
            permutation matrix, P, in AP = QR. <paramref name="inputMatrix"/> is pivoted so that abs(diag(rMatrix)) 
            are in descending order.
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents an orthogonal matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents an upper triangular matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:19:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotMatrix(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a real matrix in place and records the pivoting information 
            as a matrix.
            </summary>
            <param name="inputMatrix">
            On input, contains the real input matrix, on output contains the upper triangular matrix R.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="qMatrix"/> and the R matrix. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR. This is the 
            permutation matrix, P, in AP = QR. <paramref name="inputMatrix"/> is pivoted so that abs(diag(rMatrix)) 
            are in descending order.
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents <paramref name="qMatrix"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents an upper triangular matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:19:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotMatrix(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption)">
            <summary>
            Calculates the QR factorization for a complex matrix in place and records the pivoting information 
            as a matrix. The method computes only the R matrix.
            </summary>
            <param name="inputMatrix">
            On input, contains the complex input matrix, on output contains the upper triangular matrix R.
            </param>
            <param name="sizeOption">
            The value specifying how to size the R matrix. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR. This is the 
            permutation matrix, P, in AP = QR. <paramref name="inputMatrix"/> is pivoted so that abs(diag(rMatrix)) 
            are in descending order.
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents an orthogonal matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents an upper triangular matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:18:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QRFactorizationInPlaceWithPivotMatrix(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Calculates the QR factorization for a complex matrix in place and records the pivoting 
            information as a matrix.
            </summary>
            <param name="inputMatrix">
            On input, contains the complex input matrix, on output contains the upper triangular matrix R.
            </param>
            <param name="sizeOption">
            The value specifying how to size <paramref name="qMatrix"/> and the R matrix. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="qMatrix">
            Upon return, contains the orthogonal matrix Q. 
            </param>
            <returns>
            The pivoting information. This method factorizes <paramref name="inputMatrix"/> as AP = QR. This is the 
            permutation matrix, P, in AP = QR. <paramref name="inputMatrix"/> is pivoted so that abs(diag(rMatrix)) 
            are in descending order.
            </returns>
            <remarks>This method factorizes A as 
            <para indent="true">
            AP = QR
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            P represents a permutation matrix, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q represents <paramref name="qMatrix"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            R represents an upper triangular matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:18:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(System.Double[0:,0:],NationalInstruments.Analysis.Math.SizeOption,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Computes the singular value decomposition (SVD) of a real matrix.
            </summary>
            <param name="inputMatrix">
            The matrix to decompose.
            </param>
            <param name="sizeOption">
            The size option of SVD. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="uMatrix">
            The orthogonal matrix U.
            </param>
            <param name="vMatrix">
            The orthogonal matrix V.
            </param>
            <returns>
            The singular values in descending order.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method calculates the SVD factorization for a complex matrix, as follows: 
            <para indent="true">
            A = USV<format type="superscript">H</format>
                </para>
            U is a column orthogonal matrix. That is, U<format type="superscript">H</format>U = I, where I is the 
            identity matrix and U<format type="superscript">H</format> is the conjugate transpose of U. S is a 
            diagonal matrix whose diagonal elements are the singular values of A. V is also a column orthogonal 
            matrix. That is, V<format type="superscript">H</format>V = I, where V<format type="superscript">H</format> 
            is the conjugate transpose of V.
            </remarks>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/12/2005 10:20:03 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SvdFactorization(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.SizeOption,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Computes the singular value decomposition (SVD) of a complex matrix.
            </summary>
            <param name="inputMatrix">
            The matrix to decompose.
            </param>
            <param name="sizeOption">
            The size option of SVD. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.SizeOption"/> enumeration.
            </param>
            <param name="uMatrix">
            The orthogonal matrix U.
            </param>
            <param name="vMatrix">
            The orthogonal matrix V.
            </param>
            <returns>
            The singular values in descending order.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="sizeOption"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method calculates the SVD factorization for a complex matrix, as follows: 
            <para indent="true">
            A = USV<format type="superscript">H</format>
                </para>
            U is a column orthogonal matrix. That is, U<format type="superscript">H</format>U = I, where I is the 
            identity matrix and U<format type="superscript">H</format> is the conjugate transpose of U. S is a 
            diagonal matrix whose diagonal elements are the singular values of A. V is also a column orthogonal 
            matrix. That is, V<format type="superscript">H</format>V = I, where V<format type="superscript">H</format> 
            is the conjugate transpose of V.
            </remarks>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/12/2005 10:19:23 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@,System.Double[0:,0:]@)">
            <summary>
            Balances a real, general matrix so that its eigenvectors can be computed more accurately. 
            </summary>
            <param name="inputSquareMatrix">
            The matrix to be balanced.
            </param>
            <param name="balanceMethod">
            An enumeration specifying how to balance the matrix. This is a value from the 
            <see cref="T:NationalInstruments.Analysis.Math.BalanceMethod"/> enumeration. If <paramref name="balanceMethod"/> is 
            <see cref="F:NationalInstruments.Analysis.Math.BalanceMethod.NeitherPermutedNorScaled"/>, <paramref name="indexLow"/> = 0, 
            <paramref name="indexHigh"/> = matrix size <entity value="ndash"/> 1, 
            scale[i] = 1, where i = 0 to matrix size <entity value="ndash"/> 1.
            </param>
            <param name="indexLow">
            Upon return, contains the low index that records the permutation information. The <paramref name="indexLow"/> and 
            <paramref name="indexHigh"/> values are such that on output, 
            <paramref name="balancedMatrix"/>[i,j] is 0, if i <entity value="gt"/> j and 
            (i <entity value="le"/> j &lt;
            	<paramref name="indexLow"/> or 
            <paramref name="indexHigh"/>
            	&lt; i <entity value="le"/> matrix size <entity value="ndash"/> 1).
            </param>
            <param name="indexHigh">
            Upon return, contains the high index that records the permutation information. The <paramref name="indexLow"/> and 
            <paramref name="indexHigh"/> values are such that on output, 
            <paramref name="balancedMatrix"/>[i,j] is 0, if i <entity value="gt"/> j and 
            (i <entity value="le"/> j &lt;
            	<paramref name="indexLow"/> or 
            <paramref name="indexHigh"/>
            	&lt; i <entity value="le"/> matrix size <entity value="ndash"/> 1).
            </param>
            <param name="balancedMatrix">
            The balanced matrix.
            </param>
            <returns>
            The scale information.
            </returns>
            <remarks>
            If you want to compute more accurate eigenvectors for an asymmetric matrix, complete the following steps:
            <list type="number">
            		<item>
            			<description>
            Balance the original matrix using this method.
            </description>
            		</item>
            		<item>
            			<description>
            Use <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:])"/> to get the eigenvectors of the balanced matrix. 
            </description>
            		</item>
            		<item>
            			<description>
            Use <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.BackTransformEigenVectors(System.Double[0:,0:],NationalInstruments.Analysis.Math.EigenVectorSide,NationalInstruments.Analysis.Math.BalanceMethod,System.Int32,System.Int32,System.Double[])"/> to back-transform the eigenvectors of the balanced matrix to the eigenvectors of the original matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrix"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="balanceMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 12:40:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)">
            <summary>
            Balances, in place, a complex, general matrix so that its eigenvectors can be computed more accurately.
            </summary>
            <param name="squareMatrix">
            On input, the matrix to be balanced. On output, the balanced matrix.
            </param>
            <param name="balanceMethod">
            An enumeration specifying how to balance the matrix. This is a value from the 
            <see cref="T:NationalInstruments.Analysis.Math.BalanceMethod"/> enumeration. If <paramref name="balanceMethod"/> is 
            <see cref="F:NationalInstruments.Analysis.Math.BalanceMethod.NeitherPermutedNorScaled"/>, <paramref name="indexLow"/> = 0, 
            <paramref name="indexHigh"/> = matrix size <entity value="ndash"/> 1, 
            scale[i] = 1, where i = 0 to matrix size <entity value="ndash"/> 1.
            </param>
            <param name="indexLow">
            Upon return, contains the low index that records the permutation information. The <paramref name="indexLow"/> and 
            <paramref name="indexHigh"/> values are such that on output, 
            balanced matrix[i,j] is 0, if i <entity value="gt"/> j and 
            (i <entity value="le"/> j &lt;
            	<paramref name="indexLow"/> or 
            <paramref name="indexHigh"/>
            	&lt; i <entity value="le"/> matrix size <entity value="ndash"/> 1).
            </param>
            <param name="indexHigh">
            Upon return, contains the high index that records the permutation information. The <paramref name="indexLow"/> and 
            <paramref name="indexHigh"/> values are such that on output, 
            balanced matrix[i,j] is 0, if i <entity value="gt"/> j and 
            (i <entity value="le"/> j &lt;
            	<paramref name="indexLow"/> or 
            <paramref name="indexHigh"/>
            	&lt; i <entity value="le"/> matrix size <entity value="ndash"/> 1).
            </param>
            <returns>
            The scale information.
            </returns>
            <remarks>
            If you want to compute more accurate eigenvectors for an asymmetric matrix, complete the following steps:
            <list type="number">
            		<item>
            			<description>
            Balance the original matrix using this method.
            </description>
            		</item>
            		<item>
            			<description>
            Use <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:])"/> to get the eigenvectors of the balanced matrix. 
            </description>
            		</item>
            		<item>
            			<description>
            Use <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.BackTransformEigenVectors(System.Double[0:,0:],NationalInstruments.Analysis.Math.EigenVectorSide,NationalInstruments.Analysis.Math.BalanceMethod,System.Int32,System.Int32,System.Double[])"/> to back-transform the eigenvectors of the balanced matrix to the eigenvectors of the original matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="squareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="squareMatrix"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="balanceMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 12:39:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Balances a complex, general matrix so that its eigenvectors can be computed more accurately. 
            </summary>
            <param name="inputSquareMatrix">
            The matrix to be balanced.
            </param>
            <param name="balanceMethod">
            An enumeration specifying how to balance the matrix. This is a value from the 
            <see cref="T:NationalInstruments.Analysis.Math.BalanceMethod"/> enumeration. If <paramref name="balanceMethod"/> is 
            <see cref="F:NationalInstruments.Analysis.Math.BalanceMethod.NeitherPermutedNorScaled"/>, <paramref name="indexLow"/> = 0, 
            <paramref name="indexHigh"/> = matrix size <entity value="ndash"/> 1, 
            scale[i] = 1, where i = 0 to matrix size <entity value="ndash"/> 1.
            </param>
            <param name="indexLow">
            Upon return, contains the low index that records the permutation information. The <paramref name="indexLow"/> and 
            <paramref name="indexHigh"/> values are such that on output, 
            <paramref name="balancedMatrix"/>[i,j] is 0, if i <entity value="gt"/> j and 
            (i <entity value="le"/> j &lt;
            	<paramref name="indexLow"/> or 
            <paramref name="indexHigh"/>
            	&lt; i <entity value="le"/> matrix size <entity value="ndash"/> 1).
            </param>
            <param name="indexHigh">
            Upon return, contains the high index that records the permutation information. The <paramref name="indexLow"/> and 
            <paramref name="indexHigh"/> values are such that on output, 
            <paramref name="balancedMatrix"/>[i,j] is 0, if i <entity value="gt"/> j and 
            (i <entity value="le"/> j &lt;
            	<paramref name="indexLow"/> or 
            <paramref name="indexHigh"/>
            	&lt; i <entity value="le"/> matrix size <entity value="ndash"/> 1).
            </param>
            <param name="balancedMatrix">
            The balanced matrix.
            </param>
            <returns>
            The scale information.
            </returns>
            <remarks>
            If you want to compute more accurate eigenvectors for an asymmetric matrix, complete the following steps:
            <list type="number">
            		<item>
            			<description>
            Balance the original matrix using this method.
            </description>
            		</item>
            		<item>
            			<description>
            Use <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:])"/> to get the eigenvectors of the balanced matrix. 
            </description>
            		</item>
            		<item>
            			<description>
            Use <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.BackTransformEigenVectors(System.Double[0:,0:],NationalInstruments.Analysis.Math.EigenVectorSide,NationalInstruments.Analysis.Math.BalanceMethod,System.Int32,System.Int32,System.Double[])"/> to back-transform the eigenvectors of the balanced matrix to the eigenvectors of the original matrix.
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrix"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="balanceMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 12:39:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.BackTransformEigenVectors(System.Double[0:,0:],NationalInstruments.Analysis.Math.EigenVectorSide,NationalInstruments.Analysis.Math.BalanceMethod,System.Int32,System.Int32,System.Double[])">
            <summary>
            Transforms the eigenvectors of a real, balanced matrix to those of the original matrix. 
            </summary>
            <param name="eigenVectorsMatrix">
            The eigenvectors of the balanced matrix.
            </param>
            <param name="side">
            The enumeration specifying whether the <paramref name="eigenVectorsMatrix"/> contains the right side or left side eigenvectors.
            </param>
            <param name="balanceMethod">
            The enumeration specifying how the original matrix is balanced. Pass the same value for <paramref name="balanceMethod"/> that was passed to <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)"/> when the original matrix was balanced.
            </param>
            <param name="indexLow">
            The low index specifying the permutation information that was obtained from <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)"/>.
            </param>
            <param name="indexHigh">
            The high index specifying the the permutation information that was obtained from <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)"/>.
            </param>
            <param name="scale">
            The scale information from <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)"/>.
            </param>
            <returns>
            The eigenvectors of the original matrix. 
            </returns>
            <remarks>
            For more accurate eigenvectors, complete the following steps:
            <list type="number">
            		<item>
            			<description>
            Balance the original matrix using <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)"/>.
            </description>
            		</item>
            		<item>
            			<description>
            Call <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:])"/> to get the eigenvectors of the balanced matrix.
            </description>
            		</item>
            		<item>
            			<description>
            Call this method to back-transform the eigenvectors of the balanced matrix to the eigenvectors of the original matrix. 
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="eigenVectorsMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="eigenVectorsMatrix"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="eigenVectorsMatrix"/> is not a square matrix.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="side"/> is invalid.
            <para>
            -or-
            </para>
            	<para>
                    Specified <paramref name="balanceMethod"/> is invalid.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 12:38:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.BackTransformEigenVectors(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenVectorSide,NationalInstruments.Analysis.Math.BalanceMethod,System.Int32,System.Int32,System.Double[])">
            <summary>
            Transforms the eigenvectors of a complex balanced matrix to those of the original matrix. 
            </summary>
            <param name="eigenVectorsMatrix">
            The eigenvectors of the balanced matrix.
            </param>
            <param name="side">
            The enumeration specifying whether the <paramref name="eigenVectorsMatrix"/> contains the right side or left side eigenvectors.
            </param>
            <param name="balanceMethod">
            The enumeration specifying how the original matrix is balanced. Pass the same value for <paramref name="balanceMethod"/> that was passed to <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)"/> when the original matrix was balanced.
            </param>
            <param name="indexLow">
            The low index specifying the permutation information that was obtained from <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)"/>.
            </param>
            <param name="indexHigh">
            The high index specifying the the permutation information that was obtained from <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)"/>.
            </param>
            <param name="scale">
            The scale information from <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)"/>.
            </param>
            <returns>
            The eigenvectors of the original matrix. 
            </returns>
            <remarks>
            For more accurate eigenvectors, complete the following steps:
            <list type="number">
            		<item>
            			<description>
            Balance the original matrix using <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.MatrixBalance(System.Double[0:,0:],NationalInstruments.Analysis.Math.BalanceMethod,System.Int32@,System.Int32@)"/>.
            </description>
            		</item>
            		<item>
            			<description>
            Call <see cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenValueVector(System.Double[0:,0:])"/> to get the eigenvectors of the balanced matrix.
            </description>
            		</item>
            		<item>
            			<description>
            Call this method to back-transform the eigenvectors of the balanced matrix to the eigenvectors of the original matrix. 
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="eigenVectorsMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="eigenVectorsMatrix"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="eigenVectorsMatrix"/> is not a square matrix.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="side"/> is invalid.
            <para>
            -or-
            </para>
            	<para>
                    Specified <paramref name="balanceMethod"/> is invalid.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 12:38:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenAB(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Computes the generalized eigenvalues for a pair of real matrices. 
            </summary>
            <param name="inputSquareMatrixA">
            The first real square input matrix.
            </param>
            <param name="inputSquareMatrixB">
            The second real square input matrix.
            </param>
            <returns>
            The generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>). 
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputSquareMatrixA"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputSquareMatrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputSquareMatrixA"/> is not a square matrix.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputSquareMatrixA"/> and <paramref name="inputSquareMatrixB"/> do not have the same size.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method computes the following generalized eigenproblems:
            <para indent="true">
                    <image src="GenEigenABform_0.png"/>
                </para>
                <para indent="true">
                    <image src="GenEigenABform_3.png"/>
                </para>
                <para>
            where <image src="GenEigenABform_2.png"/> is the generalized eigenvalues of (A, B).
            </para>
            </remarks>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 5:25:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenAB(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Math.EigenVectorSide,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Computes the generalized eigenvalues and the left or right generalized eigenvectors for a pair of real matrices. 
            </summary>
            <param name="inputSquareMatrixA">
            The first real square input matrix.
            </param>
            <param name="inputSquareMatrixB">
            The second real square input matrix.
            </param>
            <param name="side">
            The enumeration specifying whether the <paramref name="eigenVectors"/> contains the right side or left side eigenvectors. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.EigenVectorSide"/> enumeration.
            </param>
            <param name="eigenVectors">
            The generalized eigenvectors of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>). Each column of <paramref name="eigenVectors"/> is a generalized eigenvector of the selected <paramref name="side"/>.
            </param>
            <returns>
            The generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>). 
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputSquareMatrixA"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputSquareMatrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputSquareMatrixA"/> is not a square matrix.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputSquareMatrixA"/> and <paramref name="inputSquareMatrixB"/> do not have the same size.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="side"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method computes the following generalized eigenproblems:
            <para indent="true">
                    <image src="GenEigenABform_0.png"/>
                </para>
                <para indent="true">
                    <image src="GenEigenABform_3.png"/>
                </para>
                <para>
            where <image src="GenEigenABform_2.png"/> is the generalized eigenvalues of (A, B).
            </para>
            </remarks>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 5:26:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenAB(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Computes the generalized eigenvalues and the left and right generalized eigenvectors for a pair of real matrices. 
            </summary>
            <param name="inputSquareMatrixA">
            The first real square input matrix.
            </param>
            <param name="inputSquareMatrixB">
            The second real square input matrix.
            </param>
            <param name="leftEigenVectors">
            The left generalized eigenvectors of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>). Each column of <paramref name="leftEigenVectors"/> is a left side generalized eigenvector.
            </param>
            <param name="rightEigenVectors">
            The right generalized eigenvectors of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>). Each column of <paramref name="rightEigenVectors"/> is a right side generalized eigenvector.
            </param>
            <returns>
            The generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>). 
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputSquareMatrixA"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputSquareMatrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputSquareMatrixA"/> is not a square matrix.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputSquareMatrixA"/> and <paramref name="inputSquareMatrixB"/> do not have the same size.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method computes the following generalized eigenproblems:
            <para indent="true">
                    <image src="GenEigenABform_0.png"/>
                </para>
                <para indent="true">
                    <image src="GenEigenABform_3.png"/>
                </para>
                <para>
            where <image src="GenEigenABform_2.png"/> is the generalized eigenvalues of (A, B).
            </para>
            </remarks>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 5:25:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenAB(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:])">
            <summary>
            Computes the generalized eigenvalues for a pair of complex matrices. 
            </summary>
            <param name="inputSquareMatrixA">
            The first complex square input matrix.
            </param>
            <param name="inputSquareMatrixB">
            The second complex square input matrix.
            </param>
            <returns>
            The generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>). 
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputSquareMatrixA"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputSquareMatrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputSquareMatrixA"/> is not a square matrix.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputSquareMatrixA"/> and <paramref name="inputSquareMatrixB"/> do not have the same size.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method computes the following generalized eigenproblems:
            <para indent="true">
                    <image src="GenEigenABform_0.png"/>
                </para>
                <para indent="true">
                    <image src="GenEigenABform_3.png"/>
                </para>
                <para>
            where <image src="GenEigenABform_2.png"/> is the generalized eigenvalues of (A, B).
            </para>
            </remarks>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 5:22:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenAB(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.EigenVectorSide,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Computes the generalized eigenvalues and the left or right generalized eigenvectors for a pair of complex matrices. 
            </summary>
            <param name="inputSquareMatrixA">
            The first complex square input matrix.
            </param>
            <param name="inputSquareMatrixB">
            The second complex square input matrix.
            </param>
            <param name="side">
            The enumeration specifying whether the <paramref name="eigenVectors"/> contains the right side or left side eigenvectors. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.EigenVectorSide"/> enumeration.
            </param>
            <param name="eigenVectors">
            The generalized eigenvectors of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>). Each column of <paramref name="eigenVectors"/> is a generalized eigenvector of the selected <paramref name="side"/>.
            </param>
            <returns>
            The generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>). 
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputSquareMatrixA"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputSquareMatrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputSquareMatrixA"/> is not a square matrix.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputSquareMatrixA"/> and <paramref name="inputSquareMatrixB"/> do not have the same size.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="side"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method computes the following generalized eigenproblems:
            <para indent="true">
                    <image src="GenEigenABform_0.png"/>
                </para>
                <para indent="true">
                    <image src="GenEigenABform_3.png"/>
                </para>
                <para>
            where <image src="GenEigenABform_2.png"/> is the generalized eigenvalues of (A, B).
            </para>
            </remarks>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 5:24:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.GeneralEigenAB(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Computes the generalized eigenvalues and the left and right generalized eigenvectors for a pair of complex matrices. 
            </summary>
            <param name="inputSquareMatrixA">
            The first complex square input matrix.
            </param>
            <param name="inputSquareMatrixB">
            The second complex square input matrix.
            </param>
            <param name="leftEigenVectors">
            The left generalized eigenvectors of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>). Each column of <paramref name="leftEigenVectors"/> is a left side generalized eigenvector.
            </param>
            <param name="rightEigenVectors">
            The right generalized eigenvectors of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>). Each column of <paramref name="rightEigenVectors"/> is a right side generalized eigenvector.
            </param>
            <returns>
            The generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>). 
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputSquareMatrixA"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputSquareMatrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputSquareMatrixA"/> is not a square matrix.
            <para>
            -or-
            </para>
                <para>
                    <paramref name="inputSquareMatrixA"/> and <paramref name="inputSquareMatrixB"/> do not have the same size.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method computes the following generalized eigenproblems:
            <para indent="true">
                    <image src="GenEigenABform_0.png"/>
                </para>
                <para indent="true">
                    <image src="GenEigenABform_3.png"/>
                </para>
                <para>
            where <image src="GenEigenABform_2.png"/> is the generalized eigenvalues of (A, B).
            </para>
            </remarks>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 5:23:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.HessenbergDecompositionInPlace(System.Double[0:,0:])">
            <summary>
            Performs an in-place Hessenberg decomposition of a real matrix. 
            </summary>
            <param name="inputSquareMatrix">
            On input, contains the real square matrix. On output, contains the Hessenberg matrix, resulting from the decomposition.
            </param>
            <returns>
            The orthogonal matrix resulting from the decomposition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputSquareMatrix"/> is not a square matrix.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method performs the decomposition of a complex matrix A, such that 
            <para indent="true">
            A = QHQ' 
            </para>
                <list type="table" bordered="false">
                    <listheader>
                        <term></term>
                        <description></description>
                    </listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
            Q represents the orthogonal matrix, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            H represents the Hessenberg matrix, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            Q' represents the transpose of Q.
            </description>
                    </item>
                </list>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.HessenbergDecomposition(System.Double[0:,0:],System.Double[0:,0:]@)"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 5:38:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.HessenbergDecomposition(System.Double[0:,0:],System.Double[0:,0:]@)">
            <summary>
            Performs a Hessenberg decomposition of a real matrix. 
            </summary>
            <param name="inputSquareMatrix">
            The real square input matrix.
            </param>
            <param name="hessenbergMatrix">
            The Hessenberg matrix resulting from the decomposition.
            </param>
            <returns>
            The orthogonal matrix resulting from the decomposition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputSquareMatrix"/> is not a square matrix.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method performs the decomposition of a complex matrix A, such that 
            <para indent="true">
            A = QHQ' 
            </para>
                <list type="table" bordered="false">
                    <listheader>
                        <term></term>
                        <description></description>
                    </listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
            Q represents the orthogonal matrix, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            H represents <paramref name="hessenbergMatrix"/>, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            Q' represents the transpose of Q.
            </description>
                    </item>
                </list>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.HessenbergDecompositionInPlace(System.Double[0:,0:])"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 5:34:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.HessenbergDecompositionInPlace(NationalInstruments.ComplexDouble[0:,0:])">
            <summary>
            Performs an in-place Hessenberg decomposition of a complex matrix.
            </summary>
            <param name="inputSquareMatrix">
            On input, contains the complex square matrix. On output, contains the Hessenberg matrix, resulting from the decomposition.
            </param>
            <returns>
            The orthogonal matrix resulting from the decomposition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputSquareMatrix"/> is not a square matrix.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            This method performs the decomposition of a complex matrix A, such that 
            <para indent="true">
            A = QHQ' 
            </para>
                <list type="table" bordered="false">
                    <listheader>
                        <term></term>
                        <description></description>
                    </listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
            Q represents the orthogonal matrix, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            H represents the Hessenberg matrix, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            Q' represents the transpose of Q.
            </description>
                    </item>
                </list>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.HessenbergDecomposition(System.Double[0:,0:],System.Double[0:,0:]@)"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 5:38:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.HessenbergDecomposition(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Performs a Hessenberg decomposition of a complex matrix. 
            </summary>
            <param name="inputSquareMatrix">
            The complex square input matrix.
            </param>
            <param name="hessenbergMatrix">
            The Hessenberg matrix resulting from the decomposition.
            </param>
            <returns>
            The orthogonal matrix resulting from the decomposition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <paramref name="inputSquareMatrix"/> is not a square matrix.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.Math.LinearAlgebra.HessenbergDecompositionInPlace(System.Double[0:,0:])"/>
            <remarks>
            This method performs the decomposition of a complex matrix A, such that 
            <para indent="true">
            A = QHQ' 
            </para>
                <list type="table" bordered="false">
                    <listheader>
                        <term></term>
                        <description></description>
                    </listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
            Q represents the orthogonal matrix, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            H represents <paramref name="hessenbergMatrix"/>, and 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            Q' represents the transpose of Q.
            </description>
                    </item>
                </list>
            </remarks>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/10/2005 5:33:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QZDecomposition(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,System.Double[0:,0:]@,System.Double[0:,0:]@,NationalInstruments.ComplexDouble[]@,System.Double[]@)">
            <summary>
            Performs the QZ decomposition of a pair of real matrices. This method computes only the Q matrix, 
            Z matrix, and the generalized eigenvalues alpha and beta.
            </summary>
            <param name="inputSquareMatrixA">
            The first real square input matrix (A).
            </param>
            <param name="inputSquareMatrixB">
            The second real square input matrix (B).
            </param>
            <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues. <see cref="T:NationalInstruments.Analysis.Math.ReorderMechanism"/> gives the available reorder mechanisms.
            </param>
            <param name="orthogonalMatrixQ">
            Upon return, contains the orthogonal matrix (Q) that is generated by the decomposition.
            </param>
            <param name="orthogonalMatrixZ">
            Upon return, contains the orthogonal matrix (Z) that is generated by the decomposition.
            </param>
            <param name="alpha">
            Upon return, contains the numerators of the generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>).
            </param>
            <param name="beta">
            Upon return, contains the denominators of the generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>).
            </param>
            <remarks>
            QZ decomposition decomposes a matrix pair (A,B) as follows:
            <para indent="true">
            [AA, BB, Q, Z, alpha, beta, leftVec, rightVec] = QZ(A,B) 
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            Q'AZ = AA,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q'BZ = BB,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            AA is a quasi-triangular matrix,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            BB is an upper triangular matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q and Z are orthogonal matrices.
            </description>
            		</item>
            	</list>
            	<para indent="true">
            A * [rightVec] * diag(beta) = B * [rightVec] * diag(alpha) 
            </para>
            	<para>
            and
            </para>
            	<para indent="true">
            diag(beta) * [leftVec]' * A = diag(alpha) * [leftVec]'*B 
            </para>
            where ' represents "transpose".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrixA"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputSquareMatrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrixA"/> is not a square matrix.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputSquareMatrixA"/> and <paramref name="inputSquareMatrixB"/> do not have the same size.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="reorderMechanism"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 10:30:11 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QZDecomposition(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,System.Double[0:,0:]@,System.Double[0:,0:]@,NationalInstruments.ComplexDouble[]@,System.Double[]@,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Performs the QZ decomposition of a pair of real matrices. This method does not compute the left side 
            and right side eigenvectors.
            </summary>
            <param name="inputSquareMatrixA">
            The first real square input matrix (A).
            </param>
            <param name="inputSquareMatrixB">
            The second real square input matrix (B).
            </param>
            <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues. <see cref="T:NationalInstruments.Analysis.Math.ReorderMechanism"/> gives the available reorder mechanisms.
            </param>
            <param name="orthogonalMatrixQ">
            Upon return, contains the orthogonal matrix (Q) that is generated by the decomposition.
            </param>
            <param name="orthogonalMatrixZ">
            Upon return, contains the orthogonal matrix (Z) that is generated by the decomposition.
            </param>
            <param name="alpha">
            Upon return, contains the numerators of the generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>).
            </param>
            <param name="beta">
            Upon return, contains the denominators of the generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>).
            </param>
            <param name="quasiTriangularMatrixA">
            Upon return, contains the quasi-triangular matrix such that Q'AZ = <paramref name="quasiTriangularMatrixA"/>. 
            </param>
            <param name="upperTriangularMatrixB">
            Upon return, contains the upper triangular matrix such that Q'BZ = <paramref name="upperTriangularMatrixB"/>.
            </param>
            <remarks>
            QZ decomposition decomposes a matrix pair (A,B) as follows:
            <para indent="true">
            [AA, BB, Q, Z, alpha, beta, leftVec, rightVec] = QZ(A,B) 
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            Q'AZ = AA,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q'BZ = BB,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            AA is <paramref name="quasiTriangularMatrixA"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            BB is <paramref name="upperTriangularMatrixB"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q and Z are orthogonal matrices.
            </description>
            		</item>
            	</list>
            	<para indent="true">
            A * [rightVec] * diag(beta) = B * [rightVec] * diag(alpha) 
            </para>
            	<para>
            and
            </para>
            	<para indent="true">
            diag(beta) * [leftVec]' * A = diag(alpha) * [leftVec]'*B 
            </para>
            where ' represents "transpose".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrixA"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputSquareMatrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrixA"/> is not a square matrix.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputSquareMatrixA"/> and <paramref name="inputSquareMatrixB"/> do not have the same size.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="reorderMechanism"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:35:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QZDecomposition(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,System.Double[0:,0:]@,System.Double[0:,0:]@,NationalInstruments.ComplexDouble[]@,System.Double[]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Performs the QZ decomposition of a pair of real matrices. This method does not compute the 
            quasi-triangular matrix A and the upper triangular matrix B.
            </summary>
            <param name="inputSquareMatrixA">
            The first real square input matrix (A).
            </param>
            <param name="inputSquareMatrixB">
            The second real square input matrix (B).
            </param>
            <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues. <see cref="T:NationalInstruments.Analysis.Math.ReorderMechanism"/> gives the available reorder mechanisms.
            </param>
            <param name="orthogonalMatrixQ">
            Upon return, contains the orthogonal matrix (Q) that is generated by the decomposition.
            </param>
            <param name="orthogonalMatrixZ">
            Upon return, contains the orthogonal matrix (Z) that is generated by the decomposition.
            </param>
            <param name="alpha">
            Upon return, contains the numerators of the generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>).
            </param>
            <param name="beta">
            Upon return, contains the denominators of the generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>).
            </param>
            <param name="leftEigenVectors">
            Upon return, contains the left generalized eigenvectors of matrix pair (A,B). 
            </param>
            <param name="rightEigenVectors">
            Upon return, contains the right generalized eigenvectors of matrix pair (A,B). 
            </param>
            <remarks>
            QZ decomposition decomposes a matrix pair (A,B) as follows:
            <para indent="true">
            [AA, BB, Q, Z, alpha, beta, leftVec, rightVec] = QZ(A,B) 
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            Q'AZ = AA,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q'BZ = BB,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            AA is a quasi-triangular matrix,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            BB is an upper triangular matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q and Z are orthogonal matrices.
            </description>
            		</item>
            	</list>
            	<para indent="true">
            A * [rightVec] * diag(beta) = B * [rightVec] * diag(alpha) 
            </para>
            	<para>
            and
            </para>
            	<para indent="true">
            diag(beta) * [leftVec]' * A = diag(alpha) * [leftVec]'*B 
            </para>
            where ' represents "transpose".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrixA"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputSquareMatrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrixA"/> is not a square matrix.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputSquareMatrixA"/> and <paramref name="inputSquareMatrixB"/> do not have the same size.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="reorderMechanism"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:34:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QZDecomposition(System.Double[0:,0:],System.Double[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,System.Double[0:,0:]@,System.Double[0:,0:]@,NationalInstruments.ComplexDouble[]@,System.Double[]@,System.Double[0:,0:]@,System.Double[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Performs the QZ decomposition of a pair of real matrices.
            </summary>
            <param name="inputSquareMatrixA">
            The first real square input matrix (A).
            </param>
            <param name="inputSquareMatrixB">
            The second real square input matrix (B).
            </param>
            <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues. <see cref="T:NationalInstruments.Analysis.Math.ReorderMechanism"/> gives the available reorder mechanisms.
            </param>
            <param name="orthogonalMatrixQ">
            Upon return, contains the orthogonal matrix (Q) that is generated by the decomposition.
            </param>
            <param name="orthogonalMatrixZ">
            Upon return, contains the orthogonal matrix (Z) that is generated by the decomposition.
            </param>
            <param name="alpha">
            Upon return, contains the numerators of the generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>).
            </param>
            <param name="beta">
            Upon return, contains the denominators of the generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>).
            </param>
            <param name="quasiTriangularMatrixA">
            Upon return, contains the quasi-triangular matrix such that Q'AZ = <paramref name="quasiTriangularMatrixA"/>. 
            </param>
            <param name="upperTriangularMatrixB">
            Upon return, contains the upper triangular matrix such that Q'BZ = <paramref name="upperTriangularMatrixB"/>.
            </param>
            <param name="leftEigenVectors">
            Upon return, contains the left generalized eigenvectors of matrix pair (A,B). 
            </param>
            <param name="rightEigenVectors">
            Upon return, contains the right generalized eigenvectors of matrix pair (A,B). 
            </param>
            <remarks>
            QZ decomposition decomposes a matrix pair (A,B) as follows:
            <para indent="true">
            [AA, BB, Q, Z, alpha, beta, leftVec, rightVec] = QZ(A,B) 
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            Q'AZ = AA,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q'BZ = BB,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            AA is <paramref name="quasiTriangularMatrixA"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            BB is <paramref name="upperTriangularMatrixB"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q and Z are orthogonal matrices.
            </description>
            		</item>
            	</list>
            	<para indent="true">
            A * [rightVec] * diag(beta) = B * [rightVec] * diag(alpha) 
            </para>
            	<para>
            and
            </para>
            	<para indent="true">
            diag(beta) * [leftVec]' * A = diag(alpha) * [leftVec]'*B 
            </para>
            where ' represents "transpose".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrixA"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputSquareMatrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrixA"/> is not a square matrix.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputSquareMatrixA"/> and <paramref name="inputSquareMatrixB"/> do not have the same size.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="reorderMechanism"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:35:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QZDecomposition(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[]@,NationalInstruments.ComplexDouble[]@)">
            <summary>
            Performs the QZ decomposition of a pair of complex matrices. This method does not compute the 
            left side and right side eigenvectors, the quasi triangular matrix, and the upper triangular matrix.
            </summary>
            <param name="inputSquareMatrixA">
            The first complex square input matrix (A).
            </param>
            <param name="inputSquareMatrixB">
            The second complex square input matrix (B).
            </param>
            <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues. <see cref="T:NationalInstruments.Analysis.Math.ReorderMechanism"/> gives the available reorder mechanisms.
            </param>
            <param name="orthogonalMatrixQ">
            Upon return, contains the orthogonal matrix (Q) that is generated by the decomposition.
            </param>
            <param name="orthogonalMatrixZ">
            Upon return, contains the orthogonal matrix (Z) that is generated by the decomposition.
            </param>
            <param name="alpha">
            Upon return, contains the numerators of the generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>).
            </param>
            <param name="beta">
            Upon return, contains the denominators of the generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>).
            </param>
            <remarks>
            QZ decomposition decomposes a matrix pair (A,B) as follows:
            <para indent="true">
            [AA, BB, Q, Z, alpha, beta, leftVec, rightVec] = QZ(A,B) 
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            Q'AZ = AA,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q'BZ = BB,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            AA is a quasi-triangular matrix,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            BB is an upper triangular matrix, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q and Z are orthogonal matrices.
            </description>
            		</item>
            	</list>
            	<para indent="true">
            A * [rightVec] * diag(beta) = B * [rightVec] * diag(alpha) 
            </para>
            	<para>
            and
            </para>
            	<para indent="true">
            diag(beta) * [leftVec]' * A = diag(alpha) * [leftVec]'*B 
            </para>
            where ' represents "transpose".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrixA"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputSquareMatrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrixA"/> is not a square matrix.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputSquareMatrixA"/> and <paramref name="inputSquareMatrixB"/> do not have the same size.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="reorderMechanism"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:32:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.QZDecomposition(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[]@,NationalInstruments.ComplexDouble[]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Performs the QZ decomposition of a pair of complex matrices.
            </summary>
            <param name="inputSquareMatrixA">
            The first complex square input matrix (A).
            </param>
            <param name="inputSquareMatrixB">
            The second complex square input matrix (B).
            </param>
            <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues. <see cref="T:NationalInstruments.Analysis.Math.ReorderMechanism"/> gives the available reorder mechanisms.
            </param>
            <param name="orthogonalMatrixQ">
            Upon return, contains the orthogonal matrix (Q) that is generated by the decomposition.
            </param>
            <param name="orthogonalMatrixZ">
            Upon return, contains the orthogonal matrix (Z) that is generated by the decomposition.
            </param>
            <param name="alpha">
            Upon return, contains the numerators of the generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>).
            </param>
            <param name="beta">
            Upon return, contains the denominators of the generalized eigenvalues of (<paramref name="inputSquareMatrixA"/>, <paramref name="inputSquareMatrixB"/>).
            </param>
            <param name="quasiTriangularMatrixA">
            Upon return, contains the quasi-triangular matrix such that Q'AZ = <paramref name="quasiTriangularMatrixA"/>. 
            </param>
            <param name="upperTriangularMatrixB">
            Upon return, contains the upper triangular matrix such that Q'BZ = <paramref name="upperTriangularMatrixB"/>.
            </param>
            <param name="leftEigenVectors">
            Upon return, contains the left generalized eigenvectors of matrix pair (A,B). 
            </param>
            <param name="rightEigenVectors">
            Upon return, contains the right generalized eigenvectors of matrix pair (A,B). 
            </param>
            <remarks>
            QZ decomposition decomposes a matrix pair (A,B) as follows:
            <para indent="true">
            [AA, BB, Q, Z, alpha, beta, leftVec, rightVec] = QZ(A,B) 
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            Q'AZ = AA,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q'BZ = BB,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            AA is <paramref name="quasiTriangularMatrixA"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            BB is <paramref name="upperTriangularMatrixB"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q and Z are orthogonal matrices.
            </description>
            		</item>
            	</list>
            	<para indent="true">
            A * [rightVec] * diag(beta) = B * [rightVec] * diag(alpha) 
            </para>
            	<para>
            and
            </para>
            	<para indent="true">
            diag(beta) * [leftVec]' * A = diag(alpha) * [leftVec]'*B 
            </para>
            where ' represents "transpose".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrixA"/> is <see langword="null"/>.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputSquareMatrixB"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrixA"/> is not a square matrix.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="inputSquareMatrixA"/> and <paramref name="inputSquareMatrixB"/> do not have the same size.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="reorderMechanism"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/27/2005 3:33:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SchurDecomposition(System.Double[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,System.Double[0:,0:]@)">
            <summary>
            Computes the Schur decomposition of a real square matrix A.
            </summary>
            <param name="inputSquareMatrix">
            The input square matrix.
            </param>
            <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues and corresponding Schur vectors. <see cref="T:NationalInstruments.Analysis.Math.ReorderMechanism"/> gives the available reorder mechanisms.
            </param>
            <param name="schurForm">
            The Schur form matrix. <paramref name="schurForm"/> is a quasi-triangular matrix. 
            </param>
            <returns>
            The eigenvalues of <paramref name="inputSquareMatrix"/>, in the same order that they appear on the diagonal of <paramref name="schurForm"/>.
            </returns>
            <remarks>
            This method computes the Schur decomposition of a real square matrix A as follows: 
            <para indent="true">
            A = QSQ' 
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            Q is a real orthogonal matrix composed of Schur vectors,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            S is a real Schur form matrix, which is upper quasi-triangular with 1*1 and 2*2 blocks on its diagonal,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            the 2*2 matrix has complex conjugate eigenvalues of A, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q' is the transpose of Q. 
            </description>
            		</item>
            	</list>
            	<para> Use this overload if you do not need the orthogonal matrix Q.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrix"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="reorderMechanism"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 1:09:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SchurDecomposition(System.Double[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Computes the Schur decomposition of a real square matrix A.
            </summary>
            <param name="inputSquareMatrix">
            The input square matrix.
            </param>
            <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues and corresponding Schur vectors. <see cref="T:NationalInstruments.Analysis.Math.ReorderMechanism"/> gives the available reorder mechanisms.
            </param>
            <param name="schurForm">
            The Schur form matrix. <paramref name="schurForm"/> is a quasi-triangular matrix. 
            </param>
            <param name="orthogonalMatrix">
            The orthogonal matrix Q.
            </param>
            <returns>
            The eigenvalues of <paramref name="inputSquareMatrix"/>, in the same order that they appear on the diagonal of <paramref name="schurForm"/>.
            </returns>
            <remarks>
            This method computes the Schur decomposition of a real square matrix A as follows: 
            <para indent="true">
            A = QSQ' 
            </para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            Q is a real orthogonal matrix composed of Schur vectors,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            S is a real Schur form matrix, which is upper quasi-triangular with 1*1 and 2*2 blocks on its diagonal,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            the 2*2 matrix has complex conjugate eigenvalues of A, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q' is the transpose of Q. 
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrix"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="reorderMechanism"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 1:09:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SchurDecomposition(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Computes the Schur decomposition of a complex square matrix A.
            </summary>
            <param name="inputSquareMatrix">
            The input complex square matrix.
            </param>
            <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues and corresponding Schur vectors. <see cref="T:NationalInstruments.Analysis.Math.ReorderMechanism"/> gives the available reorder mechanisms.
            </param>
            <param name="schurForm">
            The complex Schur form matrix. <paramref name="schurForm"/> is an upper triangular matrix. 
            </param>
            <returns>
            The eigenvalues of <paramref name="inputSquareMatrix"/>, in the same order that they appear on the diagonal of <paramref name="schurForm"/>.
            </returns>
            <remarks>
            This method computes the Schur decomposition of a complex square matrix A as follows: 
            <para indent="true">
            A = QSQ<format type="superscript">H</format>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            Q is a unitary matrix composed of Schur vectors,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            S is a complex Schur form matrix, which is an upper triangular matrix,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q<format type="superscript">H</format> is the conjugate transpose of Q. 
            </description>
            		</item>
            	</list>
            	<para> Use this overload if you do not need the orthogonal matrix Q.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrix"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="reorderMechanism"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 1:26:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.LinearAlgebra.SchurDecomposition(NationalInstruments.ComplexDouble[0:,0:],NationalInstruments.Analysis.Math.ReorderMechanism,NationalInstruments.ComplexDouble[0:,0:]@,NationalInstruments.ComplexDouble[0:,0:]@)">
            <summary>
            Computes the Schur decomposition of a complex square matrix and returns the orthogonal matrix.
            </summary>
            <param name="inputSquareMatrix">
            The input complex square matrix.
            </param>
            <param name="reorderMechanism">
            The enumeration specifying how to reorder the computed eigenvalues and corresponding Schur vectors. <see cref="T:NationalInstruments.Analysis.Math.ReorderMechanism"/> gives the available reorder mechanisms.
            </param>
            <param name="schurForm">
            The complex Schur form matrix. <paramref name="schurForm"/> is an upper triangular matrix.
            </param>
            <param name="orthogonalMatrix">
            The unitary matrix Q.
            </param>
            <returns>
            The eigenvalues of <paramref name="inputSquareMatrix"/>, in the same order that they appear on the diagonal of <paramref name="schurForm"/>.
            </returns>
            <remarks>
            This method computes the Schur decomposition of a complex square matrix A as follows: 
            <para indent="true">
            A = QSQ<format type="superscript">H</format>
            	</para>
            	<list type="table" bordered="false">
            		<listheader>
            			<term></term>
            			<description></description>
            		</listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            Q is a unitary matrix composed of Schur vectors,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            S is a complex Schur form matrix, which is an upper triangular matrix,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            Q<format type="superscript">H</format> is the conjugate transpose of Q. 
            </description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputSquareMatrix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="inputSquareMatrix"/> is not a square matrix.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="reorderMechanism"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <packages>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/29/2005 1:25:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.MatrixType">
            <summary>
            Specifies the type of the input matrix. 
            </summary>
            <lastupdated>5/28/2003 11:38:49 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.MatrixType.General">
            <summary>
            Specifies a general input matrix.
            </summary>
            <lastupdated>5/28/2003 11:38:52 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.MatrixType.PositiveDefinite">
            <summary>
            Specifies a positive definite input matrix.
            </summary>
            <lastupdated>5/28/2003 11:38:57 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.MatrixType.LowerTriangular">
            <summary>
            Specifies a lower triangular input matrix.
            </summary>
            <lastupdated>5/28/2003 11:38:55 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.MatrixType.UpperTriangular">
            <summary>
            Specifies an upper triangular input matrix.
            </summary>
            <lastupdated>5/28/2003 11:39:03 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.ModelFunctionCallback">
            <summary>
            Specifies the callback function to be used in <see cref="M:NationalInstruments.Analysis.Math.CurveFit.NonLinearFit(System.Double[],System.Double[],NationalInstruments.Analysis.Math.ModelFunctionCallback,System.Double[],System.Double@)"/>.
            </summary>
            <param name="x">
            The value at which to compute the function.
            </param>
            <param name="coefficients">
            The coefficients to use in computing the function.
            </param>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>7/10/2003 5:21:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.NormType">
            <summary>
            Specifies the type of norm used to calculate the norm of the input matrix. 
            </summary>
            <lastupdated>5/28/2003 11:39:09 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.NormType.TwoNorm">
            <summary>
            Uses the Two Norm to calculate the norm of the given matrix.
            </summary>
            <lastupdated>5/28/2003 11:40:09 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.NormType.OneNorm">
            <summary>
            Uses the One Norm to calculate the norm of the given matrix.
            </summary>
            <lastupdated>5/28/2003 11:39:59 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.NormType.FrobeniusNorm">
            <summary>
            Uses the Frobenius Norm, or F-norm, to calculate the norm of the given matrix.
            </summary>
            <lastupdated>5/28/2003 11:39:31 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.NormType.InfiniteNorm">
            <summary>
            Uses the Infinite Norm, or I-norm, to calculate the norm of the given matrix.
            </summary>
            <lastupdated>5/28/2003 11:39:49 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.Probability">
            <summary>
            Provides a set of methods that calculate error functions, probability distribution functions 
            and their inverses, and rate contingency tables.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>11/3/2011 2:49:17 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.#ctor">
            <exclude/>
            <lastupdated>9/20/2002 3:39:34 PM</lastupdated>
            <updatedby>David Rohacek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.#cctor">
            <exclude/>
            <lastupdated>9/20/2002 3:39:39 PM</lastupdated>
            <updatedby>David Rohacek</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.ContingencyTableAnalysis(System.Int32[0:,0:],System.Double@,System.Double@)">
            <summary>
            Performs a Contingency Table analysis.
            </summary>
            <param name="contingencyTable">
            An <format type="italics">S</format><entity value="ndash"/>by<entity value="ndash"/><format type="italics">K</format> matrix where <format type="italics">S</format> is the number of random samples, and <format type="italics">K</format> is the number of categories. 
            </param>
            <param name="x">
            The value at which to interpolate a corresponding <format type="italics">y</format> value.
            </param>
            <param name="probability">
            The one-sided probability that the hypothesis described in <paramref name="contingencyTable"/> is true. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="contingencyTable"/>  is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            The number of samples in <paramref name="contingencyTable"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="contingencyTable"/> has an invalid number of categories or samples.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method uses the  <format type="italics">x</format><format type="superscript">2</format>  (chi-squared) test of homogeneity or the 
             <format type="italics">x</format><format type="superscript">2</format> test of independence.
            <para>
            With the <format type="italics">x</format><format type="superscript">2</format> test of homogeneity, this method takes a random sample of some 
            fixed size from each of the categories in one categorization scheme. For each of the samples, the method categorizes the objects of 
            experimentation according to the second scheme and tallies them. The method tests the hypothesis to determine whether the populations from 
            which each sample is taken are identically distributed with respect to the second categorization scheme. 
            </para>
            With the <format type="italics">x</format><format type="superscript">2</format> test of independence, this method takes only one sample
             from the total population. The method then categorizes each object and tallies it in two categorization schemes. The method 
            tests the hypothesis that the categorization schemes are independent.
            <para>
            Before testing the hypothesis, decide upon a minimum value for <paramref name="probability"/> for each test. The minimum value you decide upon 
            for <paramref name="probability"/> is the value at which you accept or reject the hypothesis. Ordinarily, you want to 
            choose a small value for <paramref name="probability"/>. 0.05 is a common choice. If the actual value of <paramref name="probability"/> returned 
            by the method is less than the value you decide upon, consider rejecting the hypothesis.</para>
            	<format type="bold">Formulas</format>
            	<para>
            Let <format type="italics">y<format type="subscript">pq</format></format> be the number of occurrences in the (<format type="italics">pq</format>)<format type="superscript">th</format> cell of <paramref name="contingencyTable"/> for
            </para>
            	<para indent="true">
            		<format type="italics">p</format> = 0, 1,..., (<format type="italics">s</format>
            		<entity value="ndash"/> 1) and <format type="italics">q</format> = 0, 1,..., (<format type="italics">k</format>
            		<entity value="ndash"/> 1)
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">s</format> represents the number of rows in <paramref name="contingencyTable"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">k</format> represents the number of columns in <paramref name="contingencyTable"/>.
            </description>
            		</item>
            	</list>
            	<para>
            Let
            </para>
            	<para indent="true">
            		<image src="ContingencyTable1.gif"/>
            	</para>
            	<para indent="true">
            		<image src="ContingencyTable2.gif"/>
            	</para>
            	<para indent="true">
            		<image src="ContingencyTable3.gif"/>
            	</para>
            	<para indent="true">
            		<image src="ContingencyTable4.gif"/>
            	</para>
            	<para indent="true">
            		<image src="ContingencyTable5.gif"/>
            	</para>
            This method uses <format type="italics">x</format> to calculate the <paramref name="probability"/>
            	<para indent="true">
            		<format type="italics">p</format> = Prob{<format type="italics">X </format><image src="GreaterThanOrEqualTo.gif"/> x}
            </para>
            where <format type="italics">X</format> is a random variable from the <format type="italics">x</format><format type="superscript">2</format> distribution. 
            <para>
            If the hypothesis is true, <format type="italics">x</format> came from a <format type="italics">x</format><format type="superscript">2</format> distribution with (<format type="italics">s</format>
            		<entity value="ndash"/> 1) and (<format type="italics">k</format>
            		<entity value="ndash"/> 1) degrees of freedom.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.Probability.ContingencyTableAnalysis(System.Int32[0:,0:],System.Double@,System.Double@)"/> static method.
            	<code lang="VB.NET">
            Dim contingencyTable(9, 9) As Integer
            Dim x, p As Double
            Dim temp(1) As Double
            Dim signal As WhiteNoiseSignal = New WhiteNoiseSignal()
             
            ' Use a For loop to generate a random contingency table
            For j As Integer = 0 To 9
                For i As Integer = 0 To 9
                    temp = signal.Generate(100.0, 1)
                    temp(0) = temp(0) + 6.0
                    contingencyTable(i, j) = temp(0)
                Next i
            Next j
             
            Probability.ContingencyTableAnalysis(contingencyTable, x, p)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int[,] contingencyTable = new int[10, 10];
            double x, p;
            double[] temp = new double[1];
            WhiteNoiseSignal signal = new WhiteNoiseSignal();
             
            // Use a For loop to generate a random contingency table
            for (int j = 0; j &lt; 10; j++)
            {
                for (int i = 0; i &lt; 10; i++)
                {
                    temp = signal.Generate(100.0, 1);
                    temp[0] = temp[0] + 6.0;
                    contingencyTable[i, j] = (int)temp[0];
                }
            }
             
            Probability.ContingencyTableAnalysis(contingencyTable, out x, out p);
            </code>
            </example>
            <lastupdated>7/30/2007 1:34:35 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.ComplementaryErrorFunction(System.Double)">
            <summary>
            Evaluates the complementary error function.
            </summary>
            <param name="x">
            The input value at which the <see cref="M:NationalInstruments.Analysis.Math.Probability.ComplementaryErrorFunction(System.Double)"/> is to be evaluated.
            </param>
            <returns>
            The value of the complementary error function at <paramref name="x"/>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            erfc(<format type="italics">x</format>) is the complementary error function at the input value <paramref name="x"/>. It is accurate to 15 decimal places.
            </para>
            	<para indent="true">
            		<image src="ComplementaryErrorFunction.gif"/>
            	</para>
            	<para indent="true">
            erfc(<format type="italics">x</format>) = 1 <entity value="ndash"/> erf(<format type="italics">x</format>)
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.Probability.ComplementaryErrorFunction(System.Double)"/> static method.
            	<code lang="VB.NET">
            Dim x, result As Double
             
            x = 0.635
             
            result = Probability.ComplementaryErrorFunction(x)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double x, result;
             
            x = 0.635;
             
            result = Probability.ComplementaryErrorFunction(x);
            </code>
            </example>
            <lastupdated>7/30/2007 10:24:46 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.ErrorFunction(System.Double)">
            <summary>
            Evaluates the error function at the input value.
            </summary>
            <param name="x">
            The input value.
            </param>
            <returns>
            The value of the error function at <paramref name="x"/>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.Probability.ErrorFunction(System.Double)"/> static method.
            	<code lang="VB.NET">
            Dim x, result As Double
            x = 0.635
            result = Probability.ErrorFunction(x)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double x, result;
            x = 0.635;
            result = Probability.ErrorFunction(x);
            </code>
            </example>
            <lastupdated>7/30/2007 10:26:11 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.InverseFDistribution(System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the value that yields a given probability using an F distribution.
            </summary>
            <param name="probability">
            The input probability value.
            </param>
            <param name="nDegreesOfFreedom">
            The first degrees of freedom for the F distribution.
            </param>
            <param name="mDegreesOfFreedom">
            The second degrees of freedom for the F distribution.
            </param>
            <returns>
            The value that yields the <paramref name="probability"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="probability"/> is not between zero and one.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="nDegreesOfFreedom"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="mDegreesOfFreedom"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Computes the value of <format type="italics">x</format> such that the condition
            <para indent="true">
            		<format type="italics">p</format> = {Prob<format type="subscript"><format type="italics">nm</format></format> &lt; <format type="italics">x</format>}
            </para>
            is satisfied given the probability value, <format type="italics">p</format>, of a F-distributed random variable, F, with <paramref name="nDegreesOfFreedom"/> and <paramref name="mDegreesOfFreedom"/>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.Probability.InverseFDistribution(System.Double,System.Int32,System.Int32)"/> static method.
            	<code lang="VB.NET">
            Dim p, result As Double
            Dim nDegreesOfFreedom, mDegreesOfFreedom As Integer
             
            p = 0.635
            nDegreesOfFreedom = 2
            mDegreesOfFreedom = 4
             
            result = Probability.InverseFDistribution(p, nDegreesOfFreedom, mDegreesOfFreedom)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double p, result;
            int nDegreesOfFreedom, mDegreesOfFreedom;
             
            p = 0.635;
            nDegreesOfFreedom = 2;
            mDegreesOfFreedom = 4;
             
            result = Probability.InverseFDistribution(p, nDegreesOfFreedom, mDegreesOfFreedom);
            </code>
            </example>
            <lastupdated>7/30/2007 12:46:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.InverseTDistribution(System.Double,System.Int32)">
            <summary>
            Calculates the value that yields a given probability using a T distribution.
            </summary>
            <param name="probability">
            The resultant probability.
            </param>
            <param name="degreesOfFreedom">
            The degrees of freedom of the T distribution.
            </param>
            <returns>
            The value that yields the <paramref name="probability"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="probability"/> is not between zero and one.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="degreesOfFreedom"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Computes the one-tailed <format type="italics">t</format> value of <format type="italics">x</format> such that the condition
            <para indent="true">
            		<format type="italics">p</format> = Prob{T<format type="subscript"><format type="italics">n </format>
            		</format>
            		<entity value="le"/>
            		<format type="italics">x</format>}
            </para>
            is satisfied, given <paramref name="probability"/>, (1 <entity value="ndash"/>
            	<format type="italics">p</format>), of a <format type="italics">t</format>-distributed random variable, <format type="italics">T</format>, with <format type="italics">n </format>
            	<paramref name="degreesOfFreedom"/>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.Probability.InverseTDistribution(System.Double,System.Int32)"/> static method.
            	<code lang="VB.NET">
            Dim p, result As Double
            Dim degreesOfFreedom As Integer
             
            p = 0.635
            degreesOfFreedom = 2
             
            result = Probability.InverseTDistribution(p, degreesOfFreedom)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double p, result;
            int degreesOfFreedom;
             
            p = 0.635;
            degreesOfFreedom = 2;
             
            result = Probability.InverseTDistribution(p, degreesOfFreedom);
            </code>
            </example>
            <lastupdated>7/30/2007 12:48:32 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.InverseNormalDistribution(System.Double)">
            <summary>
            Calculates the value that yields a given probability using a Normal distribution.
            </summary>
            <param name="probability">
            The input probability value.
            </param>
            <returns>
            The value that yields <paramref name="probability"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="probability"/> is not between zero and one.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Computes the value of <format type="italics">x</format> such that the condition
            <para indent="true">
            		<format type="italics">p</format> = Prob{<format type="italics">X</format>
            		<entity value="ndash"/>
            		<format type="italics">x</format>}
            </para>
            is satisfied given <paramref name="probability"/>, <format type="italics">p</format>, of a Normally distributed random variable, <format type="italics">X</format>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.Probability.InverseNormalDistribution(System.Double)"/> static method.
            	<code lang="VB.NET">
            Dim p, result As Double
            p = 0.635
            result = Probability.InverseNormalDistribution(p)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double p, result;
            p = 0.635;
            result = Probability.InverseNormalDistribution(p);
            </code>
            </example>
            <lastupdated>7/30/2007 12:47:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.InverseChiSquareDistribution(System.Double,System.Int32)">
            <summary>
            Calculates the value that yields a given probability using a chi-square distribution.
            </summary>
            <param name="probability">
            The input probability value.
            </param>
            <param name="degreesOfFreedom">
            The degrees of freedom of the chi-square distribution.
            </param>
            <returns>
            The value that yields <paramref name="probability"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="probability"/> is not between zero and one.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="degreesOfFreedom"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Computes the value of <format type="italics">x</format> such that the condition
            <para indent="true">
            		<format type="italics">p</format> = Prob{<format type="italics">X <entity value="le"/> x</format>}
            </para>
            is satisfied given <paramref name="probability"/>, <format type="italics">p</format>, of a <format type="italics">x</format><format type="superscript">2</format>-distributed random variable, <format type="italics">X</format>, with <format type="italics">n </format>
            	<paramref name="degreesOfFreedom"/>. 
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.Probability.InverseChiSquareDistribution(System.Double,System.Int32)"/> static method.
            	<code lang="VB.NET">
            Dim p, result As Double
            Dim degreesOfFreedom As Integer
            	
            p = 0.635
            degreesOfFreedom = 2
             
            result = Probability.InverseChiSquareDistribution(p, degreesOfFreedom)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double p, result;
            int degreesOfFreedom;
             
            p = 0.635;
            degreesOfFreedom = 2;
             
            result = Probability.InverseChiSquareDistribution(p, degreesOfFreedom);
            </code>
            </example>
            <lastupdated>7/30/2007 10:27:54 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.ChiSquareDistribution(System.Double,System.Int32)">
            <summary>
            Calculates probability using a chi-squared distribution.
            </summary>
            <param name="x">
            The point to which the probability is calculated.
            </param>
            <param name="degreesOfFreedom">
            Degrees of freedom of the distribution.
            </param>
            <returns>
            The computed probability.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="degreesOfFreedom"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Computes the one-sided probability, <format type="italics">p</format>, of the distributed random variable, <paramref name="x"/>, with the specified <paramref name="degreesOfFreedom"/>. 
            <para indent="true">
            		<format type="italics">p</format> = Prob{<format type="italics">X </format>
            		<entity value="le"/>
            		<format type="italics">x</format>}
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">X</format> represents <format type="italics">x</format><format type="superscript">2</format> distributed with <format type="italics">n </format>
            				<paramref name="degreesOfFreedom"/>, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">p</format> represents the probability, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents <paramref name="degreesOfFreedom"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<paramref name="x"/> represents the value. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.Probability.ChiSquareDistribution(System.Double,System.Int32)"/> static method.
            	<code lang="VB.NET">
            Dim x, p As Double
            Dim degreesOfFreedom As Integer
             
            x = -123.456
            degreesOfFreedom = 6
             
            ' Now probability = 0 because chi-square distributed variables are non-negative
            p = Probability.ChiSquareDistribution(x, degreesOfFreedom)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double x, p;
            int degreesOfFreedom;
             
            x = -123.456;
            degreesOfFreedom = 6;
             
            // Now probability = 0 because chi-square distributed variables are non-negative
            p = Probability.ChiSquareDistribution(x, degreesOfFreedom);
            </code>
            </example>
            <lastupdated>7/30/2007 10:24:04 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.FDistribution(System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates probability using an F distribution.
            </summary>
            <param name="x">
            The point to which the probability is calculated.
            </param>
            <param name="nDegreesOfFreedom">
            Degrees of freedom numerator.
            </param>
            <param name="mDegreesOfFreedom">
            Degrees of freedom denominator (or degrees of freedom error).
            </param>
            <returns>
            The computed probability.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="nDegreesOfFreedom"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="mDegreesOfFreedom"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Computes the one-sided probability, <format type="italics">p</format>, of the F-distributed random variable, F, with the specified <paramref name="nDegreesOfFreedom"/> and <paramref name="mDegreesOfFreedom"/>. 
            <para indent="true">
            		<format type="italics">p</format> = Prob{F<format type="italics"><format type="subscript">nm </format></format>
            		<entity value="le"/>
            		<format type="italics">x</format>}
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            F is F<entity value="ndash"/>distributed, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">p</format> represents the probability, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the first degrees of freedom,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the second degrees of freedom, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<paramref name="x"/> represents the value. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.Probability.FDistribution(System.Double,System.Int32,System.Int32)"/> static method.
            	<code lang="VB.NET">
            Dim x, p As Double
            Dim nDegreesOfFreedom, mDegreesOfFreedom As Integer
             
            x = -123.456
            nDegreesOfFreedom = 6
            mDegreesOfFreedom = 7
             
            ' Now probability = 0 because F-distributed variables are non-negative
            p = Probability.FDistribution(x, nDegreesOfFreedom, mDegreesOfFreedom)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double x, p;
            int nDegreesOfFreedom, mDegreesOfFreedom;
             
            x = -123.456;
            nDegreesOfFreedom = 6;
            mDegreesOfFreedom = 7;
             
            // Now probability = 0 because F-distributed variables are non-negative
            p = Probability.FDistribution(x, nDegreesOfFreedom, mDegreesOfFreedom);
            </code>
            </example>
            <lastupdated>7/30/2007 10:27:02 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.NormalDistribution(System.Double)">
            <summary>
            Calculates probability using a Normal distribution.
            </summary>
            <param name="x">
            The point to which the probability is calculated.
            </param>
            <returns>
            The computed probability.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Computes the one-sided probability, <format type="italics">p</format>, of the Normally distributed random variable, <format type="italics">x</format>,
            <para indent="true">
            		<format type="italics">p</format> = Prob {<format type="italics">X </format>
            		<entity value="le"/>
            		<format type="italics">x</format>}
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">X</format> is standard Normally distributed,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">p</format> represents the probability, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<paramref name="x"/> represents the value. 
            </description>
            		</item>
            	</list>
            	<para>
            This function computes only the one-sided probability. You can obtain the two-sided probability
            </para>
            	<para indent="true">
            (<format type="italics">p</format> = Prob {<entity value="ndash"/><format type="italics">x </format>
            		<entity value="le"/>
            		<format type="italics">X </format>
            		<entity value="le"/>
            		<format type="italics">x</format>}),
            </para>
            	<format type="italics">p</format>1 using the following formula:
            <para indent="true">
            		<format type="italics">p</format>1 = 1 <entity value="ndash"/> 2(1 <entity value="ndash"/>
            		<format type="italics">p</format>) = 2<format type="italics">p</format>
            		<entity value="ndash"/> 1 = 2Prob{<format type="italics">X </format>
            		<entity value="le"/>
            		<format type="italics">x</format>} <entity value="ndash"/> 1
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.Probability.NormalDistribution(System.Double)"/> static method.
            	<code lang="VB.NET">
            Dim x, p As Double
            x = 1.548
            p = Probability.NormalDistribution(x)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double x, p;
            x = 1.548;
            p = Probability.NormalDistribution(x);
             
            </code>
            </example>
            <lastupdated>7/30/2007 12:49:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Probability.TDistribution(System.Double,System.Int32)">
            <summary>
            Calculates probability using a T distribution.
            </summary>
            <param name="x">
            The point to which the probability is calculated.
            </param>
            <param name="degreesOfFreedom">
            Degrees of freedom of the distribution.
            </param>
            <returns>
            The computed probability.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="degreesOfFreedom"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            Computes the one-sided probability, <format type="italics">p</format>, of the t-distributed random variable, T<format type="subscript"><format type="italics">n</format></format>, with the specified <paramref name="degreesOfFreedom"/>
            	<para indent="true">
            		<format type="italics">p</format> = Prob{T<format type="subscript"><format type="italics">n </format>
            		</format>
            		<entity value="le"/>
            		<paramref name="x"/>}
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            T is t-distributed, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">p</format> is the probability, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> is <paramref name="degreesOfFreedom"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<paramref name="x"/> is the value. </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example uses the <see cref="M:NationalInstruments.Analysis.Math.Probability.TDistribution(System.Double,System.Int32)"/> static method.
            	<code lang="VB.NET">
            Dim x, p As Double
            Dim degreesOfFreedom As Integer
             
            x = 1.258
            degreesOfFreedom = 6
             
            p = Probability.TDistribution(x, degreesOfFreedom)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double x, p;
            int degreesOfFreedom;
             
            x = 1.258;
            degreesOfFreedom = 6;
             
            p = Probability.TDistribution(x, degreesOfFreedom);
            </code>
            </example>
            <lastupdated>7/30/2007 12:49:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.QRAlgorithm">
            <summary>
            Specifies the algorithm to be used for QR factorization.
            </summary>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>5/28/2003 11:40:17 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.QRAlgorithm.Householder">
            <summary>
            Uses the Householder algorithm for QR factorization.
            </summary>
            <lastupdated>5/28/2003 11:40:25 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.QRAlgorithm.Givens">
            <summary>
            Uses the Givens algorithm for QR factorization.
            </summary>
            <lastupdated>5/28/2003 11:40:22 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Math.QRAlgorithm.FastGivens">
            <summary>
            Uses the Fast Givens algorithm for QR factorization.
            </summary>
            <lastupdated>5/28/2003 11:40:20 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.Roots">
            <summary>
            Provides a set of methods that find the zeroes of mathematical functions.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>11/3/2011 2:49:23 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Roots.#ctor">
            <exclude/>
            <lastupdated>9/12/2005 10:22:07 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Roots.#cctor">
            <exclude/>
            <lastupdated>9/12/2005 10:22:04 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Roots.FindComplexPolynomialRoots(System.Double[])">
            <summary>
            This method is obsolete. Use the <see cref="M:NationalInstruments.Analysis.Math.Roots.FindPolynomialRoots(System.Double[])"/>
            method to achieve the same functionality.
            </summary>
            <param name="polynomialCoefficients">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <lastupdated>9/19/2009 3:08:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Roots.FindPolynomialRoots(System.Double[])">
            <summary>
            Calculates the roots of a real polynomial with high precision.
            </summary>
            <param name="polynomialCoefficients">
            The coefficients of the polynomial in ascending order of power. 
            </param>
            <returns>
            The roots of the polynomial. 
            </returns>
            <example>The following example uses the FindPolynomialRoots static method.
            	<code lang="VB.NET">
            Dim polynomialCoefficients() As Double
            Dim polynomialRoots() As ComplexDouble
             
            ' Generate an array of real polynomial coefficients
            polynomialCoefficients = PatternGeneration.Ramp(10, 1.0, 50.0)
             
            polynomialRoots = Roots.FindPolynomialRoots(polynomialCoefficients)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] polynomialCoefficients;
            ComplexDouble[] polynomialRoots;
             
            // Generate an array of real polynomial coefficients
            polynomialCoefficients = PatternGeneration.Ramp(10, 1.0, 50.0);
             
            polynomialRoots = Roots.FindPolynomialRoots(polynomialCoefficients);
            </code>
            </example>
            <lastupdated>9/11/2007 5:52:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Roots.FindPolynomialRoots(NationalInstruments.ComplexDouble[])">
            <summary>
            Calculates the roots of a complex polynomial with high precision.
            </summary>
            <param name="polynomialCoefficients">
            The coefficients of the polynomial in ascending order of power. 
            </param>
            <returns>
            The roots of the polynomial. 
            </returns>
            <lastupdated>9/12/2005 10:21:53 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.Statistics">
            <summary>
            Provides a set of methods that perform statistical operations on data.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Placeholder
            </remarks>
            <seealso example="Analysis/Enterprise/StatisticalFailurePrediction" launch="false">Statistical Failure Prediction</seealso>
            <lastupdated>1/31/2013 11:41:21 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.#ctor">
            <exclude/>
            <lastupdated>10/03/2002 3:39:34 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.#cctor">
            <exclude/>
            <lastupdated>10/03/2002 3:39:39 PM</lastupdated>
            <updatedby>Tony Holbert</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Mean(System.Double[])">
            <summary>
            Computes the mean of the values in the input array.
            </summary>
            <param name="inputData">
            The input array. 
            </param>
            <returns>
            The average of the values in <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>
            This method uses the following formula:
            </para>
                <para indent="true">
                    <image src="Mean.gif"/>
                </para>
            where <format type="italics">n</format> is the number of elements in <format type="italics">X</format>, 
            the <paramref name="inputData"/> parameter. 
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the mean of the generated noise signal. 
            <code lang="VB.NET">
            Dim inputData(1999) As Double
            Dim mean As Double
            Dim gaussianNoise As GaussianNoiseSignal = New GaussianNoiseSignal(1.0, 17)
             
            ' Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000)
             
            mean = Statistics.Mean(inputData)</code>
            </example>
            <example>
                <code lang="C#">
            double[] inputData = new double[2000];
            double mean;
            GaussianNoiseSignal gaussianNoise = new GaussianNoiseSignal(1.0, 17);
             
            // Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000);
             
            mean = Statistics.Mean(inputData);
            </code>
            </example>
            <lastupdated>7/31/2007 12:27:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Moment(System.Double[],System.Int32)">
            <summary>Computes the moment about the mean of the specified order for the input array. 
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="order">
            The order of the moment about the mean to be computed. If this value less than 0, the mean is not computed.
            </param>
            <returns>
            The moment about the mean as specified by the order.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="order"/> is less than zero.
                </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method computes the <format type="italics">m</format><format type="superscript">th</format>-order moment using the formula
            <para indent="true">
                    <image src="Moment1.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <image src="Moment2.gif"/> is the <format type="italics">m</format><format type="superscript">th</format>-order moment,  
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">n</format> is the number of elements in <paramref name="inputData"/>, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">x<format type="subscript">i</format></format> is the <format type="italics">i</format><format type="superscript">th</format> 
            element of <paramref name="inputData"/>.
            </description>
                    </item>
                </list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the third and fourth order moments of the generated noise signal.
            <code lang="VB.NET">
            Dim inputData(1999) As Double
            Dim skew, kurtosis As Double
            Dim order As Integer
            Dim uniformNoise As UniformNoiseSignal = New UniformNoiseSignal(17)
             
            ' Generate a Uniform noise signal that represents inputData
            inputData = uniformNoise.Generate(1000.0, 200)
             
            ' Determine skewness (third-order moment)
            order = 3
            skew = Statistics.Moment(inputData, order)
             
            ' Determine kurtosis (fourth-order moment)
            order = 4
            kurtosis = Statistics.Moment(inputData, order)
            </code>
            </example>
            <example>
                <code lang="C#">
            double[] inputData = new double[200];
            double skew, kurtosis;
            int order;
            UniformNoiseSignal uniformNoise = new UniformNoiseSignal(17);
             
            // Generate a Uniform noise signal that represents inputData
            inputData = uniformNoise.Generate(1000.0, 200);
             
            // Determine skewness (third-order moment)
            order = 3;
            skew = Statistics.Moment(inputData, order);
             
            // Determine kurtosis (fourth-order moment)
            order = 4;
            kurtosis = Statistics.Moment(inputData, order);
            </code>
            </example>
            <lastupdated>7/31/2007 12:31:14 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Median(System.Double[])">
            <summary>
            Calculates the median value of the input array by sorting the values of 
            the input array and selecting the middle element(s) of the sorted array. 
            </summary>
            <param name="inputData">
            The input array. 
            </param>
            <returns>
            The calculated median value of <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>
            Let <format type="italics">n</format> represent the number of elements in <paramref name="inputData"/>, 
            and let <format type="italics">s</format> represent an array containing the values in <paramref name="inputData"/> 
            sorted in ascending order. The method finds the median using the following identity:
            </para>
                <para indent="true">
                    <image src="median1.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <image src="median2.gif"/>, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <image src="median3.gif"/>.
            </description>
                    </item>
                </list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the median of the generated noise signal.
            <code lang="VB.NET">
            Dim inputData(1999) As Double
            Dim median As Double
            Dim gaussianNoise As GaussianNoiseSignal = New GaussianNoiseSignal(1.0, 17)
             
            ' Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000)
             
            median = Statistics.Median(inputData)
             
            </code>
            </example>
            <example>
                <code lang="C#">
            double[] inputData = new double[2000];
            double median;
            GaussianNoiseSignal gaussianNoise = new GaussianNoiseSignal(1.0, 17);
             
            // Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000);
             
            median = Statistics.Median(inputData);
             
            </code>
            </example>
            <lastupdated>7/31/2007 12:28:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Mode(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            This method is obsolete. Use the overload of this method to achieve the same functionality.
            </summary>
            <param name="inputData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="modeBase">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="modeTop">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="modeIntervals">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <lastupdated>9/19/2009 3:09:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Mode(System.Double[],System.Int32)">
            <summary>
            Finds the mode(s) of a list of numbers.
            </summary>
            <param name="inputData">
            The input data set.
            </param>
            <param name="intervals">
            The number of bins of the histogram. If <paramref name="intervals"/> &gt; 0, the method uses the 
            histogram algorithm to find the modes; otherwise, the method finds the exact modes of the input set. 
            Any two elements, a and b, from the input data set, are regarded as equal if 
            |a <entity value="ndash"/> b| <entity value="le"/>
                <see cref="F:System.Double.Epsilon"/>*|a|. 
            </param>
            <returns>
            The modes found.
             
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>  Mode refers to the most common values obtained in a set of observations. 
             For example, for a data set (3, 7, 3, 9, 9, 3, 5, 1, 8, 5), the unique mode is 3. 
            </para>
                <para>There can be more than one mode. For example, for a data set (2, 4, 9, 6, 4, 6, 6, 2, 8, 2), there are two modes: 2 and 6. 
            </para>
                <para>
            A distribution with a single mode is said to be unimodal. A distribution with more than one mode is said to be bimodal, trimodal, and so on, or in general, multimodal. 
            <para>
            If no number occurs more than once in the set, then there is no mode for that set of numbers.</para>
                </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the mode or modes of the generated noise signal. 
            <code lang="VB.NET">
            Dim inputData(1999) As Double
            Dim mode() As Double
            Dim intervals As Integer
            Dim gaussianNoise As GaussianNoiseSignal = New GaussianNoiseSignal(1.0, 17)
             
            ' Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000)
             
            intervals = 50
            mode = Statistics.Mode(inputData, intervals)
             
            </code>
            </example>
            <example>
                <code lang="C#">
            double[] inputData = new double[2000];
            double[] mode;
            int intervals;
            GaussianNoiseSignal gaussianNoise = new GaussianNoiseSignal(1.0, 17);
             
            // Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000);
             
            intervals = 50;
            mode = Statistics.Mode(inputData, intervals);
            </code>
            </example>
            <lastupdated>7/31/2007 12:30:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Mode(System.Double[])">
            <summary>
            Finds the exact mode(s) of a list of numbers.
            </summary>
            <param name="inputData">
            The input data set.
            </param>
            <returns>
            The modes found. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>  Mode refers to the most common values obtained in a set of observations. 
             For example, for a data set (3, 7, 3, 9, 9, 3, 5, 1, 8, 5), the unique mode is 3. 
            </para>
            	<para>There can be more than one mode. For example, for a data set (2, 4, 9, 6, 4, 6, 6, 2, 8, 2), there are two modes: 2 and 6. 
            </para>
            	<para>
            A distribution with a single mode is said to be unimodal. A distribution with more than one mode is said to be bimodal, trimodal, and so on, or in general, multimodal. 
            <para>
            If no number occurs more than once in the set, then there is no mode for that set of numbers.</para>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the mode or modes of the generated noise signal. 
            <code lang="VB.NET">
            Dim inputData(1999) As Double
            Dim mode() As Double
            Dim gaussianNoise As GaussianNoiseSignal = New GaussianNoiseSignal(1.0, 17)
             
            ' Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000)
             
            mode = Statistics.Mode(inputData)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[2000];
            double[] mode;
            GaussianNoiseSignal gaussianNoise = new GaussianNoiseSignal(1.0, 17);
             
            // Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000);
             
            mode = Statistics.Mode(inputData);
            </code>
            </example>
            <lastupdated>3/9/2012 9:28:21 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.RootMeanSquared(System.Double[])">
            <summary>Computes the root mean square (rms) of the input array.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <returns>
            The calculated root mean square value of <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method uses the following formula:
            <para indent="true">
                    <image src="RootMeanSquared.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">n</format> is the number of elements in <paramref name="inputData"/>, and  
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">x<format type="subscript">i</format></format> is the <format type="italics">i</format><format type="superscript">th</format> 
            element of <paramref name="inputData"/>.
            </description>
                    </item>
                </list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the root mean square (rms) of the generated noise signal. 
            <code lang="VB.NET">
            Dim inputData(1999) As Double
            Dim rms As Double
            Dim gaussianNoise As GaussianNoiseSignal = New GaussianNoiseSignal(1.0, 17)
             
            ' Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 200)
             
            rms = Statistics.RootMeanSquared(inputData)
            </code>
            </example>
            <example>
                <code lang="C#">
            double[] inputData = new double[2000];
            double rms;
            GaussianNoiseSignal gaussianNoise = new GaussianNoiseSignal(1.0, 17);
             
            // Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000);
             
            rms = Statistics.RootMeanSquared(inputData);
            </code>
            </example>
            <lastupdated>9/11/2007 5:53:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.RootMeanSquared(NationalInstruments.ComplexDouble[])">
            <summary>Computes the root mean square (rms) of the <see cref="T:NationalInstruments.ComplexDouble"/> input array.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <returns>
            The calculated root mean square value of <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method uses the following formula:
            InsertImage
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>3/20/2008 11:53:10 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Histogram(System.Double[],System.Double,System.Double,System.Int32,System.Double[]@)">
            <summary>
            Calculates the histogram of the array. The histogram is the count of the number of elements that fall within a specified set of intervals.
            </summary>
            <param name="inputData">
            The input data.
            </param>
            <param name="histogramBase">
            The lower bound of the range over which the histogram is computed.
            </param>
            <param name="histogramTop">
            The upper bound of the range over which the histogram is computed.
            </param>
            <param name="histogramIntervals">
            The number of elements in the histogram and in the  <paramref name="centerValues"/> output array.
            </param>
            <param name="centerValues">
            Upon return, contains the mid-point values of the intervals (bins) used to determine the histogram.
            </param>
            <returns>
            The discrete histogram of the input array, <paramref name="inputData"/>. 
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="histogramBase"/> is greater than <paramref name="histogramTop"/>.
                </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of <paramref name="histogramIntervals"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The true plot of the histogram of the input array is obtained by plotting histogram versus axis.
            <para>
            The histogram is a frequency count of the number of times that a specified interval, or bin, occurs in the input array. The width of the frequency bin is 
            </para>
            	<para indent="true">
            		<image src="Histogram1and3.gif"/>
            	</para>
            	<para>
            where <format type="italics">m</format> is the requested number of bins. The <paramref name="centerValues"/> of each bin are set according to the following equation: 
            </para>
            	<para indent="true">
            		<image src="Histogram2.gif"/>
            	</para>
            	<para>
            		<format type="bold">Example</format>
            	</para>
            	<para>
            If the input array, <paramref name="inputData"/>, is
            </para>
            	<para indent="true">
            		<format type="italics">X</format> = {0, 1, 3, 3, 4, 4, 4, 5, 5, 8}
            </para>
            	<para>
            then the histogram, <format type="italics">h</format>(<format type="italics">x</format>), of <format type="italics">X</format> for eight intervals is
            </para>
            	<para indent="true">
            		<format type="italics">h</format>(<format type="italics">X</format>) = {<format type="italics">h</format><format type="subscript">0</format>, <format type="italics">h</format><format type="subscript">1</format>, <format type="italics">h</format><format type="subscript">2</format>, <format type="italics">h</format><format type="subscript">3</format>, <format type="italics">h</format><format type="subscript">4</format>, <format type="italics">h</format><format type="subscript">5</format>, <format type="italics">h</format><format type="subscript">6</format>, <format type="italics">h</format><format type="subscript">7</format>} = {1, 1, 0, 2, 3, 2, 0, 1}. 
            </para>
            	<para>
            Notice that the histogram of the input array <format type="italics">X</format> is a function of <format type="italics">X</format>.
            </para>
            	<para>
            This method obtains histogram, <format type="italics">h</format>(<format type="italics">x</format>), as follows. The method scans the input array <format type="italics">X</format> to determine the range of values in it. Then the method establishes the interval width, <format type="italics">x</format>, according to the specified number of <paramref name="histogramIntervals"/>,
            </para>
            	<para indent="true">
            		<image src="Histogram1and3.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            max represents the maximum value found in the input array <format type="italics">X</format>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            min represents the minimum value found in the input array <format type="italics">X</format>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">m</format> represents the specified number of <paramref name="histogramIntervals"/>.
            </description>
            		</item>
            	</list>
            	<para>
            Let <image src="chi.gif"/> represent the output array <paramref name="inputData"/>, because the histogram is a function of <format type="italics">X</format>. The method evaluates elements of <format type="italics">c</format> using
            </para>
            	<para indent="true">
            		<image src="Histogram4.gif"/>
            	</para>
            	<para>
            The method defines the <format type="italics">i</format><format type="superscript">th</format> interval to be the range of values from up to but not including,
            </para>
            	<para indent="true">
            		<image src="Histogram5.gif"/>
            	</para>
            	<para>
            and defines the function to be
            </para>
            	<para indent="true">
            		<image src="Histogram6.gif"/>
            	</para>
            	<para>
            The function has unity value if the value of <format type="italics">x</format> falls within the specified interval. Otherwise it is zero. Notice that the interval <image src="delta_i.gif"/> is centered about <image src="chi_i.gif"/>, and its width is <image src="delta_x.gif"/>.
            </para>
            	<para>
            The last interval, <image src="Histogram7.gif"/>, is defined. In other words, if a value is equal to max, it is counted as belonging to the last interval.
            </para>
            	<para>
            Finally, the method evaluates the histogram sequence <format type="italics">H</format> using
            </para>
            	<para indent="true">
            		<image src="Histogram8.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">h<format type="subscript">i</format></format> represents the elements of the output array histogram, <format type="italics">h</format>(<format type="italics">x</format>), and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> is the number of elements in the input array <format type="italics">X</format>. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates a histogram of the generated noise signal. 
            <code lang="VB.NET">
            Dim inputData(1999) As Double
            Dim centerValues(9) As Double
            Dim histogramData() As Integer
            Dim histogramBase, histogramTop As Double
            Dim histogramIntervals As Integer
            Dim gaussianNoise As GaussianNoiseSignal = New GaussianNoiseSignal(1.0, 17)
             
            ' Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000)
             
            histogramIntervals = 10
             
            ' Get the minimum and maximum values in the array
            histogramBase = ArrayOperation.GetMin(inputData)
            histogramTop = ArrayOperation.GetMax(inputData)
             
            ' Calculate histogram
            histogramData = Statistics.Histogram(inputData, histogramBase, histogramTop, histogramIntervals, centerValues)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData = new double[10];
            double[] centerValues = new double[10];
            int[] histogramData;
            double histogramBase, histogramTop;
            int histogramIntervals;
            GaussianNoiseSignal gaussianNoise = new GaussianNoiseSignal(1.0, 17);
             
            // Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000);
             
            histogramIntervals = 10;
             
            // Get the minimum and maximum values in the array
            histogramBase = ArrayOperation.GetMin(inputData);
            histogramTop = ArrayOperation.GetMax(inputData);
             
            // Calculate histogram
            histogramData = Statistics.Histogram(inputData, histogramBase, histogramTop, histogramIntervals, out centerValues);
             
            </code>
            </example>
            <seealso example="Analysis/Enterprise/Histogram" launch="false">Enterprise Edition Histogram Example</seealso>
            <seealso example="Analysis/Professional/Histogram" launch="false">Professional Edition Histogram Example</seealso>
            <lastupdated>1/30/2013 9:53:52 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.StandardDeviation(System.Double[])">
            <summary>Computes the standard deviation of the values in the input array.
            </summary>
            <param name="inputData">
            The input array.
            </param>
            <returns>
            The calculated standard deviation of the values in <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>
            This method computes the population standard deviation of the input data. To determine the sample 
            standard deviation, multiply the value returned by this function by the result of 
             The values are computed using the following formulas:
            </para>
                <para indent="true">
                    <image src="StandardDev_Variance1.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">n</format> represents the number of elements in <format type="italics">X</format>, and
            </description></item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">X</format> represents <paramref name="inputData"/>.
            </description></item>
                </list>
                <para indent="true">
                    <image src="StandardDev_Variance2.gif"/></para>
            where <format type="italics">w</format> represents <format type="italics">n</format> for population and (<format type="italics">n</format><entity value="ndash"/>1) for sample.
            <para indent="true">
                    <image src="StandardDev_Variance3.gif"/></para>
                <para>
            To determine the sample standard deviation, multiply the value returned by this function by the result of
            </para>
                <para indent="true">
                    <image src="StandardDev_Variance4.gif"/>
                </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the standard deviation of the generated noise signal. 
            <code lang="VB.NET">
            Dim inputData(1999) As Double
            Dim standardDeviation As Double
            Dim gaussianNoise As GaussianNoiseSignal = New GaussianNoiseSignal(1.0, 17)
             
            ' Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 200)
             
            standardDeviation = Statistics.StandardDeviation(inputData)
            </code>
            </example>
            <example>
                <code lang="C#">
            double[] inputData = new double[2000];
            double standardDeviation;
            GaussianNoiseSignal gaussianNoise = new GaussianNoiseSignal(1.0, 17);
             
            // Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000);
             
            standardDeviation = Statistics.StandardDeviation(inputData);
            </code>
            </example>
            <lastupdated>7/31/2007 1:21:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Variance(System.Double[])">
            <summary>Computes the variance of the input array.
            </summary>
            <param name="inputData">
            The input array whose variance is to be calculated.
            </param>
            <returns>
            The variance of the values in <paramref name="inputData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of samples in <paramref name="inputData"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
                <para>
            This method computes the population variance of the input data. The values are computed using the following formulas:
            </para>
                <para indent="true">
                    <image src="StandardDev_Variance1.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">n</format> represents the number of elements in <format type="italics">X</format>, and
            </description></item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">X</format> represents <paramref name="inputData"/>.
            </description></item>
                </list>
                <para indent="true">
                    <image src="StandardDev_Variance2.gif"/></para>
            where <format type="italics">w</format> represents <format type="italics">n</format> for population and (<format type="italics">n</format><entity value="ndash"/>1) for sample.
            <para indent="true">
                    <image src="StandardDev_Variance3.gif"/></para>
                <para>
            To determine the sample variance, multiply the value returned by this function by the result of
            </para>
                <para indent="true">
                    <image src="StandardDev_Variance4.gif"/>
                </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the variance of the generated noise signal.
            <code lang="VB.NET">
            Dim inputData(1999) As Double
            Dim variance As Double
            Dim gaussianNoise As GaussianNoiseSignal = New GaussianNoiseSignal(1.0, 17)
             
            ' Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 200)
             
            variance = Statistics.Variance(inputData)
            </code>
            </example>
            <example>
                <code lang="C#">
            double[] inputData = new double[2000];
            double variance;
            GaussianNoiseSignal gaussianNoise = new GaussianNoiseSignal(1.0, 17);
             
            // Generate a Gaussian noise signal that represents inputData
            inputData = gaussianNoise.Generate(1000.0, 2000);
             
            variance = Statistics.StandardDeviation(inputData);
            </code>
            </example>
            <lastupdated>7/31/2007 1:22:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Anova1Way(System.Double[],System.Int32[],System.Int32)">
            <summary>Performs a one-way analysis of variance in the fixed-effect model.
            </summary>
            <param name="observations">
            The experimental observations.
            </param>
            <param name="levels">
            The level to which the corresponding observation belongs.
            </param>
            <param name="numberOfLevels">
            The total number of different levels that are assumed by the experimental factor.
            </param>
            <returns>
            The output of the one-way analysis of variance. This is specified using <see cref="T:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="observations"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="levels"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="observations"/> is equal to zero.
                </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="levels"/> has missing <paramref name="observations"/>.
                </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of samples in <paramref name="levels"/> is less than one or greater 
            than or equal to the number of elements in <paramref name="observations"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Level of factor is outside the allowable range.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.Analysis.Math.Statistics.Anova1Way(System.Double[],System.Int32[],System.Int32)"/> takes an array, <format type="italics">X</format>, of experimental observations made at various levels of a factor, with at least one observation per level, and performs a one-way analysis of variance in the fixed-effect model. In the one-way analysis of variance, the method tests whether the level of the factor has an effect on the experimental outcome. 
            <para>
            Refer to <see keyword="Anova1WayFactorsAndLevels" keywordType="mstudio">Factors and Levels</see>, 
            <see keyword="Anova1WayStatisticalModel" keywordType="mstudio">Statistical Model</see>, 
            <see keyword="Anova1WayAssumptions" keywordType="mstudio">Assumptions</see>, 
            <see keyword="Anova1WayHypothesis" keywordType="mstudio">Hypothesis</see>, 
            <see keyword="Anova1WayGeneralMethod" keywordType="mstudio">General Method</see>, 
            <see keyword="Anova1WayTestingTheHypothesis" keywordType="mstudio">Testing the Hypothesis</see>, 
            and <see keyword="Anova1WayFormulas" keywordType="mstudio">Formulas</see> for more information. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example tests the hypothesis that the amount of rainfall does not affect the crop output. This means that every level has the same mean for the crop output.  The array, <format type="monospace">observations</format>, indicates the crop output and the 
            array, <format type="monospace">rain</format>, indicates the amount of rainfall in inches. 
            The output of the one-way analysis of variance is stored in the variable, <format type="monospace">output</format>. 
            If <format type="monospace">output.Significance </format> is too large, we should reject our hypothesis. 
            This means the amount of rainfall does affect the crop output.
            <code lang="VB.NET">
            Dim numSamples As Integer = 9
            Dim observations() As Double = {123.0, 122.0, 126.0, 124.0, 140.0, 141.0, 143.0, 120.0, 118.0, 128.0}
            Dim rain() As Double = {8.0, 1.0, 1.5, 0.5, 2.5, 3.5, 3.0, 6.0, 8.0, 0.0}
            Dim levels(numSamples) As Integer
            Dim numberOfLevels As Integer = 0
            Dim output As Statistics.Anova1WayOutput
             
            For i As Integer = 1 To rain.Length - 1
                If (rain(i) &lt;= 2.0) Then
                    levels(i) = 0
                ElseIf (rain(i) <entity value="gt"/> 4.0) Then
                    levels(i) = 2
                Else
                    levels(i) = 1
                End If
            Next
             
            For i As Integer = 1 To levels.Length - 1
                If (numberOfLevels &lt; levels(i)) Then
                    numberOfLevels = levels(i)
                End If
            Next
             
            ' Total number of different levels
            numberOfLevels = numberOfLevels + 1
             
            ' Perform one-way analysis of variance on array, observations. The array consists of experimental observations made at various levels of a factor, with at least one observation per level.
            output = Statistics.Anova1Way(observations, levels, numberOfLevels)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            int numSamples = 10;
            double[] observations = new double[] { 123.0, 122.0, 126.0, 124.0, 140.0, 141.0, 143.0, 120.0, 118.0, 128.0 };
            double[] rain = new double[] { 8.0, 1.0, 1.5, 0.5, 2.5, 3.5, 3.0, 6.0, 8.0, 0.0 };
            int[] levels = new int[numSamples];
            int numberOfLevels = 0;
            Statistics.Anova1WayOutput output = new Statistics.Anova1WayOutput();
             
            for (int i = 0; i &lt; rain.Length; i++)
            {
                if (rain[i] &lt;= 2.0)
                    levels[i] = 0;
                else if (rain[i] <entity value="gt"/> 4.0)
                    levels[i] = 2;
                else
                    levels[i] = 1;
            }
             
            for (int i = 0; i &lt; levels.Length; i++)
            {
                if (numberOfLevels &lt; levels[i])
                    numberOfLevels = levels[i];
            }
             
            // Total number of different levels
            numberOfLevels++;
             
            // Perform one-way analysis of variance on array, observations. The array consists of experimental observations made at various levels of a factor, with at least one observation per level.
            output = Statistics.Anova1Way(observations, levels, numberOfLevels);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>11/4/2008 1:10:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Anova2Way(System.Double[],System.Int32[],System.Int32[],System.Int32,System.Int32,NationalInstruments.Analysis.Math.AnovaModel,System.Int32,NationalInstruments.Analysis.Math.AnovaModel)">
            <summary>Performs a two-way analysis of variance.
            </summary>
            <param name="observations">
            The experimental observations.
            </param>
            <param name="levelAData">
            The level of factor <format type="italics">A</format> to which the corresponding observation belongs.
            </param>
            <param name="levelBData">
            The level of factor <format type="italics">B</format> to which the corresponding observation belongs.
            </param>
            <param name="observationsPerCell">
            The number of observations per cell.
            </param>
            <param name="numberOfLevelsInA">
            The number of levels in factor <format type="italics">A</format>.
            </param>
            <param name="levelAEffect">
            The anova model used for factor <format type="italics">A</format>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.AnovaModel"/> enumeration.
            </param>
            <param name="numberOfLevelsInB">
            The number of levels in factor <format type="italics">B</format>.
            </param>
            <param name="levelBEffect">
            The anova model used for factor <format type="italics">B</format>. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.AnovaModel"/> enumeration.
            </param>
            <returns>
            The output of the two-way analysis of variance. This is specified using <see cref="T:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput"/>.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The <format type="italics">random effect model</format> was requested when the <format type="italics">fixed effect model</format> is required.  
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="observations"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="levelAData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="levelBData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="levelAData"/> is less than or equal to one.
                </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="levelBData"/> is less than or equal to one.
                </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="observations"/> is equal to zero.
                </para>
            	<para>
            -or-
            </para>
            	<para>
                    The input data is unbalanced.
                </para>
            	<para>
            -or-
            </para>
            	<para>
            Random effect model was requested when the fixed effect model is required.
                </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Level of factor is outside the allowable range.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.Analysis.Math.Statistics.Anova2Way(System.Double[],System.Int32[],System.Int32[],System.Int32,System.Int32,NationalInstruments.Analysis.Math.AnovaModel,System.Int32,NationalInstruments.Analysis.Math.AnovaModel)"/> takes an array of experimental observations made at various levels of two factors and performs a two-way analysis of variance.
            <para>
            Refer to <see keyword="Anova2WayFactorsLevelsAndCells" keywordType="mstudio">Factors, Levels, and Cells</see>, 
            <see keyword="Anova2WayRandomAndFixedEffects" keywordType="mstudio">Random and Fixed Effects</see>, 
            <see keyword="Anova2WayGeneralMethod" keywordType="mstudio">General Method</see>, 
            <see keyword="Anova2WayStatisticalModel" keywordType="mstudio">Statistical Model</see>, 
            <see keyword="Anova2WayAssumptions" keywordType="mstudio">Assumptions</see>, 
            <see keyword="Anova2WayHypothesis" keywordType="mstudio">Hypothesis</see>,  
            <see keyword="Anova2WayTestingTheHypothesis" keywordType="mstudio">Testing the Hypothesis</see>, 
            and <see keyword="Anova2WayFormulas" keywordType="mstudio">Formulas</see> for more information.  
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example tests the hypothesis that neither age nor weight has an affect on the number of sit-ups an individual performs in a given time limit.  
            The array, <format type="monospace">sitUps </format> represents how many sit-ups an individual performs. 
            The <format type="monospace">age</format> and <format type="monospace">weight </format>arrays represent an individual’s age and weight.  
            The output of the two-way analysis of variance is stored in the variable, <format type="monospace">output</format>. 
            If <format type="monospace">output.SignificanceA </format> or <format type="monospace">output.SignificanceB </format>is larger than a threshold assigned by the user, 
            we should reject the hypothesis. This means age or weight do affect the number of situps an individual can do in a given time limit.  
            <code lang="VB.NET">
            Dim sitUps() As Double = {10, 15, 20, 25, 17, 4}
            Dim weight() As Double = {30.0, 40.0, 76.0, 60.0, 51.0, 80.0}
            Dim age() As Integer = {8, 12, 15, 14, 9, 10}
            Dim ageLevel(5) As Integer
            Dim weightLevel(5) As Integer
            Dim maxAgeLevel, maxWeightLevel As Integer
            Dim output As Statistics.Anova2WayOutput
             
            ' For age, we have the following levels: 
            ' Level 0 - 6 years old to 10 years old
            ' Level 1 - 11 years old to 15 years old
            ' We are assuming all the data are between 6 and 15 years old.
            For i As Integer = 1 To age.Length - 1
                If (age(i) &lt;= 10) Then
                    ageLevel(i) = 0
                Else
                    ageLevel(i) = 1
                End If
            Next
             
            maxAgeLevel = 0
            For i As Integer = 1 To ageLevel.Length - 1
                If (maxAgeLevel &lt; ageLevel(i)) Then
                    maxAgeLevel = ageLevel(i)
                End If
            Next
             
            maxAgeLevel = maxAgeLevel + 1
             
            ' For weight, we have the following levels: 
            ' Level 0 - less that 50 kg
            ' Level 1 - between 50 kg and 75 kg
            ' Level 2 - more than 75 kg
            For i As Integer = 1 To weight.Length - 1
                If (weight(i) &lt; 50.0) Then
                    weightLevel(i) = 0
                ElseIf (weight(i) <entity value="gt"/>= 50.0 And weight(i) &lt;= 75.0) Then
                    weightLevel(i) = 1
                Else
                    weightLevel(i) = 2
                End If
            Next
             
            maxWeightLevel = 0
            For i As Integer = 1 To weightLevel.Length - 1
                If (maxWeightLevel &lt; weightLevel(i)) Then
                    maxWeightLevel = weightLevel(i)
                End If
            Next
             
            maxWeightLevel = maxWeightLevel + 1
             
            ' Perform a two-way analysis of variance on an array, sitUps. The array consists of experimental observations made at various levels of two factors, ageLevel and weightLevel.
            output = Statistics.Anova2Way(sitUps, ageLevel, weightLevel, 1, maxAgeLevel, AnovaModel.FixedEffect, maxWeightLevel, AnovaModel.FixedEffect)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] sitUps =  new double[] { 10, 15, 20, 25, 17, 4 };
            double[] weight = new double[] { 30.0, 40.0, 76.0, 60.0, 51.0, 80.0 };
            int[] age = new int[] { 8, 12, 15, 14, 9, 10 };
            int[] ageLevel = new int[6];
            int[] weightLevel = new int[6];
            int maxAgeLevel, maxWeightLevel;
            Statistics.Anova2WayOutput output = new Statistics.Anova2WayOutput();
             
            // For age, we have the following levels: 
            // Level 0 - 6 years old to 10 years old
            // Level 1 - 11 years old to 15 years old
            // We are assuming all the data are between 6 and 15 years old.
             for (int i = 0; i &lt; age.Length; i++)
            {
                if (age[i] &lt;= 10)
                    ageLevel[i] = 0;
                else
                    ageLevel[i] = 1;
            }
             
            maxAgeLevel = 0;
            for (int i = 0; i &lt; ageLevel.Length; i++)
            {
                if (maxAgeLevel &lt; ageLevel[i])
                    maxAgeLevel = ageLevel[i];
            }
             
            maxAgeLevel++;
             
            // For weight, we have the following levels: 
            // Level 0 - less that 50 kg
            // Level 1 - between 50 kg and 75 kg
            // Level 2 - more than 75 kg
            for (int i = 0; i &lt; weight.Length; i++)
            {
                if (weight[i] &lt; 50.0)
                    weightLevel[i] = 0;
                else if (weight[i] <entity value="gt"/>= 50.0 <entity value="amp"/><entity value="amp"/> weight[i] &lt;= 75.0)
                    weightLevel[i] = 1;
                else
                    weightLevel[i] = 2;
            }
             
            maxWeightLevel = 0;
            for (int i = 0; i &lt; weightLevel.Length; i++)
            {
                if (maxWeightLevel &lt; weightLevel[i])
                    maxWeightLevel = weightLevel[i];
            }
             
            maxWeightLevel++;
             
            // Perform a two-way analysis of variance on an array, sitUps. The array consists of experimental observations made at various levels of two factors, ageLevel and weightLevel.
            output = Statistics.Anova2Way(sitUps, ageLevel, weightLevel, 1,  maxAgeLevel, AnovaModel.FixedEffect, maxWeightLevel, AnovaModel.FixedEffect);
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>1/17/2008 5:28:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Anova3Way(System.Double[],System.Int32[],System.Int32[],System.Int32[],System.Int32,System.Int32,NationalInstruments.Analysis.Math.AnovaModel,System.Int32,NationalInstruments.Analysis.Math.AnovaModel,System.Int32,NationalInstruments.Analysis.Math.AnovaModel)">
            <summary>Performs a three-way analysis of variance.
            </summary>
            <param name="observations">
            The experimental observations.
            </param>
            <param name="levelAData">
            The level of factor A to which the corresponding observation belongs.
            </param>
            &gt;
            <param name="levelBData">
            The level of factor B to which the corresponding observation belongs.
            </param>
            <param name="levelCData">
            The level of factor C to which the corresponding observation belongs.
            </param>
            <param name="observationsPerCell">
            The total number of observations per cell.
            </param>
            <param name="numberOfLevelsInA">
            The number of levels in factor A.
            </param>
            <param name="levelAEffect">
            The anova model used for factor A. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.AnovaModel"/> enumeration.
            </param>
            <param name="numberOfLevelsInB">
            The number of levels in factor B.
            </param>
            <param name="levelBEffect">
            The anova model used for factor B. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.AnovaModel"/> enumeration.
            </param>
            <param name="numberOfLevelsInC">
            The number of levels in factor C.
            </param>
            <param name="levelCEffect">
            The anova model used for factor C. This is a value from the <see cref="T:NationalInstruments.Analysis.Math.AnovaModel"/> enumeration.
            </param>
            <returns>
            The output of the three-way analysis of variance. This is specified using <see cref="T:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="observations"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="levelAData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="levelBData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="levelCData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="levelAData"/> is less than or equal to one.
                </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="levelBData"/> is less than or equal to one.
                </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="levelCData"/> is less than or equal to one.
                </para>
            	<para>
            -or-
            </para>
            	<para>
                    The number of samples in <paramref name="observations"/> is equal to zero.
                </para>
            	<para>
            -or-
            </para>
            	<para>
            The total number of data points is invalid.
                </para>
            	<para>
            -or-
            </para>
            	<para>
                    The input data is unbalanced.
                </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Level of factor is outside the allowable range.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            		<see cref="M:NationalInstruments.Analysis.Math.Statistics.Anova3Way(System.Double[],System.Int32[],System.Int32[],System.Int32[],System.Int32,System.Int32,NationalInstruments.Analysis.Math.AnovaModel,System.Int32,NationalInstruments.Analysis.Math.AnovaModel,System.Int32,NationalInstruments.Analysis.Math.AnovaModel)"/> takes an array of experimental observations made at various levels of three factors and performs a three-way analysis of variance.
            </para>
            	<para>
            In any ANOVA, you look for evidence that the factors or interactions among factors have a significant effect on experimental outcomes. What varies with each model is the method used to do this. 
            </para>
            	<para>
            Refer to <see keyword="Anova3WayRandomAndFixedEffects" keywordType="mstudio">Random and Fixed Effects</see>, 
            <see keyword="Anova3WayGeneralMethod" keywordType="mstudio">General Method</see>, 
            <see keyword="Anova3WayStatisticalModel" keywordType="mstudio">Statistical Model</see>, 
            <see keyword="Anova3WayAssumptions" keywordType="mstudio">Assumptions</see>, 
            <see keyword="Anova3WayHypothesis" keywordType="mstudio">Hypothesis</see>,  
            <see keyword="Anova3WayTestingTheHypothesis" keywordType="mstudio">Testing the Hypothesis</see>, 
            and <see keyword="Anova3WayFormulas" keywordType="mstudio">Formulas</see> for more information.  
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example tests the hypothesis that three factors, age, weight and height or their interactions, 
            have no effect on the number of sit-ups an individual performs.  The array, 
            <format type="monospace">sitUps </format> represents how many sit-ups an individual performs in a 
            given time limit. The <format type="monospace">age</format>, <format type="monospace">weight</format>, 
            and <format type="monospace">height </format> arrays represent an individual’s age, weight, and height.
            <para>
            The output of the two-way analysis of variance is stored in the variable, <format type="monospace">output</format>. 
            If <format type="monospace">output.SignificanceA </format>, <format type="monospace">output.SignificanceB </format>,
            or <format type="monospace">output.SignificanceC </format> is larger than a threshold assigned 
            by the user, we should reject the hypothesis. This means <format type="monospace">age </format>, <format type="monospace">weight </format>, 
            or <format type="monospace">height </format> affect the number of situps an individual can do within a given time limit.  If 
            <format type="monospace">output.SignificanceAB </format>, 
            <format type="monospace">output.SignificanceAC </format>, or 
            <format type="monospace">output.SignificanceBC </format> is larger than a threshold assigned 
            by the user, the hypothesis should be rejected. 
            This means that the interaction between age and weight, or the interaction between age and height, or the interaction between weight and height do affect the number of situps an individual can do in given time limit.  
            If <format type="monospace">output.SignificanceABC </format>is larger than a threshold assigned by the user, the hypothesis should be rejected.  This means that the interaction among age, weight, and height do affect the number of situps an individual can do in a given time limit.
            </para>
            	<para>In order to use the Anova3Way method, at least two observation data are needed per cell, otherwise the function will return an error. 
            </para>
            	<code lang="VB.NET">
            Dim numSamples As Integer = 16
            Dim sitUps() As Double = {10, 15, 20, 25, 17, 4, 11, 12, 14, 25, 22, 20, 10, 8, 12, 14}
            Dim weight() As Double = {30, 40, 76, 60, 51, 80, 30, 42, 32, 45, 75, 65, 55, 75, 45, 40}
            Dim height() As Double = {1.32, 1.55, 1.75, 1.4, 1.62, 1.45, 1.52, 1.45, 1.35, 1.6, 1.7, 1.48, 1.52, 1.48, 1.51, 1.49}
            Dim age() As Integer = {8, 12, 15, 14, 9, 10, 10, 11, 9, 12, 14, 15, 8, 9, 9, 12}
            Dim ageLevel(numSamples) As Integer
            Dim weightLevel(numSamples) As Integer
            Dim heightLevel(numSamples) As Integer
            Dim maxAgeLevel, maxWeightLevel, maxHeightLevel As Integer
            Dim output As Statistics.Anova3WayOutput
             
            ' For age, we have the following levels: 
            ' Level 0 - 6 years old to 10 years old
            ' Level 1 - 11 years old to 15 years old
            ' We are assuming all the data are between 6 and 15 years old.
            For i As Integer = 1 To age.Length - 1
                If (age(i) &lt;= 10) Then
                    ageLevel(i) = 0
                Else
                    ageLevel(i) = 1
                End If
            Next
             
            maxAgeLevel = 0
            For i As Integer = 1 To ageLevel.Length - 1
                If (maxAgeLevel &lt; ageLevel(i)) Then
                    maxAgeLevel = ageLevel(i)
                End If
            Next
             
            maxAgeLevel = maxAgeLevel + 1
             
            ' For weight, we have the following levels: 
            ' Level 0 - less that 50 kg
            ' Level 1 - greater than 50 kg
            For i As Integer = 1 To weight.Length - 1
                If (weight(i) &lt; 50.0) Then
                    weightLevel(i) = 0
                Else
                    weightLevel(i) = 1
                End If
            Next
             
            maxWeightLevel = 0
            For i As Integer = 1 To weightLevel.Length - 1
                If (maxWeightLevel &lt; weightLevel(i)) Then
                    maxWeightLevel = weightLevel(i)
                End If
            Next
             
            maxWeightLevel = maxWeightLevel + 1
             
            ' For height, we have the following levels: 
            ' Level 0 - less that 1.5m
            ' Level 1 - greater than 1.5m
            For i As Integer = 1 To weight.Length - 1
                If (height(i) &lt; 1.5) Then
                    heightLevel(i) = 0
                Else
                    heightLevel(i) = 1
                End If
            Next
             
            maxHeightLevel = 0
            For i As Integer = 1 To heightLevel.Length - 1
                If (maxHeightLevel &lt; heightLevel(i)) Then
                    maxHeightLevel = heightLevel(i)
                End If
            Next
             
            maxHeightLevel = maxHeightLevel + 1
             
            ' Perform a three-way analysis of variance on an array, sitUps. The array consists of experimental observations made at various levels of three factors, ageLevel, weightLevel, and heightLevel.
            output = Statistics.Anova3Way(sitUps, ageLevel, weightLevel, heightLevel, 2, maxAgeLevel, AnovaModel.RandomEffect, maxWeightLevel, AnovaModel.RandomEffect, maxHeightLevel, AnovaModel.RandomEffect)
            </code>
            </example>
            <example>
            	<code lang="C#">
            int samples = 16;
            double[] sitUps = new double[] { 10, 15, 20, 25, 17, 4, 11, 12, 14, 25, 22, 20, 10, 8, 12, 14 };
            double[] weight = new double[] { 30, 40, 76, 60, 51, 80, 30, 42, 32, 45, 75, 65, 55, 75, 45, 40 };
            double[] height = new double[] { 1.32, 1.55, 1.75, 1.40, 1.62, 1.45, 1.52, 1.45, 1.35, 1.60, 1.70, 1.48, 1.52, 1.48, 1.51, 1.49 };
            int[] age = new int[] { 8, 12, 15, 14, 9, 10, 10, 11, 9, 12, 14, 15, 8, 9, 9, 12 };
            int[] ageLevel = new int[samples];
            int[] weightLevel = new int[samples];
            int[] heightLevel = new int[samples];
            int maxAgeLevel, maxWeightLevel, maxHeightLevel;
            Statistics.Anova3WayOutput output = new Statistics.Anova3WayOutput();
             
            // For age, we have the following levels: 
            // Level 0 - 6 years old to 10 years old
            // Level 1 - 11 years old to 15 years old
            // We are assuming all the data are between 6 and 15 years old.
            for (int i = 0; i &lt; age.Length; i++)
            {
                if (age[i] &lt;= 10)
                    ageLevel[i] = 0;
                else
                    ageLevel[i] = 1;
            }
             
            maxAgeLevel = 0;
            for (int i = 0; i &lt; ageLevel.Length; i++)
            {
                if (maxAgeLevel &lt; ageLevel[i])
                    maxAgeLevel = ageLevel[i];
            }
             
            maxAgeLevel++;
             
            // For weight, we have the following levels: 
            // Level 0 - less that 50 kg
            // Level 1 - greater than 50 kg
            for (int i = 0; i &lt; weight.Length; i++)
            {
                if (weight[i] &lt; 50.0)
                    weightLevel[i] = 0;
                else
                    weightLevel[i] = 1;
            }
             
            maxWeightLevel = 0;
            for (int i = 0; i &lt; weightLevel.Length; i++)
            {
                if (maxWeightLevel &lt; weightLevel[i])
                    maxWeightLevel = weightLevel[i];
            }
             
            maxWeightLevel++;
             
            // For height, we have the following levels: 
            // Level 0 - less that 1.5m
            // Level 1 - greater than 1.5m
            for (int i = 0; i &lt; heightLevel.Length; i++)
                if (height[i] &lt; 1.5)
                    heightLevel[i] = 0;
                else
                    heightLevel[i] = 1;
             
            maxHeightLevel = 0;
            for (int i = 0; i &lt; heightLevel.Length; i++)
            {
                if (maxHeightLevel &lt; heightLevel[i])
                    maxHeightLevel = heightLevel[i];
            }
            maxHeightLevel++;
             
            // Perform a three-way analysis of variance on an array, sitUps. The array consists of experimental observations made at various levels of three factors, ageLevel, weightLevel and heightLevel.
            output = Statistics.Anova3Way(sitUps, ageLevel, weightLevel, heightLevel, 2, maxAgeLevel, AnovaModel.RandomEffect, maxWeightLevel, AnovaModel.RandomEffect, maxHeightLevel, AnovaModel.RandomEffect);
              
             
            </code>
            </example>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>11/4/2008 1:12:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput">
            <summary>
            Returns the output of the one-way analysis of variance.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>11/3/2011 2:49:47 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/7/2004 6:38:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.SumOfSquaresF">
            <summary>
            Gets the sum of squares due to the factor.
            </summary>
            <value>
            A value that indicates the sum of squares due to the factor.
            </value>
            <lastupdated>6/25/2003 12:00:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.SumOfSquaresRF">
            <summary>
            Gets the sum of squares due to the random fluctuation.
            </summary>
            <value>
            A value that indicates the sum of squares due to the random fluctuation.
            </value>
            <lastupdated>6/25/2003 12:00:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.TotalSumOfSquares">
            <summary>
            Gets the total sum of squares.
            </summary>
            <value>
            A value that indicates the total sum of squares.
            </value>
            <lastupdated>6/25/2003 12:00:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.MeanSquareErrorF">
            <summary>
            Gets the mean square error due to the factor.
            </summary>
            <value>
            A value that indicates the mean square error due to the factor.
            </value>
            <lastupdated>6/25/2003 11:59:46 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.MeanSquareErrorRF">
            <summary>
            Gets the mean square error due to the random fluctuation.
            </summary>
            <value>
            A value that indicates the mean square error due to the random fluctuation.
            </value>
            <lastupdated>6/25/2003 11:59:51 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.Significance">
            <summary>
            Gets the significance.
            </summary>
            <value>
            A value that indicates the significance.
            </value>
            <lastupdated>6/25/2003 11:59:57 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova1WayOutput.ResultFValue">
            <summary>
            Gets the resulting FValue.
            </summary>
            <value>
            A value that indicates the FValue.
            </value>
            <lastupdated>6/25/2003 11:59:54 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput">
            <summary>
            Returns the output of the two-way analysis of variance.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>11/3/2011 2:49:53 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/7/2004 6:38:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SignificanceA">
            <summary>
            Gets the level of significance associated with factor <format type="italics">A</format>.
            </summary>
            <value>
            A value that indicates the level of significance associated with factor <format type="italics">A</format>.
            </value>
            <lastupdated>6/25/2003 12:00:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SignificanceB">
            <summary>
            Gets the level of significance associated with factor <format type="italics">B</format>.
            </summary>
            <value>
            A value that indicates the level of significance associated with factor <format type="italics">B</format>.
            </value>
            <lastupdated>6/25/2003 12:00:40 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SignificanceAB">
            <summary>
            Gets the level of significance associated with factor <format type="italics">AB</format>.
            </summary>
            <value>
            A value that indicates the level of significance associated with factor <format type="italics">AB</format>.
            </value>
            <lastupdated>6/25/2003 12:00:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SumOfSquaresA">
            <summary>
            Gets the sum of squares due to the factor <format type="italics">A</format>.
            </summary>
            <value>
            A value that indicates the sum of squares due to the factor.
            </value>
            <lastupdated>5/28/2003 11:11:57 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SumOfSquaresB">
            <summary>
            Gets the sum of squares due to the factor <format type="italics">B</format>.
            </summary>
            <value>
            A value that indicates the sum of squares due to the factor.
            </value>
            <lastupdated>5/28/2003 11:12:02 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SumOfSquaresAB">
            <summary>
            Gets the sum of squares due to the factor <format type="italics">AB</format>.
            </summary>
            <value>
            A value that indicates the sum of squares due to the factor.
            </value>
            <lastupdated>5/28/2003 11:12:00 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.SumOfSquaresError">
            <summary>
            Gets the sum of squares error.
            </summary>
            <value>
            A value that indicates the sum of squares error.
            </value>
            <lastupdated>5/28/2003 11:12:05 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.DegreesOfFreedomA">
            <summary>
            Gets the degrees of freedom of the sum of squares due to factor <format type="italics">A</format>.
            </summary>
            <value>
            A value that indicates the degrees of freedom.
            </value>
            <lastupdated>6/23/2003 1:51:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.DegreesOfFreedomB">
            <summary>
            Gets the degrees of freedom of the sum of squares due to factor <format type="italics">B</format>.
            </summary>
            <value>
            A value that indicates the degrees of freedom.
            </value>
            <lastupdated>6/23/2003 1:52:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.DegreesOfFreedomAB">
            <summary>
            Gets the degrees of freedom of the sum of squares due to factor <format type="italics">AB</format>.
            </summary>
            <value>
            A value that indicates the degrees of freedom.
            </value>
            <lastupdated>6/23/2003 1:51:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.DegreesOfFreedomError">
            <summary>
            Gets the degrees of freedom of the sum of squares error.
            </summary>
            <value>
            A value that indicates the degrees of freedom.
            </value>
            <lastupdated>6/23/2003 1:52:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.MeanSquareA">
            <summary>
            Gets the mean square due to factor <format type="italics">A</format>.
            </summary>
            <value>
            A value that indicates the mean square value.
            </value>
            <lastupdated>5/28/2003 11:11:30 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.MeanSquareB">
            <summary>
            Gets the mean square due to factor <format type="italics">B</format>.
            </summary>
            <value>
            A value that indicates the mean square value.
            </value>
            <lastupdated>5/28/2003 11:11:40 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.MeanSquareAB">
            <summary>
            Gets the mean square due to factor <format type="italics">AB</format>.
            </summary>
            <value>
            A value that indicates the mean square value.
            </value>
            <lastupdated>5/28/2003 11:11:34 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.MeanSquareError">
            <summary>
            Gets the mean square error.
            </summary>
            <value>
            A value that indicates the mean square error.
            </value>
            <lastupdated>5/28/2003 11:11:43 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.FValueA">
            <summary>
            Gets the resulting FValue due to factor <format type="italics">A</format>.
            </summary>
            <value>
            A value that indicates the FValue due to factor <format type="italics">A</format>.
            </value>
            <lastupdated>5/28/2003 11:07:11 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.FValueB">
            <summary>
            Gets the resulting FValue due to factor <format type="italics">B</format>.
            </summary>
            <value>
            A value that indicates the FValue due to factor <format type="italics">B</format>.
            </value>
            <lastupdated>5/28/2003 11:11:26 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova2WayOutput.FValueAB">
            <summary>
            Gets the resulting FValue due to factor <format type="italics">AB</format>.
            </summary>
            <value>
            A value that indicates the FValue due to factor <format type="italics">AB</format>.
            </value>
            <lastupdated>5/28/2003 11:07:20 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput">
            <summary>
            Returns the output of the three-way analysis of variance.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>11/3/2011 2:50:00 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/7/2004 6:38:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceA">
            <summary>
            Gets the level of significance associated with factor <format type="italics">A</format>.
            </summary>
            <value>
            A value that indicates the level of significance associated with factor <format type="italics">A</format>.
            </value>
            <lastupdated>6/25/2003 12:01:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceB">
            <summary>
            Gets the level of significance associated with factor <format type="italics">B</format>.
            </summary>
            <value>
            A value that indicates the level of significance associated with factor <format type="italics">B</format>.
            </value>
            <lastupdated>6/25/2003 12:01:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceC">
            <summary>
            Gets the level of significance associated with factor <format type="italics">C</format>.
            </summary>
            <value>
            A value that indicates the level of significance associated with factor <format type="italics">C</format>.
            </value>
            <lastupdated>5/28/2003 11:14:26 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceAB">
            <summary>
            Gets the level of significance associated with factor <format type="italics">AB</format>.
            </summary>
            <value>
            A value that indicates the level of significance associated with factor <format type="italics">AB</format>.
            </value>
            <lastupdated>5/28/2003 11:14:14 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceAC">
            <summary>
            Gets the level of significance associated with factor <format type="italics">AC</format>.
            </summary>
            <value>
            A value that indicates the level of significance associated with factor <format type="italics">AC</format>.
            </value>
            <lastupdated>5/28/2003 11:14:19 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceBC">
            <summary>
            Gets the level of significance associated with factor <format type="italics">BC</format>.
            </summary>
            <value>
            A value that indicates the level of significance associated with factor <format type="italics">BC</format>.
            </value>
            <lastupdated>5/28/2003 11:14:24 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SignificanceABC">
            <summary>
            Gets the level of significance associated with factor <format type="italics">ABC</format>.
            </summary>
            <value>
            A value that indicates the level of significance associated with factor <format type="italics">ABC</format>.
            </value>
            <lastupdated>5/28/2003 11:14:17 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresA">
            <summary>
            Gets the sum of squares due to the factor <format type="italics">A</format>.
            </summary>
            <value>
            A value that indicates the sum of squares due to the factor.
            </value>
            <lastupdated>5/28/2003 11:14:29 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresB">
            <summary>
            Gets the sum of squares due to the factor <format type="italics">B</format>.
            </summary>
            <value>
            A value that indicates the sum of squares due to the factor.
            </value>
            <lastupdated>5/28/2003 11:14:38 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresC">
            <summary>
            Gets the sum of squares due to the factor <format type="italics">C</format>.
            </summary>
            <value>
            A value that indicates the sum of squares due to the factor.
            </value>
            <lastupdated>5/28/2003 11:14:43 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresAB">
            <summary>
            Gets the sum of squares due to the factor <format type="italics">AB</format>.
            </summary>
            <value>
            A value that indicates the sum of squares due to the factor.
            </value>
            <lastupdated>5/28/2003 11:14:31 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresAC">
            <summary>
            Gets the sum of squares due to the factor <format type="italics">AC</format>.
            </summary>
            <value>
            A value that indicates the sum of squares due to the factor.
            </value>
            <lastupdated>5/28/2003 11:14:36 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresBC">
            <summary>
            Gets the sum of squares due to the factor <format type="italics">BC</format>.
            </summary>
            <value>
            A value that indicates the sum of squares due to the factor.
            </value>
            <lastupdated>5/28/2003 11:14:40 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresABC">
            <summary>
            Gets the sum of squares due to the factor <format type="italics">ABC</format>.
            </summary>
            <value>
            A value that indicates the sum of squares due to the factor.
            </value>
            <lastupdated>5/28/2003 11:14:33 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.SumOfSquaresError">
            <summary>
            Gets the sum of squares error.
            </summary>
            <value>
            A value that indicates the sum of squares error.
            </value>
            <lastupdated>5/28/2003 11:14:46 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomA">
            <summary>
            Gets the degrees of freedom of the sum of squares due to factor <format type="italics">A</format>.
            </summary>
            <value>
            A value that indicates the degrees of freedom.
            </value>
            <lastupdated>6/23/2003 1:52:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomB">
            <summary>
            Gets the degrees of freedom of the sum of squares due to factor <format type="italics">B</format>.
            </summary>
            <value>
            A value that indicates the degrees of freedom.
            </value>
            <lastupdated>6/23/2003 1:53:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomC">
            <summary>
            Gets the degrees of freedom of the sum of squares due to factor <format type="italics">C</format>.
            </summary>
            <value>
            A value that indicates the degrees of freedom.
            </value>
            <lastupdated>6/23/2003 1:53:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomAB">
            <summary>
            Gets the degrees of freedom of the sum of squares due to factor <format type="italics">AB</format>.
            </summary>
            <value>
            A value that indicates the degrees of freedom.
            </value>
            <lastupdated>6/23/2003 1:52:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomAC">
            <summary>
            Gets the degrees of freedom of the sum of squares due to factor <format type="italics">AC</format>.
            </summary>
            <value>
            A value that indicates the degrees of freedom.
            </value>
            <lastupdated>6/23/2003 1:52:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomBC">
            <summary>
            Gets the degrees of freedom of the sum of squares due to factor <format type="italics">BC</format>.
            </summary>
            <value>
            A value that indicates the degrees of freedom.
            </value>
            <lastupdated>6/23/2003 1:53:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomABC">
            <summary>
            Gets the degrees of freedom of the sum of squares due to factor <format type="italics">ABC</format>.
            </summary>
            <value>
            A value that indicates the degrees of freedom.
            </value>
            <lastupdated>6/23/2003 1:52:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.DegreesOfFreedomError">
            <summary>
            Gets the degrees of freedom of the sum of squares error of factor A.
            </summary>
            <value>
            A value that indicates the degrees of freedom.
            </value>
            <lastupdated>6/23/2003 1:53:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareA">
            <summary>
            Gets the mean square due to factor <format type="italics">A</format>.
            </summary>
            <value>
            A value that indicates the mean square value.
            </value>
            <lastupdated>5/28/2003 11:13:51 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareB">
            <summary>
            Gets the mean square due to factor <format type="italics">B</format>.
            </summary>
            <value>
            A value that indicates the mean square value.
            </value>
            <lastupdated>5/28/2003 11:14:01 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareC">
            <summary>
            Gets the mean square due to factor <format type="italics">C</format>.
            </summary>
            <value>
            A value that indicates the mean square value.
            </value>
            <lastupdated>5/28/2003 11:14:06 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareAB">
            <summary>
            Gets the mean square due to factor <format type="italics">AB</format>.
            </summary>
            <value>
            A value that indicates the mean square value.
            </value>
            <lastupdated>5/28/2003 11:13:54 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareAC">
            <summary>
            Gets the mean square due to factor <format type="italics">AC</format>.
            </summary>
            <value>
            A value that indicates the mean square value.
            </value>
            <lastupdated>5/28/2003 11:13:59 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareBC">
            <summary>
            Gets the mean square due to factor <format type="italics">BC</format>.
            </summary>
            <value>
            A value that indicates the mean square value.
            </value>
            <lastupdated>5/28/2003 11:14:04 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareABC">
            <summary>
            Gets the mean square due to factor <format type="italics">ABC</format>.
            </summary>
            <value>
            A value that indicates the mean square value.
            </value>
            <lastupdated>5/28/2003 11:13:57 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.MeanSquareError">
            <summary>
            Gets the mean square error.
            </summary>
            <value>
            A value that indicates the mean square error.
            </value>
            <lastupdated>5/28/2003 11:14:09 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueA">
            <summary>
            Gets the resulting FValue due to factor <format type="italics">A</format>.
            </summary>
            <value>
            A value that indicates the FValue due to factor <format type="italics">A</format>.
            </value>
            <lastupdated>5/28/2003 11:13:04 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueB">
            <summary>
            Gets the resulting FValue due to factor <format type="italics">B</format>.
            </summary>
            <value>
            A value that indicates the FValue due to factor <format type="italics">B</format>.
            </value>
            <lastupdated>5/28/2003 11:13:29 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueC">
            <summary>
            Gets the resulting FValue due to factor <format type="italics">C</format>.
            </summary>
            <value>
            A value that indicates the FValue due to factor <format type="italics">C</format>.
            </value>
            <lastupdated>5/28/2003 11:13:41 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueAB">
            <summary>
            Gets the resulting FValue due to factor <format type="italics">AB</format>.
            </summary>
            <value>
            A value that indicates the FValue due to factor <format type="italics">AB</format>.
            </value>
            <lastupdated>5/28/2003 11:13:12 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueAC">
            <summary>
            Gets the resulting FValue due to factor <format type="italics">AC</format>.
            </summary>
            <value>
            A value that indicates the FValue due to factor <format type="italics">AC</format>.
            </value>
            <lastupdated>5/28/2003 11:13:24 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueBC">
            <summary>
            Gets the resulting FValue due to factor <format type="italics">BC</format>.
            </summary>
            <value>
            A value that indicates the FValue due to factor <format type="italics">BC</format>.
            </value>
            <lastupdated>5/28/2003 11:13:35 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Math.Statistics.Anova3WayOutput.FValueABC">
            <summary>
            Gets the resulting FValue due to factor <format type="italics">ABC</format>.
            </summary>
            <value>
            A value that indicates the FValue due to factor <format type="italics">ABC</format>.
            </value>
            <lastupdated>5/28/2003 11:13:19 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Monitoring.BasicLevelTriggerDetector">
            <summary>
            Provides basic level trigger detection.
            </summary>
            <remarks>
            Finds the first level-crossing location in a signal.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>5/29/2012 2:17:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.BasicLevelTriggerDetector.#ctor">
            <exclude/>
            <lastupdated>9/12/2005 12:14:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.BasicLevelTriggerDetector.#cctor">
            <exclude/>
            <lastupdated>9/12/2005 12:14:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.BasicLevelTriggerDetector.Detect(System.Double[],System.Double,System.Double,NationalInstruments.Analysis.Monitoring.TriggerSlope,System.Boolean,System.Int32@)">
            <summary>
            Finds the first level-crossing location in a signal.
            </summary>
            <param name="inputData">
            The input signal.
            </param>
            <param name="level">
            Threshold value the signal must cross before a trigger is detected.
            </param>
            <param name="hysteresis">
            Value above or below <paramref name="level"/>, through which the input signal must pass before a trigger level crossing is detected.
            </param>
            <param name="slope">
            Specifies whether a trigger is detected on a rising edge or a falling edge.
            </param>
            <param name="initialize">
            Specifies whether to initialize the trigger detection.
            </param>
            <param name="triggerIndex">
            Index of the input signal at which a trigger is detected.
            </param>
            <returns>
            Indicates whether a valid trigger is detected.
            </returns>
            <threadsafety safety="unsafe"/>
            <lastupdated>5/29/2012 2:18:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.BasicLevelTriggerDetector.Detect2D(System.Double[0:,0:],System.Double[],System.Double[],NationalInstruments.Analysis.Monitoring.TriggerSlope[],System.Boolean,System.Int32[]@)">
            <summary>
            Finds the first level-crossing location in multiple channels.
            </summary>
            <param name="inputData">
            The input array. The first dimension of the array represents a channel; the second dimension of the array represents the sample position.
            </param>
            <param name="levels">
            Array of threshold values for each channel which the input signal must cross before a trigger is detected.
            </param>
            <param name="hystereses">
            Values above or below <paramref name="levels"/>, through which the input signal of each channel must pass before a trigger level crossing is detected.
            </param>
            <param name="slopes">
            Specifies whether a trigger is detected on a rising edge or a falling edge for each channel.
            </param>
            <param name="initialize">
            Specifies whether to initialize the trigger detection.
            </param>
            <param name="triggerIndexes">
            Indexes of <paramref name="inputData"/> at which triggers are detected for each channel.
            </param>
            <returns>
            An array indicating whether a valid trigger is detected for each channel.
            </returns>
            <remarks>
            The first dimension of the input array specifies the channel; the second, the sample position.
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>5/29/2012 2:19:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Monitoring.PeakDetector">
            <summary>
            Calculates the location, amplitude, and second derivatives of peaks or valleys in the input array.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            The input data might either be a single array or consecutive blocks of data.  
            Consecutive blocks of data are useful for large data arrays or for real-time processing. 
            <para>
            This <see cref="T:NationalInstruments.Analysis.Monitoring.PeakDetector"/> method is based on an algorithm that fits a quadratic polynomial to sequential groups of data points. The number of data points used in the fit is specified by <see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Width"/>.
            </para>
            	<para>
            For <see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.PeakPolarity"/>, the quadratic fit is tested against the <see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Threshold"/> level. Peaks with heights lower than the <see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Threshold"/> level or valleys with troughs higher than the <see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Threshold"/> level are ignored. Peaks/valleys are detected only after approximately <see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Width"/>/2 data points have been processed beyond peaks/valleys locations. This delay has implications only for real-time processing.
            </para>
            </remarks>
            <example>
            The following example filters a Gaussian noise signal and calculates several measurements associated with the peaks and valleys of the filtered signal.
            <code lang="VB.NET">
            Dim signalIn(), noiseWaveform() As Double
            Dim amplitudes() As Double = Nothing, locations() As Double = Nothing, secondDerivatives() As Double = Nothing
            Dim initialThreshold As Double
            Dim initialWidth As Integer
            Dim endOfData As Boolean
            Dim peakDetector As New PeakDetector
            Dim gaussianNoise As New GaussianNoiseSignal(1.0, 1)
            Dim ellipticFilter As New EllipticLowpassFilter(2, 1.0, 0.125, 1.0, 60.0)
             
            ' Generate noise signal and filter the data
            noiseWaveform = gaussianNoise.Generate(100.0, 100)
            signalIn = ellipticFilter.FilterData(noiseWaveform)
             
            ' Set initial state of peakDetector
            initialThreshold = 0.0
            initialWidth = 3
            peakDetector.Reset(initialThreshold, initialWidth, PeakPolarity.Peaks)
             
            endOfData = True
             
            ' Find location of amplitude, locations and second derivates of peaks in signalIn array
            peakDetector.Detect(signalIn, endOfData, amplitudes, locations, secondDerivatives)</code>
            </example>
            <example>
            	<code lang="C#">
            double[] signalIn, noiseWaveform;
            double[] amplitudes, locations, secondDerivatives;
            double initialThreshold;
            int initialWidth;
            bool endOfData;
            PeakDetector peakDetector = new PeakDetector();
            GaussianNoiseSignal gaussianNoise = new GaussianNoiseSignal(1.0, 1);
            EllipticLowpassFilter ellipticFilter
                = new EllipticLowpassFilter(2, 1.0, 0.125, 1.0, 60.0);
             
            // Generate noise signal and filter the data
            noiseWaveform = gaussianNoise.Generate(100.0, 100);
            signalIn = ellipticFilter.FilterData(noiseWaveform);
             
            // Set initial state of peakDetector
            initialThreshold = 0.0;
            initialWidth = 3;
            peakDetector.Reset(initialThreshold, initialWidth, PeakPolarity.Peaks);
             
            endOfData = true;
             
            // Find location of amplitude, locations and second derivates of peaks in signalIn array
            peakDetector.Detect(signalIn, endOfData, out amplitudes, out locations, out secondDerivatives);
            </code>
            </example>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <seealso example="Analysis/Professional/PeakDetector" launch="false">Professional Edition Peak Detector (Enterprise and Professional editions)</seealso>
            <lastupdated>1/31/2013 11:42:03 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NationalInstruments.Analysis.Monitoring.PeakDetector"/> class using
            default parameters.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>5/29/2003 2:58:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.#ctor(System.Double)">
            <summary>Initializes a new instance of the <see cref="T:NationalInstruments.Analysis.Monitoring.PeakDetector"/> class using
            the specified parameters.
            </summary>
            <param name="threshold">
            The threshold value that rejects peaks and valleys that are too small.   
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For peaks, the method ignores any peak found with a fitted amplitude that is less than <paramref name="threshold"/>. The method ignores valleys if the fitted trough is greater than <paramref name="threshold"/>. This input is used to eliminate the effect of noise in the input data. 
            </remarks>
            <lastupdated>5/29/2003 2:58:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.#ctor(System.Double,System.Int32,NationalInstruments.Analysis.Monitoring.PeakPolarity)">
            <summary>Initializes a new instance of the <see cref="T:NationalInstruments.Analysis.Monitoring.PeakDetector"/> class using
            the specified parameters.
            </summary>
            <param name="threshold">
            The threshold value that rejects peaks and valleys that are too small.   
            </param>
            <param name="width">
            The number of consecutive data points to be used in the quadratic least-squares fit. This value must be greater than or equal to 3.
            </param>
            <param name="peakPolarity">
            		Whether the method looks for peaks (positive-going bumps) or valleys (negative-going bumps) in the input signal. 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="width"/> is less than three.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="peakPolarity"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For peaks, the method ignores any peak found with a fitted amplitude that is less than <paramref name="threshold"/>. The method ignores valleys if the fitted trough is greater than <paramref name="threshold"/>. This input is used to eliminate the effect of noise in the input data. 
            <para>
            		<paramref name="width"/> is coerced to a value greater than or equal to 3. The value should be no more than about 1/2 of the half-width of the peaks/valleys and can be much smaller (but <entity value="gt"/>2) for noise-free data. Large widths can reduce the apparent amplitude of peaks and shift the apparent location. For noisy data, this modification is unimportant since the noise obscures the actual peak. Ideally, <paramref name="width"/> should be as as small as possible but must be balanced against the possibility of false peak detection due to noise. 
            </para>
            </remarks>
            <lastupdated>7/7/2004 6:41:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Finalize">
            <exclude/>
            <lastupdated>5/29/2003 11:51:50 PM</lastupdated>
            <updatedby>Nandan</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Reset(System.Double,System.Int32,NationalInstruments.Analysis.Monitoring.PeakPolarity)">
            <summary>
            Sets the <see cref="T:NationalInstruments.Analysis.Monitoring.PeakDetector"/> to an initial state ready to 
            receive the first or only block of a set of data.
            </summary>
            <param name="threshold">
            The threshold value that rejects peaks and valleys that are too small.   
            </param>
            <param name="width">
            The number of consecutive data points to be used in the quadratic least-squares fit. This value must be greater than or equal to 3.
            </param>
            <param name="peakPolarity">
            		Whether the method looks for peaks (positive-going bumps) or valleys (negative-going bumps) in the input signal. The settings for this control are 0 (peaks) and 1 (valleys). 
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="width"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="peakPolarity"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <remarks>
            For peaks, the method ignores any peak found with a fitted amplitude that is less than <paramref name="threshold"/>. The method ignores valleys if the fitted trough is greater than <paramref name="threshold"/>. This input is used to eliminate the effect of noise in the input data. 
            <para>
            		<paramref name="width"/> is coerced to a value greater than or equal to 3. The value should be no more than about 1/2 of the half-width of the peaks/valleys and can be much smaller (but <entity value="gt"/>2) for noise-free data. Large widths can reduce the apparent amplitude of peaks and shift the apparent location. For noisy data, this modification is unimportant since the noise obscures the actual peak. Ideally, <paramref name="width"/> should be as as small as possible but must be balanced against the possibility of false peak detection due to noise. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/7/2004 6:41:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Detect(System.Double[],System.Boolean,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Calculates the location, amplitude, and second derivatives of peaks or valleys in the input array.
            </summary>
            <param name="signalIn">
            The data to be processed.
            </param>
            <param name="endOfData">
            The Boolean the specifies whether the input array being processed is the last block of data.  Set this input to <see langword="true"/> 
            if the current input array is the last data block being processed. Otherwise, set this input equal to <see langword="false"/>.  
            To  process only one block of data, set this input to <see langword="true"/>.
            </param>
            <param name="amplitudes">
            The array that contains the amplitudes of the peaks/valleys found in the current block of data.
            </param>
            <param name="locations">
            The array which contains the locations of the peaks/valleys found in the current block of data.
            Locations are reported in indices from the beginning of processing (the most recent call to 
            <see cref="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Detect(System.Double[],System.Boolean,System.Double[]@,System.Double[]@,System.Double[]@)"/> since the last <see cref="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Reset(System.Double,System.Int32,NationalInstruments.Analysis.Monitoring.PeakPolarity)"/>).
            </param>
            <param name="secondDerivatives">
            The array which contains the second derivatives of the peaks/valleys found in the current block of data.
            </param>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            	<para>
            Internal memory state not initialized correctly.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            Maximum number of iterations has been exceeded.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signalIn"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The data set can be passed to the <see cref="T:NationalInstruments.Analysis.Monitoring.PeakDetector"/> method as a single array or as consecutive blocks of data.
            <para>
            The <see cref="T:NationalInstruments.Analysis.Monitoring.PeakDetector"/> method must be notified when the 
            first and last blocks are passed into the method, so that the method can initialize and then release data 
            internal to the peak detection algorithm. To notify the <see cref="T:NationalInstruments.Analysis.Monitoring.PeakDetector"/> method that you are starting a new, 
            independent set of data, call the <see cref="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Reset(System.Double,System.Int32,NationalInstruments.Analysis.Monitoring.PeakPolarity)"/> 
            method.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/29/2005 10:33:13 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/7/2004 6:41:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:NationalInstruments.Analysis.Monitoring.PeakDetector"/> object.
            </summary>
            <lastupdated>5/27/2003 1:59:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.Analysis.Monitoring.PeakDetector"/> object and
            optionally releases the managed resources associated with this object.
            </summary>
            <param name="disposing">
            If <see langword="true"/>, releases both managed and unmanaged resources.  If <see langword="false"/>, only releases
            unmanaged resources.
            </param>
            <remarks>
            	<para>
            This method is called by the public <see cref="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Dispose"/> method and the finalizer.  <see cref="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Dispose"/> 
            invokes the protected <see cref="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Dispose"/>(Boolean) method with the <paramref name="disposing"/>
            parameter set to <see langword="true"/>.  The finalizer invokes <see cref="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Dispose"/> with <paramref name="disposing"/> set to <see langword="false"/>.
            </para>
            	<para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method releases all
            resources held by managed objects that this Session
            references.  This method invokes the <see cref="M:NationalInstruments.Analysis.Dsp.Filters.IirFilterBase.Dispose"/> method of each referenced object.
            </para>
            </remarks>
            <lastupdated>5/27/2003 2:00:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Monitoring.PeakDetector.PeakPolarity">
            <summary>
            Gets a value indicating whether peaks or valleys are detected.
            </summary>
            <value>
            A value from the <see cref="T:NationalInstruments.Analysis.Monitoring.PeakPolarity"/> enumeration. The default is <see cref="F:NationalInstruments.Analysis.Monitoring.PeakPolarity.Peaks"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <remarks>
            	<para>
            		<see cref="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Detect(System.Double[],System.Boolean,System.Double[]@,System.Double[]@,System.Double[]@)"/> uses this value to determine whether to detect peaks or valleys.
            </para>
            	<para>
            		<see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.PeakPolarity"/> specifies whether the method looks for peaks (positive-going bumps) or valleys (negative-going bumps) in the input signal. 
            </para>
            </remarks>
            <lastupdated>6/20/2006 3:16:28 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Threshold">
            <summary>
            Gets the minimum amplitude for a peak or maximum amplitude for a valley. 
            </summary>
            <value>
            The threshold the detect operation uses. The default value is 0.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.Analysis.Monitoring.PeakDetector.Detect(System.Double[],System.Boolean,System.Double[]@,System.Double[]@,System.Double[]@)"/> uses this value to determine whether a value is a peak or a valley.
            <see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Threshold"/> rejects peaks and valleys that are too small. For peaks, the method ignores any peak found with a fitted amplitude that is less than <see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Threshold"/>. The method ignores valleys if the fitted trough is greater than <see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Threshold"/>. 
            <para>
            Use this value to eliminate the effect of noise.
            </para>
            </remarks>
            <lastupdated>7/10/2003 5:22:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Width">
            <summary>
            Gets the minimum width used in the least-squares fit for detecting a peak or valley.
            </summary>
            <value>
            The <see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Width"/> the detect operation uses. This value must be greater than or equal to 3.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object is in a disposed state.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Width"/> specifies the number of consecutive data points to 
            use in the quadratic least-squares fit. <see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Width"/> must be 
            greater than or equal to 3. The value should be no 
            more than about 1/2 of the half-width of the peaks/valleys and can be much smaller (but <entity value="gt"/>2) for 
            noise-free data. Large widths can reduce the apparent amplitude of peaks and shift the apparent location. For noisy 
            data, this modification is unimportant since the noise obscures the actual peak. Ideally, 
            <see cref="P:NationalInstruments.Analysis.Monitoring.PeakDetector.Width"/> should be as as small as possible but must be balanced against the possibility of false peak detection due to noise. 
            </remarks>
            <lastupdated>7/7/2004 6:40:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Monitoring.PeakPolarity">
            <summary>Specifies the polarity types for the <see cref="T:NationalInstruments.Analysis.Monitoring.PeakDetector"/> class to use.
            </summary>
            <lastupdated>5/27/2003 2:01:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Monitoring.PeakPolarity.Peaks">
            <summary>
            Searches for positive-going bumps.
            </summary>
            <lastupdated>6/23/2003 2:30:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Monitoring.PeakPolarity.Valleys">
            <summary>Searches for negative-going bumps.
            </summary>
            <lastupdated>6/23/2003 2:30:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Monitoring.ThresholdPeakDetector">
            <summary>
            Analyzes input sequences for valid peaks that exceed a threshold value. 
            </summary>
            <remarks>
            Placeholder
            </remarks>
            <threadsafety safety="unsafe"/>
            <example>
            The following example filters a Gaussian noise signal and analyzes the signal for valid peaks.
            <code lang="VB.NET">
            Dim inputData(), noiseWaveform() As Double
            Dim threshold As Double
            Dim peakIndices() As Integer
            Dim width As Integer
            Dim gaussianNoise As New GaussianNoiseSignal(1.0, 1)
            Dim ellipticFilter As New EllipticLowpassFilter(2, 1.0, 0.125, 1.0, 60.0)
             
            ' Generate noise signal and filter the data
            noiseWaveform = gaussianNoise.Generate(100.0, 100)
            inputData = ellipticFilter.FilterData(noiseWaveform)
             
            threshold = 0.0
            width = 3
             
            ' Analyze inputData for valid peaks. The method returns peakIndices which locate the points that exceed the threshold in a valid peak
            peakIndices = ThresholdPeakDetector.Analyze(inputData, threshold, width)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] inputData, noiseWaveform;
            double threshold;
            int[] peakIndices;
            int width;
            GaussianNoiseSignal gaussianNoise = new GaussianNoiseSignal(1.0, 1);
            EllipticLowpassFilter ellipticFilter = new EllipticLowpassFilter(2, 1.0, 0.125, 1.0, 60.0);
             
            // Generate noise signal and filter the data
            noiseWaveform = gaussianNoise.Generate(100.0, 100);
            inputData = ellipticFilter.FilterData(noiseWaveform);
             
            threshold = 0.0;
            width = 3;
             
            // Analyze inputData for valid peaks. The method returns peakIndices which locate the points that exceed the threshold in a valid peak
            peakIndices = ThresholdPeakDetector.Analyze(inputData, threshold, width);</code>
            </example>
            <lastupdated>11/3/2011 2:50:16 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.ThresholdPeakDetector.Compute(System.Double[],System.Double,System.Int32)">
            <summary>
            This method is obsolete. Use the <see cref="M:NationalInstruments.Analysis.Monitoring.ThresholdPeakDetector.Analyze(System.Double[],System.Double,System.Int32)"/> method 
            to achieve the same functionality.
            </summary>
            <param name="inputData">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="threshold">
            This parameter is not documented because the member is obsolete.
            </param>
            <param name="width">
            This parameter is not documented because the member is obsolete.
            </param>
            <returns>
            This return value is not documented because the member is obsolete.
            </returns>
            <lastupdated>10/13/2009 2:50:03 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Monitoring.ThresholdPeakDetector.Analyze(System.Double[],System.Double,System.Int32)">
            <summary>
            Analyzes the input sequence for valid peaks and returns the indices of all found peaks.
            </summary>
            <param name="inputData">
            The input sequence. The number of samples in <paramref name="inputData"/> must be greater than the 
            specified <paramref name="width"/>.
            </param>
            <param name="threshold">
            The level that all valid peaks must equal or exceed for the duration of <paramref name="width"/> samples. 
            </param>
            <param name="width">
            This value determines the minimum width, in number of samples, that <paramref name="inputData"/> 
            must remain at or above the <paramref name="threshold"/> value for the candidate peak to be 
            considered valid. <paramref name="width"/> must be greater than zero. If <paramref name="width"/> is 
            less than or equal to zero, the method throws an exception.
            </param>
            <returns>
            The beginning index of all valid peaks in <paramref name="inputData"/>. If no peaks are found then an empty array is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="inputData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="width"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="width"/> is greater than or equal to length of <paramref name="inputData"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            A peak is valid when 
            <list type="bullet">
                    <item>
                        <description>
            The elements of <paramref name="inputData"/> exceed <paramref name="threshold"/> and then return to a 
            value less than or equal to <paramref name="threshold"/>, and
            </description>
                    </item>
                    <item>
                        <description>
            The number of elements that exceed <paramref name="threshold"/> is at least equal to <paramref name="width"/>.
            </description>
                    </item>
                </list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/7/2004 6:48:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Monitoring.TriggerSlope">
            <summary>
            Specifies whether a trigger is detected on a rising edge or a falling edge.
            </summary>
            <lastupdated>10/10/2011 10:08:36 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Monitoring.TriggerSlope.FallingEdge">
            <summary>
            Detects a trigger on the falling edge, or negative slope.
            </summary>
            <lastupdated>10/10/2011 10:09:25 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.Monitoring.TriggerSlope.RisingEdge">
            <summary>
            Detects a trigger on the rising edge, or positive slope.
            </summary>
            <lastupdated>10/10/2011 10:09:14 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal">
            <summary>Generates an arbitrary signal.  
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            You can use this class alone to generate an arbitrary
            signal from a wavetable or you can add it to the 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            </remarks>
            <example>
            This example shows how you can use this class alone to generate an arbitrary
            signal from a wavetable or add it to the 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            <code lang="VB.NET">
            ' Generate data for the waveTable
            Dim randNumber As Random = New Random
            Dim waveTable(1000) As Double
            Dim i As Integer
            For i = 0 To 1000
                 waveTable(i) = randNumber.NextDouble()
            Next i
             
            ' Use ArbitrarySignal alone
            Dim arbSignal As ArbitrarySignal = New ArbitrarySignal(waveTable)
            arbSignal.Generate(1000.0, 256)
             
            ' Use ArbitrarySignal and SignalGenerator to generate a composite signal
            Dim sigGen As SignalGenerator = New SignalGenerator(1000.0, 256)
            sigGen.Signals.Add(New SineSignal(1000.0, 1.0, 0.0))
            sigGen.Signals.Add(New ArbitrarySignal(waveTable))
            sigGen.Generate()
            </code>
            	<code lang="C#">
            // Generate data for the waveTable
            Random randNumber = new Random();
            double[] waveTable = new double[1000];
            for (int i=0;i&lt;1000;++i)
            {
                waveTable[i] = randNumber.NextDouble();
            }
             
            // Use ArbitrarySignal alone
            ArbitrarySignal arbSignal = new ArbitrarySignal(waveTable);
            arbSignal.Generate(1000.0,256);
             
            // Use ArbitrarySignal and SignalGenerator to generate a composite signal
            SignalGenerator sigGen = new SignalGenerator(1000.0,256);
            sigGen.Signals.Add(new SineSignal(1000.0,1.0,0.0));
            sigGen.Signals.Add(new ArbitrarySignal(waveTable));
            sigGen.Generate();
            </code>
            </example>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
                <package name="Professional"/>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/16/2008 11:02:42 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.ISignal">
            <summary>
            Represents an interface that must be implemented by classes that are to be used with the 
            <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>.
            </summary>
            <threadsafety safety="unsafe"/>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
            	<package name="Professional"/>
            	<package name="Enterprise"/>
            </packages>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>11/3/2011 2:53:17 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.ISignal.Reset">
            <summary>
            Sets the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/> to an initial state. Classes that implement <see cref="T:NationalInstruments.Analysis.SignalGeneration.ISignal"/> must override this method. 
            </summary>
            <lastupdated>5/27/2003 1:49:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.ISignal.Generate(System.Double,System.Int64)">
            <summary>
            Generates the specified waveform. Classes that implement <see cref="T:NationalInstruments.Analysis.SignalGeneration.ISignal"/> must override this method. 
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the desired waveform.
            </returns>
            <remarks>
            The <paramref name="samplingRate"/> parameter may not be used by all the classes that implement <see cref="T:NationalInstruments.Analysis.SignalGeneration.ISignal"/>.
            The following classes ignore this parameter:<list type="bullet">
            		<item>
            			<description>
            				<see cref="T:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal"/>
            			</description>
            		</item>
            		<item>
            			<description>
            				<see cref="T:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal"/>
            			</description>
            		</item>
            		<item>
            			<description>
            				<see cref="T:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal"/>
            			</description>
            		</item>
            	</list>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>9/27/2005 12:31:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.#ctor(System.Double[])">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal"/> with 
            the specified wavetable.
            </summary>
            <param name="waveTable">
            The equally-spaced samples of one cycle of the desired arbitrary wave signal.
            </param>
            <exception cref="T:System.ArgumentException">
                The number of samples in <paramref name="waveTable"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 4:30:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.#ctor(System.Double[],System.Double)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal"/> with 
            the specified wavetable and frequency.
            </summary>
            <param name="waveTable">
            The equally-spaced samples of one cycle of the desired arbitrary wave signal.
            </param>
            <param name="frequency">
            The frequency of the desired arbitrary wave signal, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
                The number of samples in <paramref name="waveTable"/> is equal to zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 4:30:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.#ctor(System.Double[],System.Double,System.Double)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal"/> with 
            the specified wavetable, frequency, and amplitude.
            </summary>
            <param name="waveTable">
            The equally-spaced samples of one cycle of the desired arbitrary wave signal.
            </param>
            <param name="frequency">
            The frequency of the desired arbitrary wave signal, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the desired arbitrary wave signal. The values in the wave table are multiplied by this amount when forming the signal.
            </param>
            <exception cref="T:System.ArgumentException">
                The number of samples in <paramref name="waveTable"/> is equal to zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 4:31:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.#ctor(System.Double[],System.Double,System.Double,System.Double)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal"/> with 
            the specified wavetable, frequency, amplitude, and phase.
            </summary>
            <param name="waveTable">
            The equally-spaced samples of one cycle of the desired arbitrary wave signal.
            </param>
            <param name="frequency">
            The frequency of the desired arbitrary wave signal, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the desired arbitrary wave signal.
            </param>
            <param name="phase">
            The phase of the desired arbitrary wave signal, in degrees.
            </param>
            <exception cref="T:System.ArgumentException">
                The number of samples in <paramref name="waveTable"/> is equal to zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 4:31:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.#ctor(System.Double[],System.Double,System.Double,System.Double,NationalInstruments.Analysis.SignalGeneration.InterpolationType)">
            <summary>Creates an <see cref="T:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal"/> with 
            the specified wavetable, frequency, amplitude, phase, and interpolation.
            </summary>
            <param name="waveTable">
            The equally-spaced samples of one cycle of the desired arbitrary wave signal.
            </param>
            <param name="frequency">
            The frequency of the desired arbitrary wave signal, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the desired arbitrary wave signal. The values in the wave table are multiplied by this amount when forming the signal.
            </param>
            <param name="phase">
            The phase of the desired arbitrary wave signal, in degrees.
            </param>
            <param name="interpolation">
            The type of interpolation used in generating the arbitrary wave signal from the wave table samples. This is specified using
            <see cref="T:NationalInstruments.Analysis.SignalGeneration.InterpolationType"/>.
            </param>
            <exception cref="T:System.ArgumentException">
                The number of samples in <paramref name="waveTable"/> is equal to zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="frequency"/> is less than or equal to zero.
            </para>
                <para>
            -or
            </para>
                <para>
                    Invalid <paramref name="interpolation"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 4:32:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Reset">
            <summary>
            Resets the phase of the signal to its initial value.
            </summary>
            <lastupdated>6/20/2003 3:28:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)">
            <summary>
            Generates an array containing an arbitrary wave. 
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the arbitrary waveform.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="samplingRate"/> is less than or equal to zero.
            </para>
                <para>
            -or
            </para>
                <para>
                    <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
                <para>
            -or
            </para>
                <para>
                    <paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the sequence <format type="italics">Y</format> represents the output arbitrary signal, the <see cref="T:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal"/> method generates the pattern according to the following formula:
            <para indent="true">
                    <format type="italics">y</format><format type="subscript"><format type="italics">i</format></format> = <format type="italics">a</format>[arb(phase<format type="subscript"><format type="italics">i</format></format>)]
            </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">a</format> represents the amplitude,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">n</format> represents the <paramref name="numberOfSamples"/>,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            arb(phase<format type="subscript"><format type="italics">i</format></format>) = WT[(phase<format type="subscript"><format type="italics">i</format></format> modulo 360)(<format type="italics">m</format>/360)], and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">m</format> represents the size of the wave table.
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <image src="Generate.gif"/>,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            phase<format type="subscript">0</format> = the value of the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Phase"/> property when 
            <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> is called,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">f</format><format type="subscript">signal</format> represents the frequency of the triangle signal, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">f</format><format type="subscript">sampling</format> is the sampling rate.
            </description>
                    </item>
                </list>
            If interpolation = 0 (no interpolation), then WT(<format type="italics">x</format>) = Wave Table[int(<format type="italics">x</format>)]. 
            <para>
            If interpolation = 1 (linear interpolation), then WT(<format type="italics">x</format>) is equal to the linearly interpolated value of the wave table[int(<format type="italics">x</format>)] and wave table[(int(<format type="italics">x</format>) + 1) modulo <format type="italics">m</format>].
            </para>
                <para>
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> 
            can be called successively to generate a continuous triangle wave <paramref name="numberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/23/2003 11:36:55 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.GetWaveTable">
            <summary>
            Gets an array of values that specify the samples, at equal intervals, of one cycle of the arbitrary 
            waveform signal.
            </summary>
            <returns>
            An array of values that specify the samples of one cycle of the arbitrary waveform signal.
            </returns>
            <remarks>
            This value specifies the data that <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> uses to create the waveform it returns.
            <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> applies <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.InterpolationType"/> to the wave table to create the arbitrary waveform signal.
            </remarks>
            <lastupdated>6/20/2003 4:37:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.SetWaveTable(System.Double[])">
            <summary>
            Sets an array of values that specify the samples, at equal intervals, of one cycle of the arbitrary 
            waveform signal.
            </summary>
            <param name="waveTable">
            An array of values that specify the samples of one cycle of the arbitrary waveform signal.
            </param>
            <remarks>
            This value specifies the data that <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> uses to create the waveform it returns.
            <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> applies <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.InterpolationType"/> to the wave table to create the arbitrary waveform signal.
            </remarks>
            <lastupdated>6/20/2003 4:38:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:12:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultFrequency">
            <summary>
            Gets the <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultFrequency"/> of the signal, in hertz.
            </summary>
            <value>
            The frequency that is used if none is specified, in hertz. The default value is 7.8125 Hz.
            </value>
            <lastupdated>6/25/2003 2:48:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultAmplitude">
            <summary>
            Gets the <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultAmplitude"/> of the signal.
            </summary>
            <value>
            The amplitude that is used if none is specified. The default value is 1.0.
            </value>
            <lastupdated>6/25/2003 2:48:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultPhase">
            <summary>
            Gets the <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultPhase"/> of the signal, in degrees.
            </summary>
            <value>
            The phase that is used if none is specified, in degrees. The default value is 0.0 degrees.
            </value>
            <lastupdated>6/25/2003 2:49:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultInterpolationType">
            <summary>
            Gets the <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultInterpolationType"/> of the signal.
            </summary>
            <value>
            The interpolation type that is used if none is specified. 
            The default value is <see cref="F:NationalInstruments.Analysis.SignalGeneration.InterpolationType.None"/>.
            </value>
            <lastupdated>6/25/2003 2:48:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Frequency">
            <summary>
            Gets or sets the waveform <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Frequency"/>, in hertz.
            </summary>
            <value>
            The <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Frequency"/> of the waveform, in hertz. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultFrequency"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Frequency"/> is less than or equal to zero.
            </exception>
            <remarks>
            This value specifies the <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Frequency"/> of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:20:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Amplitude">
            <summary>
            Gets or sets the waveform amplitude.
            </summary>
            <value>
            The amplitude of the waveform. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultAmplitude"/>.
            </value>
            <remarks>
            This value specifies the amplitude of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:20:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Phase">
            <summary>
            Gets or sets the waveform <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Phase"/>, in degrees.
            </summary>
            <value>
            The <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Phase"/> of the waveform, in degrees. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultPhase"/>.
            </value>
            <remarks>
            This value specifies the <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Phase"/> of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:21:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.InterpolationType">
            <summary>
            Gets or sets the type of interpolation used to generate the waveform.
            </summary>
            <value>
            A value from the <see cref="T:NationalInstruments.Analysis.SignalGeneration.InterpolationType"/> enumeration. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.DefaultInterpolationType"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Invalid <see cref="P:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.InterpolationType"/> specified.
            </exception>
            <remarks>
            This value specifies the type of interpolation <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> uses to create the waveform it returns. 
            <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.Generate(System.Double,System.Int64)"/> applies the 
            interpolation to the wave table values provided to the constructor or to
            <see cref="M:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal.SetWaveTable(System.Double[])"/> 
            to create the arbitrary waveform signal.
            </remarks>
            <lastupdated>6/20/2003 4:36:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator">
            <summary>Generates sine, square, sawtooth, and triangle waveforms.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This class provides static and instance methods that you can use to generate waveform arrays.
            Use the static methods to fill arrays with signal patterns, specified using  <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal"/>.
            <para>
            To generate continuous waveforms, create an instance of this class and then use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method to start the waveform generation.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.</para>
            </remarks>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <seealso example="Analysis/Standard/BasicSignalGeneration" launch="false">Standard Edition Basic Signal Generation (All editions)</seealso>
            <lastupdated>1/31/2013 11:42:29 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#cctor">
            <exclude/>
            <lastupdated>5/12/2008 11:16:32 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#ctor">
            <summary>Creates a basic function generator.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para> By default, the <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator"/> generates a sine wave. 
            Use the overloads to specify a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal"/>.</para>
            	<para>
            Use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method to start the waveform generation.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSineWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSquareWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateTriangleWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSawtoothWave"/>
            <lastupdated>7/8/2004 6:02:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#ctor(NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal)">
            <summary>Creates a basic function generator with the specified signal type.
            </summary>
            <param name="signalType">
            The signal type specified using <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal"/>.
            </param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Invalid <paramref name="signalType"/> specified.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method to start the waveform generation.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSineWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSquareWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateTriangleWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSawtoothWave"/>
            <lastupdated>7/8/2004 6:03:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#ctor(NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal,System.Double,System.Double)">
            <summary>Creates a basic function generator with the specified signal type, frequency, and amplitude.
            </summary>
            <param name="signalType">
            The signal type specified using <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal"/>.
            </param>
            <param name="frequency">
            The frequency of the waveform, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the waveform.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Invalid <paramref name="signalType"/> specified.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method to start the waveform generation.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSineWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSquareWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateTriangleWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSawtoothWave"/>
            <lastupdated>7/8/2004 6:03:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#ctor(NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal,System.Double,System.Double,System.Double)">
            <summary>Creates a basic function generator with the specified signal type, frequency, amplitude, and phase.
            </summary>
            <param name="signalType">
            The signal type specified using <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal"/>.
            </param>
            <param name="frequency">
            The frequency of the waveform, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the waveform.
            </param>
            <param name="phase">
            The phase of the waveform, in degrees.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="frequency"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Invalid <paramref name="signalType"/> specified.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method to start the waveform generation.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSineWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSquareWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateTriangleWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSawtoothWave"/>
            <lastupdated>7/8/2004 6:03:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#ctor(NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates a basic function generator 
            with the specified signal type, frequency, amplitude, phase, offset, sampling rate, and number of 
            samples.
            </summary>
            <param name="signalType">
            The signal type specified using <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal"/>.
            </param>
            <param name="frequency">
            The frequency of the waveform, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the waveform.
            </param>
            <param name="phase">
            The phase of the waveform, in degrees.
            </param>
            <param name="offset">
            The offset of the waveform.
            </param>
            <param name="samplingRate">
            The sampling rate of the waveform, in hertz.
            </param>
            <param name="numberOfSamples">
            The number of samples of the waveform.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="frequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Invalid <paramref name="signalType"/> specified.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method to start the waveform generation.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSineWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSquareWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateTriangleWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSawtoothWave"/>
            <lastupdated>7/8/2004 6:04:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.#ctor(NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>Creates a basic function generator 
            with the specified signal type, frequency, amplitude, phase, offset, sampling rate, number of 
            samples, and duty cycle.
            </summary>
            <param name="signalType">
            The signal type specified using <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal"/>.
            </param>
            <param name="frequency">
            The frequency of the waveform, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the waveform.
            </param>
            <param name="phase">
            The phase of the waveform, in degrees.
            </param>
            <param name="offset">
            The offset of the waveform.
            </param>
            <param name="samplingRate">
            The sampling rate of the waveform, in hertz.
            </param>
            <param name="numberOfSamples">
            The number of samples of the waveform.
            </param>
            <param name="dutyCycle">
            The duty cycle of the waveform, as a percentage, if it is a <see cref="F:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal.Square"/> signal.
            This parameter must be in the range of 0.0 to 100.0, inclusive.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="frequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="dutyCycle"/> is not between 0 and 100.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Invalid <paramref name="signalType"/> specified.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method to start the waveform generation.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSineWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSquareWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateTriangleWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSawtoothWave"/>
            <lastupdated>7/8/2004 6:06:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Reset">
            <summary>
            Resets the phase of the signal to its initial phase.
            </summary>
            <lastupdated>5/27/2003 1:32:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate">
            <summary>Generates the selected waveform with the specified parameters.
            </summary>
            <returns>
            The selected waveform.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	<para>
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSineWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSquareWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateTriangleWave"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSawtoothWave"/>
            <lastupdated>7/8/2004 6:06:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSineWave">
            <summary>
            Generates a sine wave.
            </summary>
            <returns>
            An array containing the sine wave.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use this method to fill an array with a sine wave pattern.
            </para>
            	<para>
            The waveform is generated using the
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultFrequency"/>, 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultAmplitude"/>,
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultPhase"/>, 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultOffset"/>,
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultSamplingRate"/>, and
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultNumberOfSamples"/> properties.
            </para>
            	<para>
            To generate a continuous waveform, create a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator"/> and use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method instead.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/>
            <lastupdated>7/23/2004 1:18:40 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSineWave(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sine wave using the specified frequency, amplitude, phase, offset, sampling rate, and number of samples.
            </summary>
            <param name="frequency">
            The frequency, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the waveform.
            </param>
            <param name="phase">
            The phase of the waveform, in degrees.
            </param>
            <param name="offset">
            The offset of the waveform.
            </param>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The number of samples to generate.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="frequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use this method to fill an array with a sine wave pattern.
            </para>
            	<para>
            To generate a continuous waveform, create a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator"/> and use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method instead.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <returns>
            An array containing the sine waveform.
            </returns>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/>
            <lastupdated>7/23/2004 1:19:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSquareWave">
            <summary>
            Generates a square wave.
            </summary>
            <returns>
            An array containing the square wave.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use this method to fill an array with a square wave pattern.
            </para>
            	<para>
            The waveform is generated using the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultFrequency"/>, 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultAmplitude"/>,
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultPhase"/>, 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultOffset"/>,
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultSamplingRate"/>, 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultNumberOfSamples"/>, and 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultDutyCycle"/> properties.
            </para>
            	<para>
            To generate a continuous waveform, create a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator"/> and use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method instead.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/>
            <lastupdated>7/23/2004 1:20:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSquareWave(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Generates a square wave using the specified frequency, amplitude, phase, 
            offset, sampling rate, number of samples, and duty cycle.
            </summary>
            <param name="frequency">
            The frequency, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the waveform.
            </param>
            <param name="phase">
            The phase of the waveform, in degrees.
            </param>
            <param name="offset">
            The offset of the waveform.
            </param>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The number of samples to generate.
            </param>
            <param name="dutyCycle">
            The duty cycle of the square waveform, as a percentage. This parameter must be in the range of 0.0 to 100.0, inclusive.
            </param>
            <returns>
            An array containing the square waveform.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="frequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="dutyCycle"/> is not between 0 and 100.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use this method to fill an array with a square wave pattern.
            </para>
            	<para>
            To generate a continuous waveform, create a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator"/> and use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method instead.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/>
            <lastupdated>7/23/2004 1:21:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateTriangleWave">
            <summary>
            Generates a triangle waveform.
            </summary>
            <returns>
            An array containing the triangle waveform.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use this method to fill an array with a triangle wave pattern.
            </para>
            	<para>
            The waveform is generated using the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultFrequency"/>, 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultAmplitude"/>,
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultPhase"/>, 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultOffset"/>,
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultSamplingRate"/>, and
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultNumberOfSamples"/> properties.
            </para>
            	<para>
            To generate a continuous waveform, create a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator"/> and use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method instead.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/>
            <lastupdated>7/23/2004 1:22:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateTriangleWave(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Generates a triangle waveform using the specified frequency, amplitude, phase, offset, 
            sampling rate, and number of samples.
            </summary>
            <param name="frequency">
            The frequency, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the waveform.
            </param>
            <param name="phase">
            The phase of the waveform, in degrees.
            </param>
            <param name="offset">
            The offset of the waveform.
            </param>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The number of samples to generate.
            </param>
            <returns>
            An array containing the triangle waveform.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="frequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use this method to fill an array with a triangle wave pattern.
            </para>
            	<para>
            To generate a continuous waveform, create a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator"/> and use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method instead.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that 
            <format type="bold"> NationalInstruments.Analysis.SignalGeneration.SineSignal.Generate </format>
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/>
            <lastupdated>7/23/2004 1:23:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSawtoothWave">
            <summary>
            Generates a sawtooth waveform.
            </summary>
            <returns>
            An array containing the sawtooth waveform.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use this method to fill an array with a sawtooth wave pattern.
            </para>
            	<para>
            The waveform is generated using the
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultFrequency"/>, 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultAmplitude"/>,
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultPhase"/>, 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultOffset"/>,
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultSamplingRate"/>, and
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultNumberOfSamples"/> properties.
            </para>
            	<para>
            To generate a continuous waveform, create a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator"/> and use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method instead.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/>
            <lastupdated>7/23/2004 1:14:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.GenerateSawtoothWave(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Generates a sawtooth waveform using the specified frequency, amplitude, phase, offset, sampling rate, and number of samples.
            </summary>
            <param name="frequency">
            The frequency, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the waveform.
            </param>
            <param name="phase">
            The phase of the waveform, in degrees.
            </param>
            <param name="offset">
            The offset of the waveform.
            </param>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The number of samples to generate.
            </param>
            <returns>
            An array containing the sawtooth waveform.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="frequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            Use this method to fill an array with a sawtooth wave pattern.
            </para>
            	<para>
            To generate a continuous waveform, create a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator"/> and use the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method instead.
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> 
            can be called successively to generate a continuous wave 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/>
            <lastupdated>7/23/2004 1:18:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 6:13:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultSignalType">
            <summary>
            Gets the default signal type.
            </summary>
            <value>
            The signal type that is used if none is specified. 
            The default value is <see cref="F:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal.Sine"/>.
            </value>
            <lastupdated>6/25/2003 2:53:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultFrequency">
            <summary>
            Gets the default frequency of the signal, in hertz.
            </summary>
            <value>
            The frequency that is used if none is specified, in hertz. The default value is 100 Hz.
            </value>
            <lastupdated>6/25/2003 2:50:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultAmplitude">
            <summary>
            Gets the default amplitude of the signal.
            </summary>
            <value>
            The amplitude that is used if none is specified. The default value is 1.0.
            </value>
            <lastupdated>6/25/2003 2:50:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultPhase">
            <summary>
            Gets the default phase of the signal, in degrees.
            </summary>
            <value>
            The phase that is used if none is specified, in degrees. The default value is 0.0 degrees.
            </value>
            <lastupdated>6/25/2003 2:52:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultOffset">
            <summary>
            Gets the default offset of the signal.
            </summary>
            <value>
            The offset that is used if none is specified. The default value is 0.0.
            </value>
            <lastupdated>6/25/2003 2:51:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultDutyCycle">
            <summary>
            Gets the default duty cycle of the signal, as a percentage.
            </summary>
            <value>
            The duty cycle, as a percentage, that is used if none is specified. The default value is 50.0 percent.
            </value>
            <lastupdated>9/12/2005 2:11:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultNumberOfSamples">
            <summary>
            Gets the default number of samples returned from each call to <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/>.
            </summary>
            <value>
            The number of samples that is used if none is specified. The default value is 1000.
            </value>
            <lastupdated>6/25/2003 2:51:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultSamplingRate">
            <summary>
            Gets the default sampling rate of the signal, in hertz.
            </summary>
            <value>
            The sampling rate that is used if none is specified, in hertz. The default value is 1000.0 Hz.
            </value>
            <lastupdated>6/25/2003 2:52:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.SignalType">
            <summary>
            Gets or sets the type of signal to generate.
            </summary>
            <value>
            A value from the <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal"/> enumeration.The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultSignalType"/>.
            </value>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified value is not valid enum value. Use <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal"/> to specify a valid value.
            </exception>
            <remarks>
            This value specifies what type of signal <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:28:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Frequency">
            <summary>
            Gets or sets the waveform frequency, in hertz.
            </summary>
            <value>
            The frequency of the waveform, in hertz. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultFrequency"/>.
            </value>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Frequency"/> cannot be less than 0.0.
            </exception>
            <remarks>
            This value specifies the frequency of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:28:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Amplitude">
            <summary>
            Gets or sets the waveform amplitude.
            </summary>
            <value>
            The amplitude of the waveform. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultAmplitude"/>.
            </value>
            <remarks>
            This value specifies the amplitude of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:27:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Phase">
            <summary>
            Gets or sets the phase of the waveform, in degrees.
            </summary>
            <value>
            The phase of the waveform, in degrees. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultPhase"/>.
            </value>
            <remarks>
            This value specifies the phase of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:28:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Offset">
            <summary>
            Gets or sets the offset of the waveform.
            </summary>
            <value>
            The offset of the waveform. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultOffset"/>.
            </value>
            <remarks>
            This value specifies the offset of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:28:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DutyCycle">
            <summary>
            Gets or sets the square waveform duty cycle, in percent.
            </summary>
            <value>
            The duty cycle of the square waveform, in percent. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultDutyCycle"/>.
            This value must be in the range 0.0 to 100.0, inclusive.
            </value>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DutyCycle"/> is not between 0.0 and 100.0.
            </exception>
            <remarks>
            This value specifies the duty cycle of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> returns.
            <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> uses this value only when the value of <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.SignalType"/> is <see cref="F:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal.Square"/>. Otherwise, this value is ignored.
            </remarks>
            <lastupdated>5/27/2003 1:28:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.SamplingRate">
            <summary>
            Gets or sets the sampling rate, in hertz.
            </summary>
            <value>
            The sampling rate, in hertz. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultSamplingRate"/>.
            </value>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.SamplingRate"/> cannot be less than 0.0.
            </exception>
            <remarks>
            This value specifies the sampling rate that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> uses to create the waveform it returns.
            </remarks>
            <lastupdated>5/27/2003 1:28:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples">
            <summary>
            Gets or sets the number of samples in the waveform.
            </summary>
            <value>
            The number of samples in the waveform. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.DefaultNumberOfSamples"/>.
            </value>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.NumberOfSamples"/> cannot be less than zero.
            </exception>
            <remarks>
            This value specifies the number of samples in the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator.Generate"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:28:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal">
            <summary>
            Specifies the signal types that can be generated using the <see cref="T:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGenerator"/>
            class.
            </summary>
            <lastupdated>5/27/2003 1:49:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal.Sine">
            <summary>
            Generates a sine waveform.
            </summary>
            <lastupdated>5/27/2003 1:49:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal.Triangle">
            <summary>
            Generates a triangle waveform.
            </summary>
            <lastupdated>5/27/2003 1:49:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal.Square">
            <summary>
            Generates a square waveform.
            </summary>
            <lastupdated>5/27/2003 1:49:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SignalGeneration.BasicFunctionGeneratorSignal.Sawtooth">
            <summary>
            Generates a sawtooth waveform.
            </summary>
            <lastupdated>5/27/2003 1:49:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal">
            <summary>
            Generates a pseudorandom pattern of ones and zeros.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            <para>The <see cref="T:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal" crefType="Unqualified"/> computes each element of the pattern as if flipping a coin weighted by <see cref="P:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.OnesProbability" crefType="Unqualified"/>.</para>
            <para>This class is a special case of <see cref="T:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal" crefType="Unqualified"/>.</para>
            </remarks>
            <example>
            This example shows how you can use this class to generate a Bernoulli noise signal.
            <code lang="VB.NET">
            Dim pattern As BernoulliNoiseSignal = New BernoulliNoiseSignal()
            pattern.Generate(256)
            </code>
            <code lang="C#">
            BernoulliNoiseSignal pattern = new BernoulliNoiseSignal(); 
            pattern.Generate(256);
            </code>
            </example>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
            <package name="Professional"/>
            <package name="Enterprise"/>
            </packages>
            <lastupdated>5/29/2012 3:44:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal"/> using a seed 
            derived from the system time.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.Generate(System.Int64)"/> method. 
            </remarks>
            <lastupdated>11/21/2011 11:32:33 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.#ctor(System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal"/> using a seed 
            derived from the system time, with the specified probability.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.Generate(System.Int64)"/> method. 
            </remarks>
            <param name="onesProbability">
            Specifies the probability of a given element of the waveform being one.
            </param>
            <lastupdated>5/29/2012 3:45:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.#ctor(System.Double,System.Int32)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal"/> using a seed 
            derived from the system time, with the specified probability and seed.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.Generate(System.Int64)"/> method. 
            </remarks>
            <param name="onesProbability">
            Specifies the probability of a given element of the waveform being one.
            </param>
            <param name="seed">
            The seed value for the random number generator.
            </param>
            <lastupdated>5/29/2012 3:46:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.Reset">
            <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
            <lastupdated>3/6/2006 10:21:43 AM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.Generate(System.Int64)">
            <summary>
            Generates a pseudorandom pattern of ones and zeroes.
            </summary>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the Bernoulli noise waveform.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            <para>
            -or
            </para>
            <para>
            <paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            <para>This method generates a pseudorandom pattern of ones and zeros that guarantees the Bernoulli distributions. If <see cref="P:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.OnesProbability" crefType="Unqualified"/> is 0.7, each element of the waveform has a 70% chance of being one and a 30% chance of being zero.</para>
            <para>The following equations define the mean value, <entity value="mu"/>, and the standard deviation value, <entity value="sigma"/>, of the pseudorandom sequence:</para>
            <para indent="true"><entity value="mu"/> = E{x} = p</para>
            <para indent="true"><image src="noloc_eq_bernoulli.gif"/></para>
            </remarks>
            <lastupdated>5/29/2012 3:48:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:30:30 PM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.OnesProbability">
            <summary>
            Gets or sets the waveform ones probability.
            </summary>
            <value>
            Specifies the probability of a given element of the waveform being one.</value>
            <remarks>
            This value specifies the ones probability of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.Generate(System.Int64)"/> returns.
            </remarks>
            <lastupdated>11/21/2011 11:41:07 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.DefaultOnesProbability">
            <summary>
            Gets the probability of ones that is used if none is specified for the signal.
            </summary>
            <value>
            The probability of ones that is used if none is specified. The default value is 0.5.
            </value>
            <lastupdated>5/29/2012 3:57:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.Seed">
            <summary>
            Gets the initial seed value. 
            </summary>
            <value>
            By default, <see cref="P:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal.Seed"/>  is derived from the system time. 
            </value>
            <lastupdated>5/29/2012 3:58:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal">
            <summary>
            Generates a pattern of Binomially-distributed pseudorandom values.</summary>
            <threadsafety safety="unsafe"/>
            <example>
            This example shows how you can use this class to generate a Binomial noise signal.
            <code lang="VB.NET">
            Dim pattern As BinomialNoiseSignal = New BinomialNoiseSignal()
            pattern.Generate(256)
            </code>
            	<code lang="C#">
            BinomialNoiseSignal pattern = new BinomialNoiseSignal(); 
            pattern.Generate(256);
            </code>
            </example>
            <remarks>
            	<para>This class generates a binomially-distributed, pseudorandom pattern whose values are the number of occurrences of an event.</para>
            </remarks>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
            	<package name="Professional"/>
            	<package name="Enterprise"/>
            </packages>
            <lastupdated>2/23/2012 9:44:17 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal"/> using a seed 
            derived from the system time.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.Generate(System.Int64)"/> method. 
            </remarks>
            <lastupdated>11/21/2011 12:40:19 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.#ctor(System.Int32,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal"/> using a seed 
            derived from the system time, with the specified trials and probability.
            </summary>
            <param name="trials">
            Number of trials for each element of the pattern.
            </param>
            <param name="trialProbability">
            The probability of a given trial is true.
            </param>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.Generate(System.Int64)"/> method. 
            </remarks>
            <lastupdated>5/29/2012 3:50:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.#ctor(System.Int32,System.Double,System.Int32)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.BernoulliNoiseSignal"/>, with the specified trials, probability, and seed.
            </summary>
            <param name="trials">
            Number of trials for each element of the pattern.
            </param>
            <param name="trialProbability">
            The probability of a given trial is true.
            </param>
            <param name="seed">
            The seed value for the random number generator.
            </param>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.Generate(System.Int64)"/> method. 
            </remarks>
            <lastupdated>5/29/2012 3:51:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.Reset">
            <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
            <lastupdated>3/6/2006 10:21:43 AM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.Generate(System.Int64)">
            <summary>
            Generates a Binomially-distributed pseudorandom pattern.
            </summary>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the binomial noise pattern.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            <para><see cref="P:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.Trials" crefType="Unqualified"/> is less than zero.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.TrialProbability" crefType="Unqualified"/> is not within the valid range of [0, 1].
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            <para>
            -or
            </para>
            <para>
            <paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            <para>This method generates an array containing a Binomially-distributed pseudorandom pattern of values that are the number of occurrences of an event, given the probability of that event occurring and the number of trials. The following equation defines the probability density function of the generated sequence:
            </para>
            <para indent="true"><entity value="mu"/> = E{x} = np</para>
            <para indent="true"><image src="noloc_eq_binomial.gif"/></para>
            </remarks>
            <lastupdated>5/29/2012 3:52:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:30:30 PM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.Trials">
            <summary>
            Gets or sets the number of trials performed for each element of the waveform.
            </summary>
            <value>
            The trial probability for each element of the waveform. </value>
            <remarks>
            This value specifies the number of trials for each element of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.Generate(System.Int64)"/> returns.
            </remarks>
            <lastupdated>11/21/2011 11:42:07 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.DefaultTrials">
            <summary>
            Gets the number of trials for each element of the signal. 
            </summary>
            <value>
            The number of trials for each element of the waveform. The default value is 1.
            </value>
            <lastupdated>5/29/2012 3:56:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.TrialProbability">
            <summary>
            Gets or sets the probability that a given trial is true.
            </summary>
            <value>
            The trial probability.</value>
            <remarks>
            This value specifies the probability for each element of the waveform to be true that <see cref="M:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.Generate(System.Int64)"/> returns.
            </remarks>
            <lastupdated>11/21/2011 11:42:51 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.DefaultTrialProbability">
            <summary>
            Gets the probability that a given trial of the signal is true.
            </summary>
            <value>
            The probability that a given trial is true. The default value is 0.5.
            </value>
            <lastupdated>5/29/2012 3:56:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.Seed">
            <summary>
            Gets the initial seed value. 
            </summary>
            <value>
            By default, <see cref="P:NationalInstruments.Analysis.SignalGeneration.BinomialNoiseSignal.Seed"/>  is derived from the system time. 
            </value>
            <lastupdated>5/29/2012 3:59:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal">
            <summary>
            Generates a pseudorandom pattern of values that are the waiting times to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Order" crefType="Unqualified"/> number event of a unit mean Poisson process.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            You can use this class alone to generate a periodic noise signal, or you can add it to the 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            </remarks>
            <example>
            This example shows how you can use this class alone to generate a gamma noise signal or 
            add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            <code lang="VB.NET">
            ' Use GammaNoiseSignal alone
            Dim gammaNoise As GammaNoiseSignal = New GammaNoiseSignal()
            gammaNoise.Generate(1000.0, 256)
             
            ' Use GammaNoiseSignal and SignalGenerator to generate a composite signal
            Dim sigGen As SignalGenerator = New SignalGenerator(1000.0, 256)
            sigGen.Signals.Add(New GammaNoiseSignal())
            sigGen.Signals.Add(New WhiteNoiseSignal(0.1))
            sigGen.Generate()
            </code>
            <code lang="C#">
            // Use GammaNoiseSignal alone
            GammaNoiseSignal gammaNoise = new GammaNoiseSignal(); 
            gammaNoise.Generate(1000.0,256);
             
            // Use GammaNoiseSignal and SignalGenerator to generate a composite signal
            SignalGenerator sigGen = new SignalGenerator(1000.0,256);
            sigGen.Signals.Add(new GammaNoiseSignal());
            sigGen.Signals.Add(new WhiteNoiseSignal(0.1));
            sigGen.Generate();
            </code>
            </example>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
            <package name="Professional"/>
            <package name="Enterprise"/>
            </packages>
            <lastupdated>5/29/2012 3:53:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal"/> using a seed 
            derived from the system time.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>9/20/2011 7:33:56 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.#ctor(System.Int32)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal"/> with the 
            specified order, using a seed derived from the system time.
            </summary>
            <param name="order">
            The order of the resulting gamma noise signal.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>9/20/2011 7:35:08 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal"/> with the 
            specified order, using a seed derived from the system time.
            </summary>
            <param name="order">
            The order of the resulting gamma noise signal.
            </param>
            <param name="seed">
            The seed value for the random number generator.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>12/12/2011 1:20:48 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Reset">
            <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
            <lastupdated>3/6/2006 10:21:43 AM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Generate(System.Double,System.Int64)">
            <summary>
            Generates an array containing a gamma-distributed noise waveform. 
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the gamma-distributed noise waveform.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>This method generates a Gamma-distributed pseudorandom pattern whose values are the waiting time that correspond to <see cref="P:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Order" crefType="Unqualified"/>. Given the Gamma function,</para>
            	<para indent="true"><image src="noloc_eq_gamma_ex_func.gif"/>
            	</para>
            the probability density function is
            <para indent="true"><image src="noloc_eq_gamma_pdf.gif"/></para>
            	<para> where <format type="italics">r</format> is the <see cref="P:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Order" crefType="Unqualified"/>. </para>
            	<para>The following equations define the mean value, <entity value="mu"/>, and the standard deviation value, <entity value="sigma"/>, of the pseudorandom sequence:</para>
            	<para indent="true"><entity value="mu"/> = <format type="italics">E</format>{<format type="italics">x</format>} = <format type="italics">r</format></para>
            	<para indent="true"><image src="noloc_eq_gamma_sdv.gif"/>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>11/21/2011 10:39:07 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:30:30 PM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Order">
            <summary>
            Gets or sets the waveform order.
            </summary>
            <value>
            Specifies the event number of the unit mean Poisson process. </value>
            <remarks>
            This value specifies the order of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>11/21/2011 10:04:01 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.DefaultOrder">
            <summary>
            Gets the order of the signal if none is specified.
            </summary>
            <value>
            The order that is used if none is specified. The default value is 1.0.
            </value>
            <lastupdated>5/29/2012 3:55:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Seed">
            <summary>
            Gets the initial seed value. 
            </summary>
            <value>
            By default, <see cref="P:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Seed"/>  is derived from the system time. 
            </value>
            <lastupdated>5/29/2012 4:00:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal">
            <summary>
            Generates a Gaussian noise signal.  
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            You can use this class alone to generate a Gaussian noise signal or you can add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            </remarks>
            <example>
            This example shows how you can use this class alone to generate a Gaussian noise signal or 
            add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            <code lang="VB.NET">
            ' Use GaussianNoiseSignal alone
            Dim gaussianNoise As GaussianNoiseSignal= New GaussianNoiseSignal(1.0,25)
            gaussianNoise.Generate(1000.0, 256)
             
            ' Use GaussianNoiseSignal and SignalGenerator to generate a composite signal
            Dim sigGen As SignalGenerator = New SignalGenerator(1000.0, 256)
            sigGen.Signals.Add(New SineSignal(1000.0, 1.0, 0.0))
            sigGen.Signals.Add(New GaussianNoiseSignal(1.0,25))
            sigGen.Generate()
            </code>
            	<code lang="C#">
            // Use GaussianNoiseSignal alone
            GaussianNoiseSignal gaussianNoise = new GaussianNoiseSignal(1.0,25); 
            gaussianNoise.Generate(1000.0,256);
             
            // Use GaussianNoiseSignal and SignalGenerator to generate a composite signal
            SignalGenerator sigGen = new SignalGenerator(1000.0,256);
            sigGen.Signals.Add(new SineSignal(1000.0,1.0,0.0));
            sigGen.Signals.Add(new GaussianNoiseSignal(1.0,25));
            sigGen.Generate();
            </code>
            </example>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
                <package name="Professional"/>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/16/2008 11:31:56 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.#ctor">
            <summary>Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal"/> using 
            a seed derived from the system time.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/23/2003 8:54:56 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.#ctor(System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal"/> with the 
            specified standard deviation, using a seed derived from the system time.
            </summary>
            <param name="standardDeviation">
            The standard deviation of the Gaussian noise distribution.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/23/2003 8:55:50 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.#ctor(System.Double,System.Int32)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal"/> with 
            the specified standard deviation and seed.</summary>
            <param name="standardDeviation">
            The standard deviation of the Gaussian noise distribution.
            </param>
            <param name="seed">
            The seed value for the random number generator.  This parameter must be greater than or
            equal to zero.  
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:17:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Reset">
            <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
            <lastupdated>3/6/2006 10:21:43 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Generate(System.Double,System.Int64)">
            <summary>
            Generates an array of random, Gaussian-distributed values. 
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz. This method ignores this parameter.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the random, Gaussian-distributed values.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The internal memory state was not initialized correctly.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para><para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Generate(System.Double,System.Int64)"/> method generates the Gaussian-distributed pseudorandom sequence using a modified version of the Very-Long-Cycle random number generator algorithm based upon the Central Limit Theorem. The pseudorandom number generator implements a triple-seeded linear congruential algorithm. Given that the probability density function, <format type="italics">f</format>(<format type="italics">x</format>), of the Gaussian-distributed Gaussian Noise Pattern is
            <para indent="true">
            		<image src="GaussianNoise1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            			</term>
            			<description>
            			where	<format type="italics">s</format> represents the absolute value of the specified standard deviation, 
            </description>
            		</item>
            	</list>
            and that you can compute the expected values, <format type="italics">E</format>{·}, using the formula
            <para indent="true">
            		<image src="GaussianNoise2.gif"/>
            	</para>
            then the expected mean value, µ, and the expected standard deviation value, <entity value="sigma"/>, of the pseudorandom sequence are
            <para indent="true">
            		<image src="GaussianNoise3.gif"/>
            	</para>
            	<para indent="true">
            		<image src="GaussianNoise4.gif"/>
            	</para>
            The pseudorandom sequence produces approximately 2<format type="superscript">90</format> samples before the pattern repeats itself. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>3/3/2008 11:04:10 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:30:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.StandardDeviation">
            <summary>
            Gets the standard deviation of the Gaussian noise pattern.
            </summary>
            <value>
            The <see cref="P:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.StandardDeviation"/> of the Gaussian probability density function. The default value is 1.0. 
            </value>
            <remarks>
            This value affects the amplitude of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>7/8/2004 5:28:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Seed">
            <summary>
            Gets the initial <see cref="P:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Seed"/> value. 
            </summary>
            <value>
            By default, <see cref="P:NationalInstruments.Analysis.SignalGeneration.GaussianNoiseSignal.Seed"/>  is derived from the system time. 
            </value>
            <lastupdated>6/20/2006 3:16:33 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.HaltonSequence">
            <summary>
            Generates a quasi-random Halton sequence, which is a low-discrepancy number sequence.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            The quasi-random sequence is a sequence with low discrepancy that uniformly distributes the interval [0,1].
            <para>
            You can use this class alone to generate a quasi-random sequence, or you can add it to the 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.</para>
            </remarks>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
            <package name="Professional"/>
            <package name="Enterprise"/>
            </packages>
            <lastupdated>5/29/2012 4:05:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.HaltonSequence.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.HaltonSequence"/>.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.HaltonSequence.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>11/21/2011 10:57:28 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.HaltonSequence.#ctor(System.Int32)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.HaltonSequence"/> with the 
            specified seed.
            </summary>
            <param name="seed">
            The seed value for the random number generator.  This parameter must be a prime number.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.HaltonSequence.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>5/29/2012 4:06:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.HaltonSequence.Reset">
            <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
            <lastupdated>3/6/2006 10:21:43 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.HaltonSequence.Generate(System.Double,System.Int64)">
            <summary>
            Generates a quasi-random Halton sequence, which is a low-discrepancy number sequence.
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the quasi-random waveform.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            <paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            <para>
            -or
            </para>
            <para>
            <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            <para>
            -or
            </para>
            <para>
            <paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The quasi-random sequence is a sequence with low discrepancy that uniformly distributes the interval [0,1].
            </remarks>
            <lastupdated>5/29/2012 4:04:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.HaltonSequence.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:30:30 PM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.HaltonSequence.Seed">
            <summary>
            Gets the initial seed value. 
            </summary>
            <value>
            By default, <see cref="P:NationalInstruments.Analysis.SignalGeneration.HaltonSequence.Seed"/>  is 3. 
            </value>
            <lastupdated>5/29/2012 4:03:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.InterpolationType">
            <summary>
            Specifies the interpolation types that are available for the <see cref="T:NationalInstruments.Analysis.SignalGeneration.ArbitrarySignal"/> class.
            </summary>
            <packages>
                <package name="Professional"/>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>5/27/2003 1:49:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SignalGeneration.InterpolationType.None">
            <summary>
            Uses no interpolation.
            </summary>
            <lastupdated>5/27/2003 1:50:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SignalGeneration.InterpolationType.Linear">
            <summary>
            Uses <see cref="F:NationalInstruments.Analysis.SignalGeneration.InterpolationType.Linear"/> interpolation.
            </summary>
            <lastupdated>5/27/2003 1:50:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.PatternGeneration">
            <summary>
            Provides a set of <see langword="static"/> methods that are used to fill arrays with specific signal patterns.
            </summary>
            <threadsafety safety="unsafe"/>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>11/3/2011 2:51:09 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.#ctor">
            <exclude/>
            <lastupdated>10/3/2002 3:42:55 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.#cctor">
            <exclude/>
            <lastupdated>10/3/2002 3:43:02 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Impulse(System.Int32,System.Double,System.Int32)">
            <summary>
            Generates an array containing an impulse pattern.  
            </summary>
            <param name="numberOfElements">
            The number of the elements in the desired impulse pattern.
            </param>
            <param name="amplitude">
            The amplitude of the desired impulse pattern.
            </param>
            <param name="delay">
            The number of elements before the peak of the impulse pattern. For example, if 
            <paramref name="delay"/> is 5, then the peak is located in the sixth element of the array. 
            </param>
            <returns>
            The generated impulse pattern.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="numberOfElements"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            	Invalid <paramref name="delay"/> specified.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The value of <paramref name="delay"/> cannot exceed <paramref name="numberOfElements"/>. If <paramref name="delay"/> is greater than or equal to <paramref name="numberOfElements"/>, the pattern is  not generated.
            <para>
            If the impulse pattern is represented by the sequence <format type="italics">X</format>, the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Impulse(System.Int32,System.Double,System.Int32)"/> method generates the pattern according to the following formula:
            </para>
            	<para indent="true">
            		<image src="Impulse.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,.., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">A</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">d</format> represents <paramref name="delay"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents <paramref name="numberOfElements"/>.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:49:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Pulse(System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Generates an array containing a pulse pattern.  
            </summary>
            <param name="numberOfElements">
            The number of elements in the desired pulse pattern.
            </param>
            <param name="amplitude">
            The amplitude of the pulse to generate.
            </param>
            <param name="delay">
            The number of elements before the pulse pattern begins. For example, if the delay is 5, the pulse pattern begins 
            at the sixth location of the array.
            </param>
            <param name="width">
            The number of elements over which the pulse
            <paramref name=" amplitude"/> remains valid. The <paramref name="width"/> must be at least 1.
            </param>
            <returns>
            The desired pulse pattern.
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>
            Sum of <paramref name="delay"/> and <paramref name="width"/> is greater than <paramref name="numberOfElements"/>.
            </para>
            <para>
            -or
            </para>
            <para>
            <paramref name="numberOfElements"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            <para>
            If the sequence <format type="italics">X</format> represents the pulse pattern, the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Pulse(System.Int32,System.Double,System.Int32,System.Int32)"/> method generates the pattern according to the following formula:
            </para>
            <image src="Pulse.gif"/>
            <para indent="true">
            </para>
            <list type="table" bordered="false">
            <listheader><term></term><description></description></listheader>
            <item>
            <term>
            where
            </term>
            <description>
            <format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">a</format> represents <paramref name="amplitude"/>,
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">d</format> represents <paramref name="delay"/>,
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">w</format> represents <paramref name="width"/>, and
            </description>
            </item>
            <item>
            <term>
            </term>
            <description>
            <format type="italics">n</format> represents <paramref name="numberOfElements"/>.
            </description>
            </item>
            </list>
            The value of <paramref name="delay"/> + <paramref name="width"/> cannot exceed the <paramref name="numberOfElements"/>.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso example="Analysis/Enterprise/Transmitter" launch="false">Transmitter Example</seealso>
            <lastupdated>1/30/2013 12:20:19 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Ramp(System.Int32,System.Double,System.Double)">
            <summary>Generates an array containing a ramp pattern.  
            </summary>
            <param name="numberOfElements">
            The number of elements in the desired ramp pattern.
            </param>
            <param name="initialValue">
            The base value of the ramp pattern to generate.
            </param>
            <param name="finalValue">
            The final value of the ramp pattern to generate. 
            </param>
            <returns>
            The generated ramp pattern.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="numberOfElements"/> is less than two.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the sequence <format type="italics">X</format> represents the ramp pattern, the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Ramp(System.Int32,System.Double,System.Double)"/> method generates the pattern according to the formula:
            <para indent="true">
            		<image src="Ramp1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Ramp2.gif"/> represents the <paramref name="finalValue"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">x</format><format type="subscript">0</format> represents the <paramref name="initialValue"/>, and 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents <paramref name="numberOfElements"/>.
            </description>
            		</item>
            	</list>
            	<para>
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Ramp(System.Int32,System.Double,System.Double)"/> method does not impose conditions on the relationship between start and end. Therefore, the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Ramp(System.Int32,System.Double,System.Double)"/> method can generate ramp-up and ramp-down patterns. If the <paramref name="finalValue"/> is greater than the <paramref name="initialValue"/>, 
            then the pattern generated is a ramp-up. To generate a ramp-down, set <paramref name="finalValue"/> to less than the <paramref name="initialValue"/>. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:51:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Chirp(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Generates an array containing a chirp pattern.  
            </summary>
            <param name="numberOfElements">
            The number of elements in the resulting chirp waveform.
            </param>
            <param name="amplitude">
            The amplitude of the resulting chirp waveform.
            </param>
            <param name="startFrequency">
            The beginning frequency of the resulting chirp signal, in cycles/sample.
            </param>
            <param name="endFrequency">
            The ending frequency of the resulting chirp signal, in cycles/sample.
            </param>
            <returns>
            The generated chirp pattern.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="numberOfElements"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the sequence <format type="italics">Y</format> represents the chirp pattern, the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Chirp(System.Int32,System.Double,System.Double,System.Double)"/> method generates the pattern according to the following formula:
            <para indent="true">
            		<image src="Chirp.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">A</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> = 2 (<format type="italics">f</format><format type="subscript">2</format>
            				<entity value="ndash"/>
            				<format type="italics">f</format><format type="subscript">1</format>) / <format type="italics">n</format>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">b</format> = 2 <format type="italics">f</format><format type="subscript">1</format>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format><format type="subscript">1</format> represents <paramref name="startFrequency"/> in normalized units of cycles/sample,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format><format type="subscript">2</format> represents <paramref name="endFrequency"/> in normalized units of cycles/sample, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples. 
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/23/2003 9:03:16 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Sinc(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Generates an array containing a sinc pattern. 
            </summary>
            <param name="numberOfElements">
            The number of elements in the desired sinc pattern.
            </param>
            <param name="amplitude">
            The amplitude of the sinc pattern.
            </param>
            <param name="delay">
            The delay value. <paramref name="delay"/> shifts the peak value of the sinc pattern to the index, where index = <paramref name="delay"/>/<paramref name="dt"/>.
            </param>
            <param name="dt">
            The sampling interval.  It is inversely proportional to the width of the main lobe in the sinc pattern.
            </param>
            <returns>
            The generated sinc pattern.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="dt"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="numberOfElements"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the sequence <format type="italics">Y</format> represents the sinc pattern, the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Sinc(System.Int32,System.Double,System.Double,System.Double)"/> method generates the pattern according to the following formula:
            <para indent="true">
            		<image src="Sinc1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Sinc2.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<entity value="Delta"/><format type="italics">t</format> represents <paramref name="dt"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">d</format> represents <paramref name="delay"/>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents <paramref name="numberOfElements"/>.
            </description>
            		</item>
            	</list>
            	<para>
            The main lobe of the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Sinc(System.Int32,System.Double,System.Double,System.Double)"/> method, sinc(<format type="italics">x</format>), is the part of the sinc curve bounded by the region <entity value="ndash"/>1  x  1.
            </para>
            When |<format type="italics">x</format>| = 1, sinc(<format type="italics">x</format>) = 0.0, and the peak value of the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Sinc(System.Int32,System.Double,System.Double,System.Double)"/> method occurs when <format type="italics">x</format> = 0. Using L'Hopital's Rule, you can show that sinc(0) = 1 and that sinc(0) = 1 is also its peak value. Thus, the main lobe is the region of the sinc curve encompassed by the first set of zeros to the left and the right of the sinc value. 
            <note type="note">
            Recommended range for <paramref name="dt"/> is greater than or equal to 0.0, and less than or equal to 1.0.
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:51:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.GaussMonopulse(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Generates an array containing a Gaussian monopulse pattern.  
            </summary>
            <param name="numberOfElements">
            The number of elements in the resulting Gaussian monopulse pattern.
            </param>
            <param name="amplitude">
            The amplitude of the resulting Gaussian monopulse pattern.
            </param>
            <param name="delay">
            The number of elements before the peak of the resulting Gaussian monopulse pattern. For example, if 
            <paramref name="delay"/> is 5, then the peak is located in the sixth element of the array. 
            </param>
            <param name="dt">
            The sampling interval. This parameter must be positive.
            </param>
            <param name="centerFrequency">
            The center frequency of the resulting Gaussian monopulse pattern. This parameter must be positive.
            </param>
            <returns>
            The generated Gaussian monopulse pattern.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="numberOfElements"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="dt"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="centerFrequency"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<remarks>
            This method obtains the element of the output array using the following formula:
            <para indent="true">
            			<image src="GaussMonopulseform_2.png"/>
            		</para>
            where 
            <para indent="true">
            			<image src="GaussMonopulseform_3.png"/>
            		</para>
            	</remarks>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:49:11 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.GaussModulatedSine(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Generates an array containing a Gaussian modulated sinusoidal pattern.  
            </summary>
            <param name="numberOfElements">
            The number of elements in the resulting Gaussian modulated sinusoidal pattern.
            </param>
            <param name="amplitude">
            The amplitude of the resulting Gaussian modulated sinusoidal pattern.
            </param>
            <param name="delay">
            The number of elements before the peak of the Gaussian modulated sinusoidal pattern. For example, if 
            <paramref name="delay"/> is 5, then the peak is located in the sixth element of the array. 
            </param>
            <param name="dt">
            The sampling interval. This parameter must be positive.
            </param>
            <param name="centerFrequency">
            The center frequency in Hertz, of the resulting Gaussian modulated sinusoidal pattern. This parameter must be positive.
            </param>
            <param name="bandwidth">
            The bandwidth normalized to <paramref name="centerFrequency"/>. <paramref name="bandwidth"/>*<paramref name="centerFrequency"/>
            is the bandwidth corresponding to the (-attenuation dB) in the power spectrum.
            This parameter must be positive.
            </param>
            <param name="attenuation">
            The attenuation at the given <paramref name="bandwidth"/> of the resulting Gaussian modulated sinusoidal pattern, in dB. 
            This parameter must be positive.
            </param>
            <returns>
            The generated Gaussian modulated sinusoidal pattern.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="numberOfElements"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="dt"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="centerFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="bandwidth"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="attenuation"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<remarks>
            This method obtains the element of the output array using the following formula:
            <para indent="true">
            			<image src="GaussModform_0.png"/>
            		</para>
            where 
            <para indent="true">
            			<image src="GaussModform_1.png"/>
            		</para>
            	</remarks>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:48:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.PeriodicSinc(System.Int32,System.Double,System.Double,System.Double,System.Int32)">
            <summary>Generates an array containing a periodic sinc pattern.  
            </summary>
            <param name="numberOfElements">
            The number of elements in the resulting periodic sinc pattern.
            </param>
            <param name="amplitude">
            The amplitude of the resulting periodic sinc pattern.
            </param>
            <param name="delay">
            The number of elements before the peak of the resulting periodic sinc pattern. For example, if 
            <paramref name="delay"/> is 5, then the peak is located in the sixth element of the array. 
            </param>
            <param name="dt">
            The sampling interval. This parameter must be positive.
            </param>
            <param name="periodicSincCoefficient">
            The periodic sinc pattern coefficient. This parameter is the number of zeros between two adjacent peaks in the resulting periodic sinc pattern. This parameter must be positive.
            </param>
            <returns>
            The generated periodic sinc pattern.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="numberOfElements"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="dt"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="periodicSincCoefficient"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method obtains the element of the output array using the following formula:
            <para indent="true">
            		<image src="PeriodicSyncform_4.png"/>
            	</para>
            where 
            <para indent="true">
            		<image src="PeriodicSyncform_3.png"/>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/15/2006 4:49:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.UnsymmetricTriangle(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Generates an array containing an unsymmetric triangle pattern.  
            </summary>
            <param name="numberOfElements">
            The number of elements in the resulting unsymmetric triangle pattern.
            </param>
            <param name="amplitude">
            The amplitude of the resulting unsymmetric triangle pattern.
            </param>
            <param name="delay">
            The number of elements before the peak of the resulting unsymmetric triangle pattern. For example, if 
            <paramref name="delay"/> is 5, then the peak is located in the sixth element of the array. 
            </param>
            <param name="dt">
            The sampling interval. This parameter must be positive.
            </param>
            <param name="width">
            The width of the resulting unsymmetric triangle pattern. This parameter must be positive.
            </param>
            <param name="asymmetryCoefficient">
            The asymmetry coefficient that indicates the asymmetric character. This parameter must be between zero and one.
            </param>
            <returns>
            The generated unsymmetric triangle pattern.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="numberOfElements"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="dt"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="width"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="asymmetryCoefficient"/> is either less than zero or greater than one.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method obtains the element of the output array using the following formula:
            <para indent="true">
            		<image src="UnsymmetricTriangleform_5.png"/>
            	</para>
            where 
            <para indent="true">
            		<image src="UnsymmetricTriangleform_3.png"/>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/23/2006 4:49:58 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Riffle(System.Double[])">
            <summary>
            Riffles the input array by randomly selectring two elements in <paramref name="data"/>, swapping those elements, and then repeating this process for each element in <paramref name="data"/>.
            </summary>
            <param name="data">
            The input array to riffle.
            </param>
            <returns>
            An array containing the corresponding indeces in the input array for each element in the riffled array.
            </returns>
            <remarks>
            This overload generates the sequence as a continuation of a previously generated noise sequence.
            </remarks>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <lastupdated>3/8/2012 9:29:14 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Riffle(System.Double[],System.Int32)">
            <summary>
            Riffles the input array by randomly selectring two elements in <paramref name="data"/>, swapping those elements, and then repeating this process for each element in <paramref name="data"/>. Use this method to specify a seed value.
            </summary>
            <param name="data">
            The input array to riffle.
            </param>
            <param name="seed">
            The seed value at which to riffle the input array.
            </param>
            <returns>
            An array containing the corresponding indeces in the input array for each element in the riffled array.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <lastupdated>5/29/2012 4:08:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Riffle(System.Int32[])">
            <summary>
            Riffles the input array by randomly selectring two elements in <paramref name="data"/>, swapping those elements, and then repeating this process for each element in <paramref name="data"/>.
            </summary>
            <param name="data">
            The input array to riffle.
            </param>
            <returns>
            An array containing the corresponding indeces in the input array for each element in the riffled array.
            </returns>
            <remarks>
            This overload generates the sequence as a continuation of a previously generated noise sequence.
            </remarks>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <lastupdated>3/8/2012 9:29:26 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Riffle(System.Int32[],System.Int32)">
            <summary>
            Riffles the input array by randomly selectring two elements in <paramref name="data"/>, swapping those elements, and then repeating this process for each element in <paramref name="data"/>.
            </summary>
            <param name="data">
            The input array to riffle.
            </param>
            <param name="seed">
            The seed value at which to riffle the input array.
            </param>
            <returns>
            An array containing the corresponding indeces in the input array for each element in the riffled array.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <lastupdated>3/8/2012 9:29:33 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Riffle(NationalInstruments.ComplexDouble[])">
            <summary>
            Riffles the input array by randomly selectring two elements in <paramref name="data"/>, swapping those elements, and then repeating this process for each element in <paramref name="data"/>.
            </summary>
            <param name="data">
            The input array to riffle.
            </param>
            <returns>
            An array containing the corresponding indeces in the input array for each element in the riffled array.
            </returns>
            <remarks>
            This overload generates the sequence as a continuation of a previously generated noise sequence.
            </remarks>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <lastupdated>3/8/2012 9:29:04 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PatternGeneration.Riffle(NationalInstruments.ComplexDouble[],System.Int32)">
            <summary>
            Riffles the input array by randomly selectring two elements in <paramref name="data"/>, swapping those elements, and then repeating this process for each element in <paramref name="data"/>. Use this method to specify a seed value.
            </summary>
            <param name="data">
            The input array to riffle.
            </param>
            <param name="seed">
            The seed value at which to riffle the input array.
            </param>
            <returns>
            An array containing the corresponding indeces in the input array for each element in the riffled array.
            </returns>
            <security condition="unmanagedcode"/>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <lastupdated>5/29/2012 4:07:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal">
            <summary>
            Generates an array containing periodic pseudorandom noise.
            </summary>
            <remarks>
            <para>You can use this class to compute the frequency response of a linear system in one time record instead of averaging the frequency response over several time records, as you must for nonperiodic random noise sources.</para>
            <para>You do not need to window periodic random noise before performing spectral analysis because periodic random noise is self-windowing and therefore has no spectral leakage. This is because periodic random noise contains only integral-cycle sinusoids.
            </para>
            <para>You can use this class alone to generate a periodic noise signal, or you can add it to the 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.</para>
            </remarks>
            <example>
            This example shows how you can use this class alone to generate a periodic noise signal, or 
            add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            <code lang="VB.NET">
            ' Use PeriodicNoiseSignal alone
            Dim periodicNoise As PeriodicNoiseSignal = New PeriodicNoiseSignal()
            periodicNoise.Generate(1000.0, 256)
             
            ' Use PeriodicNoiseSignal and SignalGenerator to generate a composite signal
            Dim sigGen As SignalGenerator = New SignalGenerator(1000.0, 256)
            sigGen.Signals.Add(New PeriodicNoiseSignal())
            sigGen.Signals.Add(New WhiteNoiseSignal(0.1))
            sigGen.Generate()
            </code>
            <code lang="C#">
            // Use PeriodicNoiseSignal alone
            PeriodicNoiseSignal periodicNoise = new PeriodicNoiseSignal(); 
            periodicNoise.Generate(1000.0,256);
             
            // Use PeriodicNoiseSignal and SignalGenerator to generate a composite signal
            SignalGenerator sigGen = new SignalGenerator(1000.0,256);
            sigGen.Signals.Add(new PeriodicNoiseSignal());
            sigGen.Signals.Add(new WhiteNoiseSignal(0.1));
            sigGen.Generate();
            </code>
            </example>
            <threadsafety safety="unsafe"/>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
            <package name="Professional"/>
            <package name="Enterprise"/>
            </packages>
            <lastupdated>5/29/2012 4:10:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal"/> using a seed 
            derived from the system time.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>9/20/2011 7:15:58 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.#ctor(System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal"/> with the 
            specified spectral amplitude, using a seed derived from the system time.
            </summary>
            <param name="spectralAmplitude">
            The spectral amplitude of the resulting periodic noise signal.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>2/13/2012 8:39:39 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.#ctor(System.Double,System.Int32)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal"/> with the 
            specified spectral amplitude and seed.
            </summary>
            <param name="spectralAmplitude">
            The spectral amplitude of the resulting periodic noise signal.
            </param>
            <param name="seed">
            The seed value for the random number generator.  This parameter must be greater than or
            equal to zero.  
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>2/13/2012 8:39:51 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.Reset">
            <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
            <lastupdated>3/6/2006 10:21:49 AM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.Generate(System.Double,System.Int64)">
            <summary>
            Generates an array containing a periodic noise waveform. 
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the periodic noise waveform.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>The output array contains all frequencies that can be represented with an integral number of cycles in the requested <paramref name="numberOfSamples"/>. Each frequency-domain component has a magnitude of <see cref="P:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.SpectralAmplitude" crefType="Unqualified"/> and random phase.</para>
            	<para>Another way of thinking of the output array is that it is a summation of sinusoidal signals with the same amplitudes but with random phases. The unit of <see cref="P:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.SpectralAmplitude" crefType="Unqualified"/> is the same as the output array and is a linear measure of amplitude. </para>
            	<para>The output waveform is bounded by the following values:</para>
            	<para indent="true"><image src="loc_eq_prne1a.gif"/></para>
            	<para indent="true"><image src="loc_eq_prne1b.gif"/></para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>2/13/2012 8:38:14 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:49:41 PM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.Seed">
            <summary>
            Gets the initial seed value. 
            </summary>
            <value>
            By default, <see cref="P:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.Seed"/>  is derived from the system time. 
            </value>
            <lastupdated>5/29/2012 4:11:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.SpectralAmplitude">
            <summary>
            Gets or sets the waveform spectral amplitude.
            </summary>
            <value>
            The magnitude of the frequency domain components of the periodic random noise.
            </value>
            <remarks>
            This value specifies the spectral amplitude of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>2/13/2012 8:39:10 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.PeriodicNoiseSignal.DefaultSpectralAmplitude">
            <summary>
            Gets the spectral amplitude of the signal if none is specified.
            </summary>
            <value>
            The spectral amplitude that is used if none is specified. The default value is 1.0.
            </value>
            <lastupdated>5/29/2012 4:11:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal">
            <summary>
            Generates a pseudorandom sequence of values that are the number of discrete events that occur in a given interval, specified by <see cref="P:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.Mean" crefType="Unqualified"/>, of a unit Poisson process.
            </summary>
            <remarks>
            You can use this class alone to generate a periodic noise signal, or you can add it to the 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            </remarks>
            <example>
            This example shows how you can use this class alone to generate a periodic noise signal or 
            add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            <code lang="VB.NET">
            ' Use PoissonNoiseSignal alone
            Dim poissonNoise As PoissonNoiseSignal = New PoissonNoiseSignal()
            poissonNoise.Generate(1000.0, 256)
             
            ' Use PoissonNoiseSignal and SignalGenerator to generate a composite signal
            Dim sigGen As SignalGenerator = New SignalGenerator(1000.0, 256)
            sigGen.Signals.Add(New PoissonNoiseSignal())
            sigGen.Signals.Add(New WhiteNoiseSignal(0.1))
            sigGen.Generate()
            </code>
            <code lang="C#">
            // Use PoissonNoiseSignal alone
            PoissonNoiseSignal poissonNoise = new PoissonNoiseSignal(); 
            poissonNoise.Generate(1000.0,256);
             
            // Use PoissonNoiseSignal and SignalGenerator to generate a composite signal
            SignalGenerator sigGen = new SignalGenerator(1000.0,256);
            sigGen.Signals.Add(new PoissonNoiseSignal());
            sigGen.Signals.Add(new WhiteNoiseSignal(0.1));
            sigGen.Generate();
            </code>
            </example>
            <threadsafety safety="unsafe"/>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
            <package name="Professional"/>
            <package name="Enterprise"/>
            </packages>
            <lastupdated>5/29/2012 4:26:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal"/> using a seed 
            derived from the system time.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>9/20/2011 7:34:15 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.#ctor(System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal"/> with the 
            specified mean, using a seed derived from the system time.
            </summary>
            <param name="mean">
            The mean of the resulting Poisson-distributed signal.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>11/21/2011 11:13:59 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.#ctor(System.Double,System.Int32)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal"/> with the 
            specified mean and seed.
            </summary>
            <param name="mean">
            The mean of the resulting Poisson-distributed signal.
            </param>
            <param name="seed">
            The seed value for the random number generator. This parameter must be greater than or
            equal to zero.  
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>11/21/2011 11:14:19 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.Reset">
            <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
            <lastupdated>3/6/2006 10:21:43 AM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.Generate(System.Double,System.Int64)">
            <summary>
            Generates an array containing a gamma-distributed noise waveform. 
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the Poisson-distributed noise waveform.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            <paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            <para>
            -or
            </para>
            <para>
            <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            <para>
            -or
            </para>
            <para>
            <paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            <para>This method generates an array containin a Poisson-distributed pseudorandom pattern of values that are the number of discrete eventes that occur in the interval specified by <see cref="P:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.Mean" crefType="Unqualified"/> of a unit rate Poisson process. The following equation defines the probability density function:</para>
            <para indent="true"><image src="noloc_eq_poisson_prob_func.gif"/></para>
            <para>where <entity value="lambda"/> is the mean.</para>
            <para>The following equations define the mean value, <entity value="mu"/>, and the standard deviation value, <entity value="sigma"/>, of the pseudorandom sequence:</para>
            <para indent="true"><entity value="mu"/> = E{x} = <entity value="lambda"/></para>
            <para indent="true"><entity value="sigma"/> = [E{(x - <entity value="mu"/>)<format type="superscript">2</format>}]<format type="superscript">1/2</format> = <image src="noloc_eq_poisson_sdv.gif"/></para>
            <para>Poisson noise is the result of the Poisson process. You can use the Poisson process to describe the probability of a certain number of events happening in a given period of time. For example, you can use the Poisson process to describe the nuclear decay of atoms or the number of messages a transmitting station receives.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>5/29/2012 4:45:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:30:30 PM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.Mean">
            <summary>
            Gets or sets the waveform mean.
            </summary>
            <value>
            The mean of the waveform. The default value is 1.0.
            </value>
            <remarks>
            This value specifies the mean of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>9/20/2011 7:32:55 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.DefaultMean">
            <summary>
            Gets the mean value of the signal, if none is specified.
            </summary>
            <value>
            The mean value to use if none is specified. The default value is 1.0.
            </value>
            <lastupdated>5/29/2012 4:27:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.Seed">
            <summary>
            Gets the initial seed value. 
            </summary>
            <value>
            By default, <see cref="P:NationalInstruments.Analysis.SignalGeneration.PoissonNoiseSignal.Seed"/>  is derived from the system time. 
            </value>
            <lastupdated>5/29/2012 4:27:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.RichtmeyerSequence">
            <summary>
            Generates a quasi-random Richtmeyer sequence, which is a low-discrepancy number sequence.
            </summary>
            <remarks>
            The quasi-random sequence is a sequence with low discrepancy that uniformly distributes the interval [0,1].
            <para>
            You can use this class alone to generate a quasi-random sequence, or you can add it to the 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.</para>
            </remarks>
            <threadsafety safety="unsafe"/>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
            <package name="Professional"/>
            <package name="Enterprise"/>
            </packages>
            <lastupdated>5/29/2012 4:47:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.RichtmeyerSequence.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.RichtmeyerSequence"/>.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.RichtmeyerSequence.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>11/21/2011 10:57:13 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.RichtmeyerSequence.#ctor(System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.RichtmeyerSequence"/> with the 
            specified seed.
            </summary>
            <param name="seed">
            The seed value for the random number generator.  This parameter must be greater than or
            equal to zero.  
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.RichtmeyerSequence.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>11/21/2011 10:52:26 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.RichtmeyerSequence.Reset">
            <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
            <lastupdated>3/6/2006 10:21:43 AM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.RichtmeyerSequence.Generate(System.Double,System.Int64)">
            <summary>
            Generates a quasi-random Richtmeyer sequence, which is a low-discrepancy number sequence.
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the quasi-random waveform.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            <paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            <para>
            -or
            </para>
            <para>
            <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            <para>
            -or
            </para>
            <para>
            <paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The quasi-random sequence is a sequence with low discrepancy that uniformly distributes the interval [0,1].
            </remarks>
            <lastupdated>5/29/2012 4:47:10 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.RichtmeyerSequence.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:30:30 PM</lastupdated>
            <updatedby>Anzurio Parra</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.RichtmeyerSequence.Seed">
            <summary>
            Gets the initial seed value. 
            </summary>
            <value>
            By default, <see cref="P:NationalInstruments.Analysis.SignalGeneration.GammaNoiseSignal.Seed"/>  is the square root of 3. 
            </value>
            <lastupdated>5/29/2012 4:46:54 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal">
            <summary>
            Generates a sawtooth signal.  
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            You can use this class alone to generate a sawtooth signal or you can add it to the 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            </remarks>
            <example>
            This example shows how you can use this class alone to generate a sawtooth signal or 
            add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            <code lang="VB.NET">
            ' Use SawtoothSignal alone
            Dim sawtooth As SawtoothSignal = New SawtoothSignal(1000.0, 1.0, 0.0)
            sawtooth.Generate(1000.0, 256)
             
            ' Use SawtoothSignal and SignalGenerator to generate a composite signal
            Dim sigGen As SignalGenerator = New SignalGenerator(1000.0, 256)
            sigGen.Signals.Add(New SawtoothSignal(1000.0, 1.0, 0.0))
            sigGen.Signals.Add(New WhiteNoiseSignal(0.1))
            sigGen.Generate()
            </code>
            	<code lang="C#">
            // Use SawtoothSignal alone
            SawtoothSignal sawtooth = new SawtoothSignal(1000.0,1.0,0.0); 
            sawtooth.Generate(1000.0,256);
             
            // Use SawtoothSignal and SignalGenerator to generate a composite signal
            SignalGenerator sigGen = new SignalGenerator(1000.0,256);
            sigGen.Signals.Add(new SawtoothSignal(1000.0,1.0,0.0));
            sigGen.Signals.Add(new WhiteNoiseSignal(0.1));
            sigGen.Generate();
            </code>
            </example>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
                <package name="Professional"/>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/16/2008 11:32:22 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal"/>.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:18:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.#ctor(System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal"/> with the 
            specified frequency.
            </summary>
            <param name="frequency">
            The frequency of the resulting sawtooth wave signal, in hertz.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:18:40 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.#ctor(System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal"/> with the 
            specified frequency and amplitude.
            </summary>
            <param name="frequency">
            The frequency of the resulting sawtooth wave signal, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the resulting sawtooth wave signal.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:19:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal"/> with the 
            specified frequency, amplitude, and phase.
            </summary>
            <param name="frequency">
            The frequency of the resulting sawtooth wave signal, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the resulting sawtooth wave signal.
            </param>
            <param name="phase">
            The initial phase of the resulting Sawtooth Wave signal, in degrees.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:19:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Reset">
            <summary>
            Resets the phase of the signal to its initial value.
            </summary>
            <lastupdated>6/20/2003 3:29:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)">
            <summary>
            Generates an array containing a sawtooth waveform. 
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the sawtooth waveform.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the sequence <format type="italics">Y</format> represents the sawtooth wave, the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> method generates the pattern according to the following formula:
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = <format type="italics">a</format> * sawtooth(phase<format type="italics"><format type="subscript">i</format></format>)
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents <paramref name="numberOfSamples"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Sawtooth.gif"/>
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">p</format> = phase<format type="italics"><format type="subscript">i</format></format> modulo 360.0, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Generate.gif"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            phase<format type="subscript">0</format> = the value of the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Phase"/> property when 
            <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> is called,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format><format type="subscript">signal</format> represents the frequency of the triangle signal, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format><format type="subscript">sampling</format> is the sampling rate.
            </description>
            		</item>
            	</list>
            	<para>
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> 
            can be called successively to generate a continuous sawtooth wave <paramref name="numberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/8/2004 5:35:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:35:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.DefaultFrequency">
            <summary>
            Gets the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.DefaultFrequency"/> of the signal, in hertz.
            </summary>
            <value>
            The frequency that is used if none is specified, in hertz. The default value is 7.8125 Hz.
            </value>
            <lastupdated>6/25/2003 2:53:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.DefaultAmplitude">
            <summary>
            Gets the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.DefaultAmplitude"/> of the signal.
            </summary>
            <value>
            The amplitude that is used if none is specified. The default value is 1.0.
            </value>
            <lastupdated>6/25/2003 2:53:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.DefaultPhase">
            <summary>
            Gets the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.DefaultPhase"/> of the signal, in degrees.
            </summary>
            <value>
            The phase that is used if none is specified, in degrees. The default value is 0.0 degrees.
            </value>
            <lastupdated>6/25/2003 2:53:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Frequency">
            <summary>
            Gets or sets the waveform <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Frequency"/>, in hertz.
            </summary>
            <value>
            The <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Frequency"/> of the waveform, in hertz. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.DefaultFrequency"/>.
            </value>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Frequency"/> is less than or equal to zero.
            </exception>
            <remarks>
            This value specifies the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Frequency"/> of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:36:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Amplitude">
            <summary>
            Gets or sets the waveform <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Amplitude"/>.
            </summary>
            <value>
            The <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Amplitude"/> of the waveform. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.DefaultAmplitude"/>.
            </value>
            <remarks>
            This value specifies the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Amplitude"/> of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:36:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Phase">
            <summary>
            Gets or sets the waveform <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Phase"/>, in degrees.
            </summary>
            <value>
            The <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Phase"/> of the waveform, in degrees. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.DefaultPhase"/>.
            </value>
            <remarks>
            This value specifies the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Phase"/> of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SawtoothSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:36:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.SignalCollection">
            <summary>
            Creates a strongly typed collection of <see cref="T:NationalInstruments.Analysis.SignalGeneration.ISignal" crefType="Unqualified"/> objects.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            <package name="Professional"/>
            <package name="Enterprise"/>
            </packages>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>5/29/2012 4:48:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.#ctor">
            <summary>Initializes a new instance of <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalCollection"/>.</summary>
            <lastupdated>5/27/2003 1:39:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.#ctor(NationalInstruments.Analysis.SignalGeneration.SignalCollection)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalCollection"/> from an existing collection.
            </summary>
            <param name="item">The existing collection to copy.</param>
            <lastupdated>5/27/2003 1:39:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.#ctor(NationalInstruments.Analysis.SignalGeneration.ISignal[])">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalCollection"/> from an array of items.
            </summary>
            <param name="item">The array to copy.</param>
            <lastupdated>5/27/2003 1:39:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.ToString">
            <summary>Overrides <see cref="M:System.Object.ToString"/>.</summary>
            <returns>A string representation of the object.</returns>
            <lastupdated>5/27/2003 1:39:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Add(NationalInstruments.Analysis.SignalGeneration.ISignal)">
            <summary>Adds an item to the end of the collection.</summary>
            <param name="item">Item to add to the collection.</param>
            <returns>The array index of the added item.</returns>
            <lastupdated>5/27/2003 1:38:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.System#Collections#IList#Add(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.AddRange(NationalInstruments.Analysis.SignalGeneration.ISignal[])">
            <summary>Adds an array of elements to the end of the collection.</summary>
            <param name="item">Array of elements to add to the collection.</param>
            <lastupdated>5/27/2003 1:38:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.AddRange(NationalInstruments.Analysis.SignalGeneration.SignalCollection)">
            <summary>Adds a collection of elements to the end of the collection.</summary>
            <param name="item">Collection of elements to add to the collection.</param>
            <lastupdated>5/27/2003 1:38:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Clear">
            <summary>Removes all items from the collection.</summary>
            <lastupdated>5/27/2003 1:38:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Contains(NationalInstruments.Analysis.SignalGeneration.ISignal)">
            <see langword="true"/>
            <summary>Returns if the specified element is in the collection.</summary>
            <param name="item">Item to locate in the collection.</param>
            <returns>
            	<see langword="true"/> if the collection contains <paramref name="item"/>.
            </returns>
            <lastupdated>5/27/2003 1:38:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.System#Collections#IList#Contains(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.CopyTo(NationalInstruments.Analysis.SignalGeneration.ISignal[],System.Int32)">
            <summary>Copies the collection to an array or a portion of an array.</summary>
            <param name="array">Destination array for the collection.</param>
            <param name="index">Index in the target array at which you want to begin copying the collection to.</param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="array"/> is multidimensional.
            </para>
            	<para>
            		-or-
            	</para>
            	<para>
            		<paramref name="index"/> is greater than or equal to the array length.
            </para>
            	<para>
            	-or-
            	</para>
            	<para>
            The number of elements in the collection is greater than the available space between
            <paramref name="index"/> and the end of <paramref name="array"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <lastupdated>5/27/2003 1:39:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.IndexOf(NationalInstruments.Analysis.SignalGeneration.ISignal)">
            <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of the item. If the item is not found, returns <entity value="ndash"/>1.</returns>
            <lastupdated>5/27/2003 1:39:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.System#Collections#IList#IndexOf(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Insert(System.Int32,NationalInstruments.Analysis.SignalGeneration.ISignal)">
            <summary>Inserts an item into the collection at the specified index.</summary>
            <param name="index">Index to insert the item at.</param>
            <param name="item">Item to insert into the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>.
            </exception>
            <remarks>
            The list elements after the inserted element shift down to accommodate the new element. Because the list elements
            are indexed, the indexes of the shifted elements also are updated.
            </remarks>
            <lastupdated>5/27/2003 1:39:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.GetEnumerator">
            <summary>Returns an enumerator that you can use to iterate through the collection.</summary>
            <returns>Enumerator for the collection.</returns>
            <remarks>
            For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> in the Microsoft
            .NET Framework documentation.
            </remarks>
            <lastupdated>5/27/2003 1:39:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Remove(NationalInstruments.Analysis.SignalGeneration.ISignal)">
            <summary>Removes the first occurrence of the specified item from the collection.</summary>
            <param name="item">Item to remove from the collection.</param>
            <remarks>
            The list elements after the removed element shift up to occupy the vacated spot. Because the list elements
            are indexed, the indexes of the shifted elements also are updated.
            </remarks>
            <lastupdated>5/27/2003 1:39:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.System#Collections#IList#Remove(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.RemoveAt(System.Int32)">
            <summary>Removes the item at the specified index.</summary>
            <param name="index">Zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>.
            </exception>
            <remarks>
            The list elements after the removed element shift up to occupy the vacated spot. Because the list elements
            are indexed, the indexes of the shifted elements also are updated.
            </remarks>
            <lastupdated>5/27/2003 1:39:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalCollection.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>Calls if the state of <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalCollection"/> changes.</summary>
            <param name="e">
            Information about how the list changed and which indexes were affected.
            </param>
            <lastupdated>5/27/2003 1:39:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Item(System.Int32)">
            <summary>Gets or sets the <see cref="T:NationalInstruments.Analysis.SignalGeneration.ISignal"/> at the specified index. In Visual C#, this property is the indexer.</summary>
            <value>
            The <see cref="T:NationalInstruments.Analysis.SignalGeneration.ISignal"/> at the specified index.
            </value>
            <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is outside the valid range of indexes for the collection.
            </exception>
            <lastupdated>6/25/2003 9:54:10 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalCollection.System#Collections#IList#Item(System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 4:35:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
            <value>
            The number of elements contained in the collection.
            </value>
            <lastupdated>5/27/2003 1:37:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalCollection.System#Collections#ICollection#IsSynchronized">
            <exclude/>
            <lastupdated>1/23/2009 4:35:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalCollection.System#Collections#IList#IsFixedSize">
            <exclude/>
            <lastupdated>1/23/2009 4:35:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalCollection.System#Collections#IList#IsReadOnly">
            <exclude/>
            <lastupdated>1/23/2009 4:35:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalCollection.System#Collections#ICollection#SyncRoot">
            <exclude/>
            <lastupdated>1/23/2009 4:35:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator">
            <summary>
            Generates a specified waveform composed of one or more component signals.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            You can use this class to generate a waveform or waveforms that implement the <see cref="T:NationalInstruments.Analysis.SignalGeneration.ISignal"/> interface.
            If provided with a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalCollection"/>, the generated signal is the sum
            of all the waveforms in the collection.
            </remarks>
            <example>
            This example shows how you can use this class to generate waveforms that implement the <see cref="T:NationalInstruments.Analysis.SignalGeneration.ISignal"/> interface.
            The generated signal is the sum of all the waveforms in the signalGen collection.
            <code lang="VB.NET">
            Dim data() As Double
            Dim signalGen As NationalInstruments.Analysis.SignalGeneration.SignalGenerator = New NationalInstruments.Analysis.SignalGeneration.SignalGenerator()
            signalGen.Signals.Add(New SineSignal(1000.0, 1.0, 0.0))
            signalGen.Signals.Add(New SineSignal(5000.0, 5.0, 0.0))
            signalGen.Signals.Add(New WhiteNoiseSignal(1.0))
            data = signalGen.Generate()
            </code>
            	<code lang="C#">
            double[] data;
            NationalInstruments.Analysis.SignalGeneration.SignalGenerator signalGen = new NationalInstruments.Analysis.SignalGeneration.SignalGenerator();
            signalGen.Signals.Add(new SineSignal(1000.0,1.0,0.0));
            signalGen.Signals.Add(new SineSignal(5000.0,5.0,0.0));
            signalGen.Signals.Add(new WhiteNoiseSignal(1.0));
            data = signalGen.Generate();
            </code>
            </example>
            <security condition="unmanagedcode"/>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
                <package name="Professional"/>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/16/2008 11:32:45 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>5/29/2003 2:44:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor(System.Double,System.Int64)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/> with the 
            specified sampling rate and number of samples.
            </summary>
            <param name="samplingRate">
            The sampling rate of the signal, in hertz.
            </param>
            <param name="numberOfSamples">
            The number of samples to return on each call to <see cref="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Generate"/>.
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingRate"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>6/23/2003 9:15:36 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor(System.Double,System.Int64,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/> with the 
            specified sampling rate, number of samples, and DC offset.
            </summary>
            <param name="samplingRate">
            The sampling rate of the signal, in hertz.
            </param>
            <param name="numberOfSamples">
            The number of samples to return on each call to <see cref="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Generate"/>.
            </param>
            <param name="dcOffset">
            The DC offset of the signal.
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingRate"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>6/25/2003 11:56:53 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor(System.Double,System.Int64,NationalInstruments.Analysis.SignalGeneration.ISignal)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/> with the 
            specified sampling rate, number of samples, and signal.
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The number of samples to return on each call to <see cref="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Generate"/>.
            </param>
            <param name="signal">
            The signal to generate.
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingRate"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>6/23/2003 9:18:42 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor(System.Double,System.Int64,NationalInstruments.Analysis.SignalGeneration.SignalCollection)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/> with the 
            specified sampling rate, number of samples, and signals.
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The number of samples to return on each call to <see cref="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Generate"/>.
            </param>
            <param name="signals">
            A collection of component signals from which to compose the generated signal.
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingRate"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>6/23/2003 9:19:34 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor(System.Double,System.Int64,System.Double,NationalInstruments.Analysis.SignalGeneration.ISignal)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/> with the 
            specified sampling rate, number of samples, DC offset, and signal.
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The number of samples to return on each call to <see cref="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Generate"/>.
            </param>
            <param name="dcOffset">
            The DC offset of the signal.
            </param>
            <param name="signal">
            The signal to generate.
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingRate"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>6/25/2003 11:57:14 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.#ctor(System.Double,System.Int64,System.Double,NationalInstruments.Analysis.SignalGeneration.SignalCollection)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/> with the 
            specified sampling rate, number of samples, DC offset, and signals.
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The number of samples to return on each call to <see cref="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Generate"/>.
            </param>
            <param name="dcOffset">
            The DC offset of the signal.
            </param>
            <param name="signals">
            A collection of component signals from which to compose the generated signal. 
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    <paramref name="samplingRate"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>6/25/2003 11:57:32 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Reset">
            <summary>
            Resets the phase of the signal to its initial phase.
            </summary>
            <lastupdated>5/27/2003 1:41:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Generate">
            <summary>
            Generates the selected signal which must be a type that implements <see cref="T:NationalInstruments.Analysis.SignalGeneration.ISignal"/>.
            </summary>
            <returns>
            The generated waveform.
            </returns>
            <remarks>
            Call <see cref="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Generate"/> repeatedly to generate a continuous waveform. The class maintains phase information internally.
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <lastupdated>9/16/2008 11:33:06 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:40:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.DefaultSamplingRate">
            <summary>
            Gets the default sampling rate of the signal, in hertz.
            </summary>
            <value>
            The sampling rate that is used if none is specified, in hertz. The default value is 1000.0 Hz.
            </value>
            <lastupdated>6/25/2003 2:54:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.DefaultNumberOfSamples">
            <summary>
            Gets the default number of samples returned from each call to <see cref="M:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Generate"/>.
            </summary>
            <value>
            The number of samples that is used if none is specified. The default value is 128.
            </value>
            <lastupdated>6/25/2003 2:54:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.DefaultDCOffset">
            <summary>
            Gets the default DC offset of the signal.
            </summary>
            <value>
            The DC offset that is used if none is specified. The default value is 0.0.
            </value>
            <lastupdated>6/25/2003 2:54:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.SamplingRate">
            <summary>
            Gets or sets the sampling rate, in hertz.
            </summary>
            <value>
            The sampling rate, in hertz. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.DefaultSamplingRate"/>.
            </value>
            <exception cref="T:System.ArgumentException">
                <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.SamplingRate"/> is less than or equal to zero.
            </exception>
            <lastupdated>5/27/2003 1:40:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.NumberOfSamples">
            <summary>
            Gets or sets the number of samples in the waveform.
            </summary>
            <value>
            The number of samples in the waveform. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.DefaultNumberOfSamples"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.NumberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.NumberOfSamples"/> is less than or equal to zero.
            </exception>
            <lastupdated>5/27/2003 1:40:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.DCOffset">
            <summary>
            Gets or sets the DC offset of the waveform.
            </summary>
            <value>
            The DC offset of the waveform. The default is 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.DefaultDCOffset"/>.
            </value>
            <lastupdated>6/25/2003 11:55:23 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals">
            <summary>
            Gets the collection of signals in the signal generator.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalCollection"/> that contains instances of classes that implement <see cref="T:NationalInstruments.Analysis.SignalGeneration.ISignal"/>.
            </value>
            <remarks>
            You can use this property to add signals that implement the <see cref="T:NationalInstruments.Analysis.SignalGeneration.ISignal"/> interface to the 
            <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/> class for composite signal generation.
            </remarks>
            <example>
            This example shows how you can add signals that implement the <see cref="T:NationalInstruments.Analysis.SignalGeneration.ISignal"/> interface to the 
            <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/> class for composite signal generation.
            <code lang="C#">
            NationalInstruments.Analysis.SignalGeneration.SignalGenerator signalGen;
            signalGen.Signals.Add(new SineSignal(1000.0,1.0,0.0));
            signalGen.Signals.Add(new SineSignal(5000.0,5.0,0.0));
            signalGen.Signals.Add(new WhiteNoiseSignal(1.0));
            signalGen.Generate();
            </code>
            	<code lang="VB.NET">
            Dim signalGen As NationalInstruments.Analysis.SignalGeneration.SignalGenerator
            signalGen.Signals.Add(new SineSignal(1000.0,1.0,0.0))
            signalGen.Signals.Add(new SineSignal(5000.0,5.0,0.0))
            signalGen.Signals.Add(new WhiteNoiseSignal(1.0))
            signalGen.Generate()
            </code>
            </example>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <lastupdated>9/16/2008 11:32:53 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.SineSignal">
            <summary>Generates a sine signal.  
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            You can use this class alone to generate a sine signal or you can
            add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            </remarks>
            <example>
            This example shows how you can use this class alone to generate a sine signal or
            add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            <code lang="VB.NET">
            ' Use SineSignal alone
            Dim sine As SineSignal = New SineSignal(1000.0, 1.0, 0.0)
            sine.Generate(1000.0, 256)
             
            ' Use SineSignal and SignalGenerator to generate a composite signal
            Dim sigGen As SignalGenerator = New SignalGenerator(1000.0, 256)
            sigGen.Signals.Add(New SineSignal(1000.0, 1.0, 0.0))
            sigGen.Signals.Add(New WhiteNoiseSignal(0.1))
            sigGen.Generate()
            </code>
            	<code lang="C#">
            // Use SineSignal alone
            SineSignal sine = new SineSignal(1000.0,1.0,0.0);            
            sine.Generate(1000.0,256);
             
            // Use SineSignal and SignalGenerator to generate a composite signal
            SignalGenerator sigGen = new SignalGenerator(1000.0,256);
            sigGen.Signals.Add(new SineSignal(1000.0,1.0,0.0));
            sigGen.Signals.Add(new WhiteNoiseSignal(0.1));
            sigGen.Generate();
            </code>
            </example>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
                <package name="Professional"/>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/16/2008 11:33:42 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/>.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>7/10/2003 5:23:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.#ctor(System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> with the 
            specified frequency.
            </summary>
            <param name="frequency">
            The frequency of the resulting sine wave signal, in hertz.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the sequence <format type="italics">Y</format> represents the sine wave, the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method generates the pattern according to the following formula:
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = <format type="italics">a</format> * sin(phase<format type="italics"><format type="subscript">i</format></format>)
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            phase<format type="italics"><format type="subscript">i</format></format> = initial phase + 360.0<format type="italics">fi</format>, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format> represents the <paramref name="frequency"/> in normalized units of cycles/sample, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            initial phase represents the phase in if the reset phase is <see langword="true"/>, or 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            initial phase represents the phase out from the previous execution of this instance if the reset phase is <see langword="false"/>.
            </description>
            		</item>
            	</list>
            	<para>
            The <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method is reentrant, so you can use it to simulate a continuous acquisition from a sine wave function generator. If the input control reset phase is <see langword="false"/>, subsequent calls to a specific instance of the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method produce the output sine wave array containing the next samples of a sine wave.
            </para>
            	<para>
            Because the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method is a reentrant method, when the reset phase is set to <see langword="false"/>, the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method uses the phase out value as its new phase in the next time the method executes. 
            </para>
            </remarks>
            <lastupdated>6/20/2003 2:58:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.#ctor(System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> with the 
            specified frequency and amplitude.
            </summary>
            <param name="frequency">
            The frequency of the resulting sine wave signal, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the resulting sine wave signal.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the sequence <format type="italics">Y</format> represents the sine wave, the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method generates the pattern according to the following formula:
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = <format type="italics">a</format> * sin(phase<format type="italics"><format type="subscript">i</format></format>)
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            phase<format type="italics"><format type="subscript">i</format></format> = initial phase + 360.0<format type="italics">fi</format>, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format> represents the <paramref name="frequency"/> in normalized units of cycles/sample, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            initial phase represents the phase in if the reset phase is <see langword="true"/>, or 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            initial phase represents the phase out from the previous execution of this instance if the reset phase is <see langword="false"/>.
            </description>
            		</item>
            	</list>
            	<para>
            The <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method is reentrant, so you can use it to simulate a continuous acquisition from a sine wave function generator. If the input control reset phase is <see langword="false"/>, subsequent calls to a specific instance of the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method produce the output sine wave array containing the next samples of a sine wave.
            </para>
            	<para>
            Because the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method is a reentrant method, when the reset phase is set to <see langword="false"/>, the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method uses the phase out value as its new phase in the next time the method executes. 
            </para>
            </remarks>
            <lastupdated>6/20/2003 2:58:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> with the 
            specified frequency, amplitude, and phase.
            </summary>
            <param name="frequency">
            The frequency of the resulting sine wave signal, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the resulting sine wave signal.
            </param>
            <param name="phase">
            The initial phase of the resulting sine wave signal, in degrees.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the sequence <format type="italics">Y</format> represents the sine wave, the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method generates the pattern according to the following formula:
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = <format type="italics">a</format> * sin(<paramref name="phase"/><format type="italics"><format type="subscript">i</format></format>)
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents <paramref name="amplitude"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents the number of samples,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<paramref name="phase"/><format type="italics"><format type="subscript">i</format></format> = initial <paramref name="phase"/> + 360.0<format type="italics">fi</format>, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format> represents the <paramref name="frequency"/> in normalized units of cycles/sample, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            initial <paramref name="phase"/> represents the <paramref name="phase"/> in if the reset <paramref name="phase"/> is <see langword="true"/>, or 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            initial <paramref name="phase"/> represents the <paramref name="phase"/> out from the previous execution of this instance if the reset <paramref name="phase"/> is <see langword="false"/>.
            </description>
            		</item>
            	</list>
            	<para>
            The <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method is reentrant, so you can use it to simulate a continuous acquisition from a sine wave function generator. If the input control reset phase is <see langword="false"/>, subsequent calls to a specific instance of the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method produce the output sine wave array containing the next samples of a sine wave.
            </para>
            	<para>
            Because the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method is a reentrant method, when the reset <paramref name="phase"/> is set to <see langword="false"/>, the <see cref="T:NationalInstruments.Analysis.SignalGeneration.SineSignal"/> method uses the <paramref name="phase"/> out value as its new <paramref name="phase"/> in the next time the method executes. 
            </para>
            </remarks>
            <lastupdated>6/20/2003 2:58:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.Reset">
            <summary>
            Resets the phase of the signal to its initial value.
            </summary>
            <lastupdated>6/20/2003 3:29:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.Generate(System.Double,System.Int64)">
            <summary>
            Generates an array containing a sine waveform. 
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the sine waveform.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the sequence <format type="italics">Y</format> represents the sine wave, the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.Generate(System.Double,System.Int64)"/> method generates the pattern according to the following formula:
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = <format type="italics">a</format> * sin(phase<format type="italics"><format type="subscript">i</format></format>)
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents <paramref name="numberOfSamples"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Generate.gif"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            phase<format type="subscript">0</format> = the value of the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Phase"/> property when 
            <see cref="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.Generate(System.Double,System.Int64)"/> is called,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format><format type="subscript">signal</format> represents the frequency of the triangle signal, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format><format type="subscript">sampling</format> is the sampling rate.
            </description>
            		</item>
            	</list>
            	<para>
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.Generate(System.Double,System.Int64)"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.Generate(System.Double,System.Int64)"/> 
            can be called successively to generate a continuous sine wave <paramref name="numberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/8/2004 5:42:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:42:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.DefaultFrequency">
            <summary>
            Gets the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.DefaultFrequency"/> of the signal, in hertz.
            </summary>
            <value>
            The frequency that is used if none is specified, in hertz. The default value is 7.8125 Hz.
            </value>
            <lastupdated>6/25/2003 2:55:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.DefaultAmplitude">
            <summary>
            Gets the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.DefaultAmplitude"/> of the signal.
            </summary>
            <value>
            The amplitude that is used if none is specified. The default value is 1.0.
            </value>
            <lastupdated>6/25/2003 2:55:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.DefaultPhase">
            <summary>
            Gets the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.DefaultPhase"/> of the signal, in degrees.
            </summary>
            <value>
            The phase that is used if none is specified, in degrees. The default value is 0.0 degrees.
            </value>
            <lastupdated>6/25/2003 2:55:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Frequency">
            <summary>
            Gets or sets the waveform <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Frequency"/>, in hertz.
            </summary>
            <value>
            The <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Frequency"/> of the waveform, in hertz. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.DefaultFrequency"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Frequency"/> is less than or equal to zero.
            </exception>
            <remarks>
            This value specifies the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Frequency"/> of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:42:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Amplitude">
            <summary>
            Gets or sets the waveform <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Amplitude"/>.
            </summary>
            <value>
            The <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Amplitude"/> of the waveform. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.DefaultAmplitude"/>.
            </value>
            <remarks>
            This value specifies the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Amplitude"/> of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:42:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Phase">
            <summary>
            Gets or sets the waveform <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Phase"/>, in degrees.
            </summary>
            <value>
            The <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Phase"/> of the waveform, in degrees. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.DefaultPhase"/>.
            </value>
            <remarks>
            This value specifies the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SineSignal.Phase"/> of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SineSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:43:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.SquareSignal">
            <summary>Generates a square signal.  
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            You can use this class alone to generate a square signal or you can 
            add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            </remarks>
            <example>
            This example shows how you can use this class alone to generate a square signal or add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            <code lang="VB.NET">
            ' Use SquareSignal alone
            Dim square As SquareSignal = New SquareSignal(1000.0, 1.0, 0.0, 50.0)
            square.Generate(1000.0, 256)
             
            ' Use SquareSignal and SignalGenerator to generate a composite signal
            Dim sigGen As SignalGenerator = New SignalGenerator(1000.0, 256)
            sigGen.Signals.Add(New SquareSignal(1000.0, 1.0, 0.0, 50.0))
            sigGen.Signals.Add(New WhiteNoiseSignal(0.1))
            sigGen.Generate()
            </code>
            	<code lang="C#">
            // Use SquareSignal alone
            SquareSignal square = new SquareSignal(1000.0,1.0,0.0,50.0); 
            square.Generate(1000.0,256);
             
            // Use SquareSignal and SignalGenerator to generate a composite signal
            SignalGenerator sigGen = new SignalGenerator(1000.0,256);
            sigGen.Signals.Add(new SquareSignal(1000.0,1.0,0.0,50.0));
            sigGen.Signals.Add(new WhiteNoiseSignal(0.1));
            sigGen.Generate();
            </code>
            </example>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
                <package name="Professional"/>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/16/2008 11:33:48 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SquareSignal"/>.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:21:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.#ctor(System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SquareSignal"/> with the 
            specified frequency.
            </summary>
            <param name="frequency">
            The frequency of the resulting square wave signal, in hertz.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:22:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.#ctor(System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SquareSignal"/> with the 
            specified frequency and amplitude.
            </summary>
            <param name="frequency">
            The frequency of the resulting square wave signal, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the resulting square signal.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:22:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SquareSignal"/> with the 
            specified frequency, amplitude, and phase.
            </summary>
            <param name="frequency">
            The frequency of the resulting square wave signal, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the resulting square signal.
            </param>
            <param name="phase">
            The initial phase of the resulting square waveform, in degrees.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:22:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SquareSignal"/> with the 
            specified frequency, amplitude, phase, and duty cycle.
            </summary>
            <param name="frequency">
            The frequency of the resulting square wave signal, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the resulting square signal.
            </param>
            <param name="phase">
            The initial phase of the resulting square waveform, in degrees.
            </param>
            <param name="dutyCycle">
            The duty cycle, in percent, of the generated square wave signal.  This parameter must
            be in the range 0.0 to 100.0, inclusive.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="frequency"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="dutyCycle"/> is not between 0.0 and 100.0.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:23:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Reset">
            <summary>
            Resets the phase of the signal to its initial value.
            </summary>
            <lastupdated>6/20/2003 3:29:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)">
            <summary>
            Generates an array containing a square waveform. 
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the square waveform.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="samplingRate"/> is less than or equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    <paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
                <para>
            -or
            </para>
                <para>
                    <paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the sequence <format type="italics">Y</format> represents the square signal, the <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> method generates the pattern according to the following formula:
            <para indent="true">
                    <format type="italics">y<format type="subscript">i</format></format> = <format type="italics">a</format> * square(phase<format type="italics"><format type="subscript">i</format></format>)
            </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">a</format> represents the amplitude,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">n</format> represents <paramref name="numberOfSamples"/>,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <image src="Square.gif"/>
                        </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">p</format> = phase<format type="italics"><format type="subscript">i</format></format> modulo 360.0, 
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <image src="Generate.gif"/>,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            phase<format type="subscript">0</format> = the value of the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Phase"/> property when 
            <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> is called,
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">f</format><format type="subscript">signal</format> represents the frequency of the triangle signal, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
                            <format type="italics">f</format><format type="subscript">sampling</format> is the sampling rate.
            </description>
                    </item>
                </list>
                <para>
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> 
            can be called successively to generate a continuous square wave <paramref name="numberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>7/8/2004 5:45:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:45:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultFrequency">
            <summary>
            Gets the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultFrequency"/> of the signal, in hertz.
            </summary>
            <value>
            The frequency that is used if none is specified, in hertz. The default value is 7.8125 Hz.
            </value>
            <lastupdated>6/25/2003 2:55:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultAmplitude">
            <summary>
            Gets the default amplitude of the signal.
            </summary>
            <value>
            The amplitude that is used if none is specified. The default value is 1.0.
            </value>
            <lastupdated>6/25/2003 2:55:40 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultPhase">
            <summary>
            Gets the default phase of the signal, in degrees.
            </summary>
            <value>
            The phase that is used if none is specified, in degrees. The default value is 0.0 degrees.
            </value>
            <lastupdated>6/25/2003 2:56:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultDutyCycle">
            <summary>
            Gets the default duty cycle of the signal, in percent.
            </summary>
            <value>
            The duty cycle that is used if none is specified, in percent. The default value is 50.0 percent.
            </value>
            <lastupdated>6/25/2003 2:55:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Frequency">
            <summary>
            Gets or sets the waveform frequency, in hertz.
            </summary>
            <value>
            The frequency of the waveform, in hertz. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultFrequency"/>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <see cref="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Frequency"/> is less than or equal to zero.
            </exception>
            <remarks>
            This value specifies the frequency of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:45:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Amplitude">
            <summary>
            Gets or sets the waveform amplitude.
            </summary>
            <value>
            The amplitude of the waveform. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultAmplitude"/>.
            </value>
            <remarks>
            This value specifies the amplitude of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:44:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Phase">
            <summary>
            Gets or sets the waveform phase, in degrees.
            </summary>
            <value>
            The phase of the waveform, in degrees. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultPhase"/>.
            </value>
            <remarks>
            This value specifies the phase of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:45:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DutyCycle">
            <summary>
            Gets or sets the waveform duty cycle, in percent.
            </summary>
            <value>
            The duty cycle of the waveform, in percent. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DefaultDutyCycle"/>.
            This value must be in the range 0.0 to 100.0, inclusive.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <see cref="P:NationalInstruments.Analysis.SignalGeneration.SquareSignal.DutyCycle"/> must be between 0.0 and 100.0.
            </exception>
            <remarks>
            This value specifies the duty cycle of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.SquareSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:45:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.TriangleSignal">
            <summary>Generates a triangle signal.  
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            You can use this class alone to generate a triangle signal or you can
            add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            </remarks>
            <example>
            This example shows how you can use this class alone to generate a triangle signal or add it to the 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            <code lang="VB.NET">
            ' Use TriangleSignal alone
            Dim triangle As TriangleSignal = New TriangleSignal(1000.0, 1.0, 0.0)
            triangle.Generate(1000.0, 256)
             
            ' Use TriangleSignal and SignalGenerator to generate a composite signal
            Dim sigGen As SignalGenerator = New SignalGenerator(1000.0, 256)
            sigGen.Signals.Add(New TriangleSignal(1000.0, 1.0, 0.0))
            sigGen.Signals.Add(New WhiteNoiseSignal(0.1))
            sigGen.Generate()
            </code>
            	<code lang="C#">
            // Use TriangleSignal alone
            TriangleSignal triangle = new TriangleSignal(1000.0,1.0,0.0); 
            triangle.Generate(1000.0,256);
             
            // Use TriangleSignal and SignalGenerator to generate a composite signal
            SignalGenerator sigGen = new SignalGenerator(1000.0,256);
            sigGen.Signals.Add(new TriangleSignal(1000.0,1.0,0.0));
            sigGen.Signals.Add(new WhiteNoiseSignal(0.1));
            sigGen.Generate();
            </code>
            </example>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
                <package name="Professional"/>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/16/2008 11:33:57 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.TriangleSignal"/>.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:24:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.#ctor(System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.TriangleSignal"/> with the 
            specified frequency.
            </summary>
            <param name="frequency">
            The frequency of the resulting triangle wave signal, in hertz.
            </param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:24:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.#ctor(System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.TriangleSignal"/> with the 
            specified frequency and amplitude.
            </summary>
            <param name="frequency">
            The frequency of the resulting triangle wave signal, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the resulting triangle wave signal.
            </param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:25:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.TriangleSignal"/> with the 
            specified frequency, amplitude, and phase.
            </summary>
            <param name="frequency">
            The frequency of the resulting triangle wave signal, in hertz.
            </param>
            <param name="amplitude">
            The amplitude of the resulting triangle wave signal.
            </param>
            <param name="phase">
            The phase of the resulting triangle wave signal, in degrees.
            </param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="frequency"/> is less than or equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/20/2003 3:25:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Reset">
            <summary>
            Resets the phase of the signal to its initial value.
            </summary>
            <lastupdated>6/20/2003 3:29:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)">
            <summary>
            Generates an array containing a triangle waveform. 
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the triangle waveform.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            If the sequence <format type="italics">Y</format> represents the triangle signal, the <see cref="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)"/> method generates the pattern according to the following formula:
            <para indent="true">
            		<format type="italics">y<format type="subscript">i</format></format> = <format type="italics">a</format> * tri(phase<format type="italics"><format type="subscript">i</format></format>)
            </para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">i</format> = 0, 1,..., <format type="italics">n</format><entity value="ndash"/>1,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">a</format> represents the amplitude,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">n</format> represents <paramref name="numberOfSamples"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="TriangleSignal.gif"/>,
            			</description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">p</format> = phase<format type="italics"><format type="subscript">i</format></format> modulo 360.0, 
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<image src="Generate.gif"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            phase<format type="subscript">0</format> = the value of the <see cref="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Phase"/> property when 
            <see cref="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)"/> is called,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format><format type="subscript">signal</format> represents the frequency of the triangle signal, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">f</format><format type="subscript">sampling</format> is the sampling rate.
            </description>
            		</item>
            	</list>
            	<para>
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)"/> method updates the value of 
            the <see cref="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Phase"/> property to the phase 
            of the point after the last one returned. This means that <see cref="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)"/> 
            can be called successively to generate a continuous triangle wave <paramref name="numberOfSamples"/> points 
            at a time.
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/23/2003 10:54:42 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:46:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.DefaultFrequency">
            <summary>
            Gets the <see cref="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.DefaultFrequency"/> of the signal, in hertz.
            </summary>
            <value>
            The frequency that is used if none is specified, in hertz. The default value is 7.8125 Hz.
            </value>
            <lastupdated>6/25/2003 2:56:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.DefaultAmplitude">
            <summary>
            Gets the default amplitude of the signal.
            </summary>
            <value>
            The amplitude that is used if none is specified. The default value is 1.0.
            </value>
            <lastupdated>6/25/2003 2:56:11 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.DefaultPhase">
            <summary>
            Gets the default phase of the signal, in degrees.
            </summary>
            <value>
            The phase that is used if none is specified, in degrees. The default value is 0.0 degrees.
            </value>
            <lastupdated>6/25/2003 2:56:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Frequency">
            <summary>
            Gets or sets the waveform frequency, in hertz.
            </summary>
            <value>
            The frequency of the waveform, in hertz. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.DefaultFrequency"/>.
            </value>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Frequency"/> is less than or equal to zero.
            </exception>
            <remarks>
            This value specifies the frequency of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:47:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Amplitude">
            <summary>
            Gets or sets the waveform amplitude.
            </summary>
            <value>
            The amplitude of the waveform. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.DefaultAmplitude"/>.
            </value>
            <remarks>
            This value specifies the amplitude of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:47:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Phase">
            <summary>
            Gets or sets the waveform phase, in degrees.
            </summary>
            <value>
            The phase of the waveform, in degrees. The default is <see cref="P:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.DefaultPhase"/>.
            </value>
            <remarks>
            This value specifies the phase of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.TriangleSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:47:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal">
            <summary>Generates a uniform noise signal, distributed uniformly between 0.0 and 1.0.  
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            You can use this class alone to generate a uniform noise signal or you can
            add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            </remarks>
            <example>
            This example shows how you can use this class alone to generate a uniform noise signal or add it to the 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            <code lang="VB.NET">
            ' Use UniformNoiseSignal alone
            Dim uniformNoise As UniformNoiseSignal= New UniformNoiseSignal(25)
            uniformNoise.Generate(1000.0, 256)
             
            ' Use UniformNoiseSignal and SignalGenerator to generate a composite signal
            Dim sigGen As SignalGenerator = New SignalGenerator(1000.0, 256)
            sigGen.Signals.Add(New SineSignal(1000.0, 1.0, 0.0))
            sigGen.Signals.Add(New UniformNoiseSignal(25))
            sigGen.Generate()
            </code>
            	<code lang="C#">
            // Use UniformNoiseSignal alone
            UniformNoiseSignal uniformNoise = new UniformNoiseSignal(25);        
            uniformNoise.Generate(1000.0,256);
             
            // Use UniformNoiseSignal and SignalGenerator to generate a composite signal
            SignalGenerator sigGen = new SignalGenerator(1000.0,256);
            sigGen.Signals.Add(new SineSignal(1000.0,1.0,0.0));
            sigGen.Signals.Add(new UniformNoiseSignal(25));
            sigGen.Generate();
            </code>
            </example>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
                <package name="Professional"/>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/16/2008 11:34:17 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal.#ctor">
            <summary>
            Creates a uniform noise signal.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>6/25/2003 11:52:01 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal.#ctor(System.Int32)">
            <summary>
            Creates a uniform noise signal with the specified seed.
            </summary>
            <param name="seed">
            The seed value for the random number generator.  This parameter must be greater than or
            equal to zero.  
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <lastupdated>6/25/2003 11:52:36 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal.Reset">
            <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
            <lastupdated>5/27/2003 1:48:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal.Generate(System.Double,System.Int64)">
            <summary>
            Generates an array containing a uniform noise waveform. 
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz. This method ignores this parameter.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the uniform noise waveform.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            	<para>
            -or
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 12:32:23 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:47:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.UniformNoiseSignal.Seed">
            <summary>Gets the seed of the resulting uniform noise waveform.
            </summary>
            <value>
            The seed value. The default value is <entity value="ndash"/>1.
            </value>
            <lastupdated>6/25/2003 11:51:13 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal">
            <summary>Generates a white noise signal.  
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            You can use this class alone to generate a white noise signal or you can
            add it to the <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            </remarks>
            <example>
            This example shows how you can use this class alone to generate a white noise signal or add it to the 
            <see cref="P:NationalInstruments.Analysis.SignalGeneration.SignalGenerator.Signals"/>
            collection of a <see cref="T:NationalInstruments.Analysis.SignalGeneration.SignalGenerator"/>
            class to generate it as part of a composite signal.
            <code lang="VB.NET">
            ' Use WhiteNoiseSignal alone
            Dim whiteNoise As WhiteNoiseSignal = New WhiteNoiseSignal(0.1, 25)
            whiteNoise.Generate(1000.0, 256)
             
            ' Use WhiteNoiseSignal and SignalGenerator to generate a composite signal
            Dim sigGen As SignalGenerator = New SignalGenerator(1000.0, 256)
            sigGen.Signals.Add(New SineSignal(1000.0, 1.0, 0.0))
            sigGen.Signals.Add(New WhiteNoiseSignal(0.1, 25))
            sigGen.Generate() 
            </code>
            	<code lang="C#">
            // Use WhiteNoiseSignal alone
            WhiteNoiseSignal whiteNoise = new WhiteNoiseSignal(0.1,25);            
            whiteNoise.Generate(1000.0,256);
             
            // Use WhiteNoiseSignal and SignalGenerator to generate a composite signal
            SignalGenerator sigGen = new SignalGenerator(1000.0,256);
            sigGen.Signals.Add(new SineSignal(1000.0,1.0,0.0));
            sigGen.Signals.Add(new WhiteNoiseSignal(0.1,25));
            sigGen.Generate(); 
            </code>
            </example>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <packages>
                <package name="Professional"/>
                <package name="Enterprise"/>
            </packages>
            <lastupdated>9/16/2008 11:34:23 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.#ctor">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal"/> using a seed 
            derived from the system time.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/23/2003 9:25:17 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.#ctor(System.Double)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal"/> with the 
            specified amplitude, using a seed derived from the system time.
            </summary>
            <param name="amplitude">
            The amplitude of the resulting white noise signal.
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Generate(System.Double,System.Int64)"/> method. 
            </remarks>
            <lastupdated>6/23/2003 9:25:45 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.#ctor(System.Double,System.Int32)">
            <summary>
            Creates a <see cref="T:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal"/> with the 
            specified amplitude and seed.
            </summary>
            <param name="amplitude">
            The amplitude of the resulting white noise signal.
            </param>
            <param name="seed">
            The seed value for the random number generator.  This parameter must be greater than or
            equal to zero.  
            </param>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>
            If the <paramref name="seed"/> is zero, the system timer is used to generate a <paramref name="seed"/>; otherwise, this value is used as the <paramref name="seed"/>.
            </para>
            	<para>For information on how the signal is generated, refer to the <see cref="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Generate(System.Double,System.Int64)"/> method. </para>
            </remarks>
            <lastupdated>11/21/2012 10:32:48 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Reset">
            <summary>
            Restarts the random sequence using the same initial seed value.
            </summary>
            <lastupdated>3/6/2006 10:21:49 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Generate(System.Double,System.Int64)">
            <summary>
            Generates an array containing a white noise waveform. 
            </summary>
            <param name="samplingRate">
            The sampling rate, in hertz. This method ignores this parameter.
            </param>
            <param name="numberOfSamples">
            The desired number of samples.
            </param>
            <returns>
            The array containing the white noise waveform.
            </returns>
            <exception cref="T:NationalInstruments.Analysis.AnalysisException">
            The internal memory state was not initialized correctly.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="samplingRate"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="numberOfSamples"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The <see cref="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Generate(System.Double,System.Int64)"/> method generates the pseudorandom sequence using a modified version of the Very-Long-Cycle random number generator algorithm. The pseudorandom number generator implements a triple-seeded linear congruential algorithm. Given that the probability density function, <format type="italics">f</format>(<format type="italics">x</format>), of the uniformly distributed White Noise Signal is
            <para indent="true">
            		<image src="WhiteNoiseSignal1.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">a</format> is the absolute value of the specified amplitude,
            </description>
            		</item>
            	</list>
            and that you can compute the expected values, <format type="italics">E</format>{·}, using the following formula:
            <para indent="true">
            		<image src="WhiteNoiseSignal2.gif"/>.
            </para>
            Then the expected mean value, µ, and the expected standard deviation value, <entity value="sigma"/>, of the pseudorandom sequence are
            <para indent="true">
            		<entity value="mu"/> = <format type="italics">E</format>{<format type="italics">x</format>} = 0
            </para>
            	<para indent="true">
            		<image src="WhiteNoiseSignal3.gif"/>.
            </para>
            The pseudorandom sequence produces approximately 2<format type="superscript">90</format> samples before the pattern repeats itself. 
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>9/27/2005 12:32:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            A string that represents the value of this instance.
            </returns>
            <lastupdated>7/8/2004 5:49:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Seed">
            <summary>Returns the <see cref="P:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Seed"/> of the resulting white noise waveform.
            </summary>
            <value>
            By default, <see cref="P:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Seed"/> is derived from the 
            system time.
            </value>
            <lastupdated>6/20/2006 3:16:36 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Amplitude">
            <summary>
            Gets or sets the waveform amplitude.
            </summary>
            <value>
            The amplitude of the waveform. The default value is 1.0.
            </value>
            <remarks>
            This value specifies the amplitude of the waveform that <see cref="M:NationalInstruments.Analysis.SignalGeneration.WhiteNoiseSignal.Generate(System.Double,System.Int64)"/> returns.
            </remarks>
            <lastupdated>5/27/2003 1:48:32 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.Math.SpecialFunctions">
            <summary>Provides a set of methods that implement special functions.
            </summary>
            <threadsafety safety="unsafe"/>
            <packages>
            	<package name="Enterprise"/>
            </packages>
            <remarks>
            Placeholder
            </remarks>
            <lastupdated>11/3/2011 2:49:29 PM</lastupdated>
            <updatedby>Staci Heien</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.#ctor">
            <exclude/>
            <lastupdated>9/12/2005 12:14:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.#cctor">
            <exclude/>
            <lastupdated>9/12/2005 12:14:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Bessel1st(System.Double,System.Double)">
            <summary>
            Computes the Bessel function J(r,x) of the first kind of fractional order r.
            </summary>
            <param name="order">
            The order of the function.
            </param>
            <param name="input">
            The point at which the Bessel function is evaluated.
            </param>
            <returns>
            The value of the Bessel function evaluated at <paramref name="input"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The Bessel function is defined as follows:
            <para indent="true">
            		<image src="Bessel1stform_1.png"/>
            	</para>
            	<para>
            The Bessel function is a solution of the following differential equation:
            </para>
            	<para indent="true">
            		<image src="Bessel1stform_2.png"/>
            	</para>
            	<para>
            For any integer value of order <format type="italics">r</format>, the function is defined for all real 
            values of <format type="italics">x</format>. Otherwise, the function is defined for nonnegative real values 
            of <format type="italics">x</format>.
            </para>
            </remarks>
            <lastupdated>9/12/2005 11:03:52 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Bessel2nd(System.Double,System.Double)">
            <summary>
            Computes the Bessel function Y(r,x) of the second kind of fractional order r, also known as the Neumann function.
            </summary>
            <param name="order">
            The order of the function.
            </param>
            <param name="input">
            The point at which the Bessel function is evaluated.
            </param>
            <returns>
            The value of the Bessel function evaluated at <paramref name="input"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The Bessel function of the second kind of order <format type="italics">r</format> is defined as follows: 
            <para indent="true">
            		<image src="Bessel2ndform_3.png"/>
            	</para>
            	<para>
            where <image src="Bessel2ndform_4.png"/> is the Bessel function of the first kind. The Bessel function 
            of the second kind is also a solution of the following differential equation: 
            </para>
            	<para indent="true">
            		<image src="Bessel2ndform_2.png"/>
            	</para>
            	<para>
            For any real value of order <format type="italics">r</format>, the function is defined for positive real 
            values of <format type="monospace">x</format>.
            </para>
            </remarks>
            <lastupdated>9/12/2005 11:04:42 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.SphericalBessel1st(System.Int32,System.Double)">
            <summary>
            Computes the spherical Bessel function of the first kind of order n.
            </summary>
            <param name="order">
            The order of the function.
            </param>
            <param name="input">
            The point at which the Bessel function is evaluated.
            </param>
            <returns>
            The value of the Bessel function evaluated at <paramref name="input"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The spherical Bessel function of the first kind of order <format type="italics">n</format> is a solution 
            to the following differential equation:
            <para indent="true">
            		<image src="SphBessel1stform_5.png"/>
            	</para>
            	<para>
            The following equation shows the relationship of the <see cref="M:NationalInstruments.Analysis.Math.SpecialFunctions.SphericalBessel1st(System.Int32,System.Double)"/> method to the 
            <see cref="M:NationalInstruments.Analysis.Math.SpecialFunctions.Bessel1st(System.Double,System.Double)"/> method: 
            </para>
            	<para indent="true">
            		<image src="SphBessel1stform_6.png"/>
            	</para>
            	<para>
            For any integer value of order <format type="italics">n</format>, the function is defined for nonnegative 
            real values of <format type="italics">x</format>.
            </para>
            </remarks>
            <lastupdated>9/12/2005 12:56:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.SphericalBessel2nd(System.Int32,System.Double)">
            <summary>
            Computes the spherical Bessel function of the second kind of order n.
            </summary>
            <param name="order">
            The order of the function.
            </param>
            <param name="input">
            The point at which the Bessel function is evaluated.
            </param>
            <returns>
            The value of the Bessel function evaluated at <paramref name="input"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The spherical Bessel function of the second kind of order <format type="italics">n</format> is a solution to the following differential equation: 
            <para indent="true">
            		<image src="SphBessel2ndform_5.png"/>
            	</para>
            	<para>
            The following equation shows the relationship of the <see cref="M:NationalInstruments.Analysis.Math.SpecialFunctions.SphericalBessel2nd(System.Int32,System.Double)"/> 
            method to the <see cref="M:NationalInstruments.Analysis.Math.SpecialFunctions.Bessel2nd(System.Double,System.Double)"/> method. 
            </para>
            	<para indent="true">
            		<image src="SphBessel2ndform_7.png"/>
            	</para>
            	<para>
            For any integer value of order <format type="italics">n</format>, the function is defined for nonnegative real values of <format type="italics">x</format>.
            </para>
            </remarks>
            <lastupdated>9/12/2005 12:59:40 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.ModifiedBessel1st(System.Double,System.Double)">
            <summary>
            Computes the modified Bessel function of the first kind of order r.
            </summary>
            <param name="order">
            The order of the function.
            </param>
            <param name="input">
            The point at which the Bessel function is evaluated.
            </param>
            <returns>
            The value of the Bessel function evaluated at <paramref name="input"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The modified Bessel function of the first kind of order <format type="italics">r</format> is defined as follows: 
            <para indent="true">
            		<image src="ModBessel1stform_8.png"/>
            	</para>
            	<para>
            which is a solution of the following differential equation:
            </para>
            	<para indent="true">
            		<image src="ModBessel1stform_9.png"/>
            	</para>
            	<para>
            For any integer value of order <format type="italics">r</format>, the function is defined for all real 
            values of <format type="italics">x</format>. For any noninteger value of order <format type="italics">r</format>, the function is defined 
            for nonnegative real values of <format type="italics">x</format>.
            </para>
            </remarks>
            <lastupdated>9/12/2005 12:06:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.ModifiedBessel2nd(System.Int32,System.Double)">
            <summary>
            Computes the modified Bessel function of the second kind of integer order n.
            </summary>
            <param name="order">
            The order of the function.
            </param>
            <param name="input">
            The point at which the Bessel function is evaluated.
            </param>
            <returns>
            The evaluated Bessel function value at <paramref name="input"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The modified Bessel function of the second kind of order <format type="italics">n</format> is defined as follows: 
            <para indent="true">
            		<image src="ModBessel2ndform_10.png"/>
            	</para>
            	<para>
            which is a solution of the following differential equation: 
            </para>
            	<para indent="true">
            		<image src="ModBessel2ndform_9.png"/>
            	</para>
            	<para>
            For any integer value of order <format type="italics">n</format>, the function is defined for 
            nonnegative real values of <format type="italics">x</format>.
            </para>
            </remarks>
            <lastupdated>9/12/2005 12:11:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Beta(System.Double,System.Double)">
            <summary>
            Computes the beta function.
            </summary>
            <param name="input">
            The first input parameter of the beta function.
            </param>
            <param name="inputY">
            The second input parameter of the beta function.
            </param>
            <returns>
            The evaluated beta function value.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The beta function is defined as follows:
            <para indent="true">
            		<image src="Betaform_11.png"/>
            	</para>
            	<para>
            The beta function relates to the gamma function through the following formula: 
            </para>
            	<para indent="true">
            		<image src="Betaform_12.png"/>
            	</para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.Math.SpecialFunctions.IncompleteBeta(System.Double,System.Double,System.Double)" crefType="Unqualified"/>
            <lastupdated>6/22/2009 6:19:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.IncompleteBeta(System.Double,System.Double,System.Double)">
            <summary>
            Computes the incomplete beta function.
            </summary>
            <param name="inputX">
            The first input parameter of the incomplete beta function.
            </param>
            <param name="inputY">
            The second input parameter of the incomplete beta function.
            </param>
            <param name="upperLimit">
            The upper limit of the incomplete beta function.
            </param>
            <returns>
            The evaluated beta function value.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The incomplete beta function is defined as follows: 
            <para indent="true">
            		<image src="Betaform_13.png"/>
            	</para>
            </remarks>
            <seealso cref="M:NationalInstruments.Analysis.Math.SpecialFunctions.Beta(System.Double,System.Double)" crefType="Unqualified"/>
            <lastupdated>9/19/2009 3:09:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Factorial(System.Int32)">
            <summary>
            Computes the factorial of n.
            </summary>
            <param name="n">
            The input parameter.
            </param>
            <returns>
            The factorial of <paramref name="n"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The factorial of <paramref name="n"/> is defined as follows:
            <para indent="true">
            		<image src="Factform_45.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:40:36 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Gamma(System.Double)">
            <summary>
            Evaluates the gamma function.
            </summary>
            <param name="input">
            The point at which the gamma function is evaluated.
            </param>
            <returns>
            The value of the evaluated gamma function.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The gamma function is defined as follows:
            <para indent="true">
            		<image src="Gammaform_14.png"/>
            	</para>
            	<para>
            The following formula relates the gamma function to the factorial function: 
            </para>
            	<para indent="true">
            		<image src="Gammaform_15.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:30:57 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.IncompleteGamma(System.Double,System.Double)">
            <summary>
            Evaluates the incomplete gamma function.
            </summary>
            <param name="input">
            The point at which the gamma function is evaluated.
            </param>
            <param name="upperLimit">
            The upper limit of the incomplete gamma function.
            </param>
            <returns>
            The value of the incomplete gamma function.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The incomplete gamma function is defined as follows:
            <para indent="true">
            		<image src="Gammaform_16.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:45:04 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.ComplementaryIncompleteGamma(System.Double,System.Double)">
            <summary>
            Computes the complementary incomplete gamma function.
            </summary>
            <param name="input">
            The point at which the function is evaluated.
            </param>
            <param name="upperLimit">
            The upper limit of the incomplete gamma function.
            </param>
            <returns>
            The value of the evaluated complementary incomplete gamma function.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The complementary incomplete gamma function is defined as follows:
            <para indent="true">
            		<image src="GammaCform_17.png"/>
            	</para>
            	<para>
            The following equation relates the complement of the incomplete gamma function to the incomplete gamma function:
            </para>
            	<para indent="true">
            		<image src="GammaCform_18.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:14:40 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.LogarithmOfFactorial(System.Int32)">
            <summary>
            Computes the natural logarithm of n!.
            </summary>
            <param name="n">
            The input argument.
            </param>
            <returns>
            The logarithm of n!.
            </returns>
            <security condition="unmanagedcode"/>
            <lastupdated>9/12/2005 12:02:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.LogarithmOfCompleteGamma(System.Double)">
            <summary>
            Computes the natural logarithm of the complete gamma function.
            </summary>
            <param name="input">
            The point at which the function is evaluated.
            </param>
            <returns>
            The natural logarithm of the gamma function.
            </returns>
            <security condition="unmanagedcode"/>
            <lastupdated>9/12/2005 12:01:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Psi(System.Double)">
            <summary>
            Computes the digamma (Psi) function.
            </summary>
            <param name="input">
            The point at which the function is evaluated.
            </param>
            <returns>
            The value of the Psi function.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The Psi function is defined as follows:
            <para indent="true">
            		<image src="Psiform_19.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 12:13:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Stirling(System.Double)">
            <summary>
            Computes the Stirling approximation to the gamma function.
            </summary>
            <param name="input">
            The point at which the function is evaluated.
            </param>
            <returns>
            The value of the Stirling function at <paramref name="input"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <lastupdated>9/12/2005 12:59:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.GaussHyperGeometric(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the Gauss hypergeometric function.
            </summary>
            <param name="input">
            The point at which the function is evaluated.
            </param>
            <param name="a">
            The first parameter of the Gauss hypergeometric function.
            </param>
            <param name="b">
            The second parameter of the Gauss hypergeometric function.
            </param>
            <param name="c">
            The third parameter of the Gauss hypergeometric function.
            </param>
            <returns>
            The value of the Gauss hypergeometric function at <paramref name="input"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The Gauss hypergeometric function, GaussHG(<format type="italics">x</format>, <paramref name="a"/>, <paramref name="b"/>, <paramref name="c"/>), is a solution of the following differential equation:
            <para indent="true">
            		<image src="GaussHGform_20.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:41:04 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Kummer(System.Double,System.Double,System.Double)">
            <summary>
            Computes the Kummer function, also known as the confluent hypergeometric M function.
            </summary>
            <param name="input">
            The point at which the function is evaluated.
            </param>
            <param name="a">
            The numerator parameter.
            </param>
            <param name="b">
            The denominator parameter.
            </param>
            <returns>
            The value of the Kummer function at <paramref name="input"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The Kummer function is a solution of the following differential equation:
            <para indent="true">
            		<image src="Kummerform_21.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 12:01:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Tricomi(System.Double,System.Double,System.Double)">
            <summary>
            Computes the Tricomi function, which is also known as the associated confluent hypergeometric U function.
            </summary>
            <param name="input">
            The point at which the function is evaluated.
            </param>
            <param name="a">
            The first parameter of the Tricomi function.
            </param>
            <param name="b">
            The second parameter of the Tricomi function.
            </param>
            <returns>
            The value of the Tricomi function evaluated at <paramref name="input"/>.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The Tricomi function U(x, <paramref name="a"/>, <paramref name="b"/>) is a solution of the following differential equation:
            <para indent="true">
            		<image src="Tricomiform_22.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 1:03:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Elliptic1st(System.Double)">
            <summary>
            Computes the elliptic integral of the first kind.
            </summary>
            <param name="modulus">
            The parameter related to modular angle.
            </param>
            <returns>
            The value of the elliptic integral.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The elliptic integral of the first kind is defined as follows: 
            <para indent="true">
            		<image src="Elliptic1stform_24.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:40:15 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.IncompleteElliptic1st(System.Double,System.Double)">
            <summary>
            Computes the incomplete elliptic integral of the first kind.
            </summary>
            <param name="modulus">
            The parameter related to modular angle.
            </param>
            <param name="amplitude">
            The range of integration for the incomplete elliptic integral.
            </param>
            <returns>
            The value of the incomplete elliptic integral.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The incomplete elliptic integral of the first kind is defined as follows: 
            <para indent="true">
            		<image src="Elliptic1stform_23.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:43:28 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Elliptic2nd(System.Double)">
            <summary>
            Computes the elliptic integral of the second kind.
            </summary>
            <param name="modulus">
            The parameter related to modular angle.
            </param>
            <returns>
            The value of the elliptic integral.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The elliptic integral of the second kind is defined as follows: 
            <para indent="true">
            		<image src="Elliptic2ndform_26.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:40:21 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.IncompleteElliptic2nd(System.Double,System.Double)">
            <summary>
            Computes the incomplete elliptic integral of the second kind.
            </summary>
            <param name="modulus">
            The argument related to modular angle.
            </param>
            <param name="amplitude">
            The range of integration for the incomplete elliptic integral.
            </param>
            <returns>
            The value of the incomplete elliptic integral.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The incomplete elliptic integral of the second kind is defined as follows: 
            <para indent="true">
            		<image src="Elliptic2ndform_25.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:44:14 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.DawsonsIntegral(System.Double)">
            <summary>
            Computes Dawson's integral.
            </summary>
            <param name="input">
            The range of Dawson's integral.
            </param>
            <returns>
            The value of Dawson's integral.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            Dawson's integral is defined as follows:
            <para indent="true">
            		<image src="Dawsonform_27.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:17:06 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.ExponentialIntegral(System.Double,System.Int32)">
            <summary>
            Computes the exponential integral.
            </summary>
            <param name="input">
            The input to the exponential integral.
            </param>
            <param name="exponent">
            The exponent value.
            </param>
            <returns>
            The value of the exponential integral.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The exponential integral function is defined as follows:
            <para indent="true">
            		<image src="ExpIntegralform_30.png"/>
            	</para>
            </remarks>
            <lastupdated>9/29/2005 10:32:08 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.CosineIntegral(System.Double)">
            <summary>
            Computes the cosine integral.
            </summary>
            <param name="input">
            Any real nonnegative number.
            </param>
            <returns>
            The value of the cosine integral.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The cosine integral is defined as follows:
            <para indent="true">
            		<image src="CosIntegralform_31.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:16:06 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.SineIntegral(System.Double)">
            <summary>
            Computes the sine integral.
            </summary>
            <param name="input">
            The parameter of the sine integral.
            </param>
            <returns>
            The value of the sine integral.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The sine integral is defined as follows:
            <para indent="true">
            		<image src="SinIntegralform_32.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 12:14:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.HyperbolicCosineIntegral(System.Double)">
            <summary>
            Computes the hyperbolic cosine integral.
            </summary>
            <param name="input">
            The input parameter of the hyperbolic cosine integral.
            </param>
            <returns>
            The value of the hyperbolic cosine integral.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The hyperbolic cosine integral is defined as follows:
            <para indent="true">
            		<image src="CoshIntegralform_33.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:39:01 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.HyperbolicSineIntegral(System.Double)">
            <summary>
            Computes the hyperbolic sine integral.
            </summary>
            <param name="input">
            The input parameter of the hyperbolic sine integral.
            </param>
            <returns>
            The value of the hyperbolic sine integral.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The hyperbolic sine integral is defined as follows:
            <para indent="true">
            		<image src="SinhIntegralform_34.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:38:46 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Dilogarithm(System.Double)">
            <summary>
            Computes the dilogarithm function, also known as Spence's Integral.
            </summary>
            <param name="input">
            The input parameter that specifies the integral range.
            </param>
            <returns>
            The value of the dilogarithm function.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The dilogarithm function is defined as follows:
            <para indent="true">
            		<image src="Dilogarithmform_41.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:18:33 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.ParabolicCylinder(System.Double,System.Double)">
            <summary>
            Computes the parabolic cylinder function, Dv(x).
            </summary>
            <param name="input">
            The input parameter.
            </param>
            <param name="order">
            The order of the parabolic cylinder function.
            </param>
            <returns>
            The value of parabolic cylinder function.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The parabolic cylinder function, Dv(x), is a solution of the following differential equation: 
            <para indent="true">
            		<image src="ParabolicCylinderform_42.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 12:12:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Struve(System.Double,System.Double)">
            <summary>
            Computes the Struve function.
            </summary>
            <param name="input">
            The input parameter.
            </param>
            <param name="index">
            The index parameter.
            </param>
            <returns>
            The value of the Struve function.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The Struve function of order v, Hv(x), is a solution of the following differential equation:
            <para indent="true">
            		<image src="Struveform_43.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 1:01:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Zeta(System.Double)">
            <summary>
            Computes the Riemann Zeta function.
            </summary>
            <param name="input">
            The point at which the Zeta function is evaluated.
            </param>
            <returns>
            The value of Zeta function.
            </returns>
            <security condition="unmanagedcode"/>
            <remarks>
            The Riemann Zeta function is defined as follows:
            <para indent="true">
            		<image src="Zetaform_44.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 1:03:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Airy(System.Double,System.Double@,System.Double@)">
            <summary>
            Computes the Airy functions.
            </summary>
            <param name="input">
            The input parameter of the Airy function.
            </param>
            <param name="ai">
            Upon return, contains the value of the Airy function Ai.
            </param>
            <param name="bi">
            Upon return, contains the value of the Airy function Bi.
            </param>
            <security condition="unmanagedcode"/>
            <remarks>
            The Airy functions, Ai and Bi, are solutions to the Airy differential equation, which is defined as follows:
            <para indent="true">
            		<image src="Airyform_0.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:39:42 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.FresnelIntegrals(System.Double,System.Double@,System.Double@)">
            <summary>
            Computes the Fresnel sine and cosine integrals.
            </summary>
            <param name="input">
            The range of the Fresnel integrals.
            </param>
            <param name="fresnelSineIntegral">
            Upon return, contains the Fresnel sine integral value.
            </param>
            <param name="fresnelCosineIntegral">
            Upon return, contains the Fresnel cosine integral value.
            </param>
            <security condition="unmanagedcode"/>
            <remarks>
            The Fresnel sine integral is defined as follows:
            <para indent="true">
            		<image src="FresnelIntegralsform_46.png"/>
            	</para>
            	<para>
            Fresnel cosine integral is defined as follows:
            </para>
            	<para indent="true">
            		<image src="FresnelIntegralsform_47.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:28:46 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.JacobianEllipticFunctions(System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Determines the Jacobian elliptic functions.
            </summary>
            <param name="input">
            The input parameter.
            </param>
            <param name="integrand">
            The integrand parameter.
            </param>
            <param name="cn">
            Upon return, contains the value of the Jacobi elliptic function cn.
            </param>
            <param name="sn">
            Upon return, contains the value of the Jacobi elliptic function sn.
            </param>
            <param name="dn">
            Upon return, contains the value of the Jacobi elliptic function dn.
            </param>
            <param name="phi">
            Upon return, contains the upper limit of the integral that defines the function.
            </param>
            <security condition="unmanagedcode"/>
            <remarks>
            The following equations define the Jacobian elliptic functions <paramref name="cn"/>, 
            <paramref name="dn"/>, and <paramref name="sn"/>:
            <para indent="true">
            		<image src="JacobiEllipticIform_35.png"/>
            	</para>
            and
            <para indent="true">
            		<image src="JacobiEllipticIform_36.png"/>
            	</para>
            	<para indent="true">
            		<image src="JacobiEllipticIform_37.png"/>
            	</para>
            	<para indent="true">
            		<image src="JacobiEllipticIform_38.png"/>
            	</para>
            	<para indent="true">
            		<image src="JacobiEllipticIform_39.png"/>
            	</para>
            </remarks>
            <lastupdated>9/12/2005 11:57:14 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Kelvin1st(System.Double,System.Int32)">
            <summary>
            Computes the complex Kelvin function of the first kind.
            </summary>
            <param name="input">
            The input parameter.
            </param>
            <param name="order">
            The order of the Kelvin function.
            </param>
            <security condition="unmanagedcode"/>
            <returns>
            The complex value of the Kelvin function of the first kind.
            </returns>
            <remarks>
            The complex-valued Kelvin function of the first kind of order, v, is a solution of the following 
            complex-valued differential equation:
            <para indent="true">
            		<image src="Kelvin1stform_40.png"/>
            	</para>
            </remarks>
            <lastupdated>9/27/2005 10:35:41 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.Math.SpecialFunctions.Kelvin2nd(System.Double,System.Int32)">
            <summary>
            Computes the complex Kelvin function of the second kind.
            </summary>
            <param name="input">
            The input parameter.
            </param>
            <param name="order">
            The order of the Kelvin function.
            </param>
            <security condition="unmanagedcode"/>
            <returns>
            The complex value of the Kelvin function of the second kind.
            </returns>
            <remarks>
            The complex-valued Kelvin function of the second kind of order, v, is a solution of the following 
            complex-valued differential equation:
            <para indent="true">
            		<image src="Kelvin2ndform_40.png"/>
            	</para>
            </remarks>
            <lastupdated>9/27/2005 10:36:06 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation">
            <summary>
            Finds the frequency, amplitude, and phase for each real signal tone whose amplitude exceeds a specified threshold. This class also provides methods to get additional signal and magnitude spectrum information.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This class includes methods that find the signal tones with amplitude exceeding a specified threshold, search 
            a specified frequency range in the signal, and compute each signal tone, 
            frequency, amplitude, and phase present in the input signal. This class also provides methods to get additional signal and magnitude spectrum information. 
            <para>A real multiple tone signal can be expressed as shown in the following equation:</para>
            	<para><image src="MultiToneSignalInfo.gif"/></para>
            	<para>where <format type="italics">A<format type="subscript">i</format></format>, 
            <format type="italics">f<format type="subscript">i</format></format>, 
            and  <image src="phi.gif"/><format type="subscript">i</format> are the amplitude, frequency, and phase, respectively, of the 
            <format type="bold">i<format type="superscript">th</format>
            		</format> tone of a multiple tone signal with 
            <format type="bold">N</format> tones and <format type="italics">F<format type="subscript">s</format></format>, 
            is the sample rate in samples per second of the input waveform signal.</para>
            	<para>For a real signal, the frequency range is (min frequency, max frequency) = (0, <format type="italics">F<format type="subscript">s</format></format>/2).</para>
            </remarks>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <lastupdated>10/29/2010 3:56:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.#ctor(System.Double[],System.Double,System.Double,System.Int32,NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder)">
            <summary>
            Constructs a new <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation"/> object and computes the frequency, amplitude, and phases of each signal tone present in the provided signal, which is above the specified threshold, and sorts them based on the specified value set by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>.
            </summary>
            <param name="signal">A time-domain signal to measure.</param>
            <param name="samplingFrequency">The rate, in hertz, at which the points in the
            input signal are acquired or generated.</param>
            <param name="threshold">The minimum amplitude, in Vp, which each tone must exceed. Signal tones present in the <paramref name="signal"/>, which are below the threshold, will not be found.</param>
            <param name="maximumToneCount">Specifies the maximum number of tones to find in the <paramref name="signal"/>. This value must be greater than 0. To find out exactly how many signal tones were found, you can use the <see cref="P:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.DetectedToneCount" crefType="Unqualified"/> property.</param>
            <param name="sortingOrder">Specifies the sorting order of the detected tones based on the specified value set by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                   The input signal frequency is very close to the Nyquist frequency.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
                      The number of samples in <paramref name="signal"/> is less than six.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="maximumToneCount"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Invalid <paramref name="sortingOrder"/> specified.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/10/2010 6:22:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.#ctor(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            Constructs a new <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation"/> object and computes the frequency, amplitude, and phases of each signal tone present in the provided signal, which is above the specified threshold.
            </summary>
            <param name="signal">A time-domain signal to measure.</param>
            <param name="samplingFrequency">The rate, in hertz, at which the points in the
            input signal are acquired or generated.</param>
            <param name="threshold">The minimum amplitude, in Vp, which each tone must exceed. Signal tones present in the <paramref name="signal"/>, which are below the threshold, will not be found.</param>
            <param name="maximumToneCount">Specifies the maximum number of tones to find in the <paramref name="signal"/>. This value must be greater than 0. To find out exactly how many signal tones were found, you can use the <see cref="P:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.DetectedToneCount" crefType="Unqualified"/> property.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                   The input signal frequency is very close to the Nyquist frequency.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
                      The number of samples in <paramref name="signal"/> is less than six.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="maximumToneCount"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	The order of the values returned by <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetFrequencies" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetAmplitudes" crefType="Unqualified"/>, and <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetPhases" crefType="Unqualified"/> depends on the value specified by <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder.IncreasingFrequency" crefType="Unqualified"/>.
            </remarks>
            <lastupdated>10/29/2010 6:16:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetAmplitudes">
            <summary>
            Gets a copy of the amplitudes, in Vp, of the detected tones. The order of the amplitudes returned depends on the value specified by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>, which is passed through the constructor.
            </summary>
            <returns>
            A copy of the amplitudes, in Vp, of the detected tones. The order of the amplitudes returned depends on the value specified by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>, which is passed through the constructor.
            </returns>
            <lastupdated>10/10/2010 6:16:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetFrequencies">
            <summary>
            Gets a copy of the frequencies, in hertz, of the detected tones. The order of the frequencies returned depends on the value specified by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>, which is passed through the constructor.
            </summary>
            <returns>
            A copy of the frequencies, in hertz, of the detected tones. The order of the frequencies returned depends on the value specified by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>, which is passed through the constructor.
            </returns>
            <lastupdated>10/10/2010 6:17:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetPhases">
            <summary>
            Gets a copy of the phases, in degrees, of the detected tones. The order of the phases returned depends on the value specified by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>, which is passed through the constructor.
            </summary>
            <returns>
            A copy of the phases, in degree, of the detected tones. The order of the phases returned depends on the value specified by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>, which is passed through the constructor.
            </returns>
            <lastupdated>10/10/2010 6:18:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetInputSignal">
            <summary>
            Gets a copy of the input signal, which is passed through the constructor.
            </summary>
            <returns>A copy of the input signal, which is passed through the constructor.
            The length of the signal returned is  <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:57:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetInputSignal(System.Double@)">
            <summary>
            Gets a copy of the input signal, which is passed through the constructor.
            </summary>
            <param name="timePeriod">
            Upon return, contains the time period, in seconds, of the input signal passed through the constructor.</param>
            <returns>A copy of the input signal, which is passed through the constructor.
            The length of the signal returned is  <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:57:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetInputSignalSpectrum">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels.
            </summary>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels.
            The length of the spectrum returned is <format type="italics">(length of input signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetInputSignalSpectrum(System.Double@,System.Double@)">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels.
            </summary>
            <param name="startFrequency">
            Upon return, contains the start frequency, in hertz, of the magnitude spectrum.</param>
            <param name="frequencyResolution">
            Upon return, contains the frequency resolution, in hertz, of the magnitude spectrum.</param>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels. The length of the spectrum returned is <format type="italics">(length of input signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetDetectedSignal">
            <summary>
            Gets a copy of the multiple tone signal detected in the input signal.
            </summary>
            <returns>A copy of the multiple tone signal detected in the input signal. 
            The length of the signal returned is  <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:56:54 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetDetectedSignal(System.Double@)">
            <summary>
            Gets a copy of the multiple tone signal detected in the input signal.
            </summary>
            <param name="timePeriod">
            Upon return, contains the time period, in seconds, of the detected multiple tone signal.</param>
            <returns>A copy of the multiple tone signal detected in the input signal.
            The length of the signal returned is  <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetDetectedSignalSpectrum">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed detected multiple tone signal, in decibels.
            </summary>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed detected multiple tone signal, in decibels.
            The length of the spectrum returned is <format type="italics">(length of detected multiple tone signal
            + 1)/2</format>.</returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetDetectedSignalSpectrum(System.Double@,System.Double@)">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed
            detected multiple tone signal, in decibels.
            </summary>
            <param name="startFrequency">
            Upon return, contains the start frequency, in hertz, of the magnitude spectrum.</param>
            <param name="frequencyResolution">
            Upon return, contains the frequency resolution, in hertz, of the magnitude spectrum.</param>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed
             detected multiple tone signal, in decibels.  The length of the spectrum returned is <format type="italics">(length of detected multiple tone signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetResidualSignal">
            <summary>
            Gets a copy of the difference between the input signal and detected multiple tone signal.
            </summary>
            <returns>A copy of the difference between the input signal and detected multiple tone signal.
            The length of the signal returned is  <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:57:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetResidualSignal(System.Double@)">
            <summary>
            Gets a copy of the difference between the input signal and detected multiple tone signal.
            </summary>
            <param name="timePeriod">
            Upon return, contains the time period, in seconds, of the residual multiple tone signal.</param>
            <returns>A copy of the difference between the input signal and detected multiple tone signal.
            The length of the signal returned is  <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:57:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetResidualSignalSpectrum">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels.
            </summary>
            <returns>A copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels. The length of the spectrum returned is <format type="italics">(length of residual signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The residual signal is the difference between the input signal and the detected multiple tone signal.
            </remarks>
            <lastupdated>10/29/2010 6:16:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.GetResidualSignalSpectrum(System.Double@,System.Double@)">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels.
            </summary>
            <param name="startFrequency">
            Upon return, contains the start frequency, in hertz, of the magnitude spectrum.</param>
            <param name="frequencyResolution">
            Upon return, contains the frequency resolution, in hertz, of the magnitude spectrum.</param>
            <returns>A copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels. The length of the spectrum returned is <format type="italics">(length of residual signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The residual signal is the difference between the input signal and the detected multiple tone signal.
            </remarks>
            <lastupdated>10/29/2010 6:16:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.SpectrumFrequencyIncrement">
            <summary>
            Gets the size of the frequency bins in the output Fourier transforms.
            </summary>
            <value>
            The size of the frequency bins in the output Fourier transforms.
            </value>
            <lastupdated>10/15/2006 4:56:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.SignalTimeIncrement">
            <summary>
            Gets the time elapsed between points in the time-domain signal in seconds.
            </summary>
            <value>
            The elapsed time between points in the time-domain signals in seconds.
            </value>
            <lastupdated>10/23/2006 4:51:09 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.DetectedToneCount">
            <summary>
            Gets the number of detected tones in the input signal. This value is less than or equal to the maximum tone count, which is passed through the constructor.
            </summary>
            <value>
            The number of detected tones in the input signal. This value is less than or equal to maximum tone count, which is passed through the constructor.
            </value>
            <lastupdated>10/10/2010 6:16:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits">
            <summary>
            Specifies the display unit for the output spectrum. 
            </summary>
            <lastupdated>5/27/2003 2:06:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsRms">
            <summary>
            Uses <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsRms"/> display unit for the output spectrum.
            </summary>
            <lastupdated>5/27/2003 2:06:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsPeak">
            <summary>
            Uses <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsPeak"/> display unit for the output spectrum.
            </summary>
            <lastupdated>5/27/2003 2:06:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsRmsSquared">
            <summary>
            Uses <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsRmsSquared"/> display unit for the output spectrum.
            </summary>
            <lastupdated>5/27/2003 2:07:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsPeakSquared">
            <summary>
            Uses <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsPeakSquared"/> display unit for the output spectrum.
            </summary>
            <lastupdated>5/27/2003 2:06:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsRmsPerRootHZ">
            <summary>
            Uses <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsRmsPerRootHZ"/> display unit for the output spectrum.
            </summary>
            <lastupdated>5/27/2003 2:06:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsPeakPerRootHZ">
            <summary>
            Uses <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsPeakPerRootHZ"/> display unit for the output spectrum.
            </summary>
            <lastupdated>5/27/2003 2:06:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsRmsSquaredPerHZ">
            <summary>
            Uses <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsRmsSquaredPerHZ"/> display unit for the output spectrum.
            </summary>
            <lastupdated>5/27/2003 2:07:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsPeakSquaredPerHZ">
            <summary>
            Uses <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits.VoltsPeakSquaredPerHZ"/> display unit for the output spectrum.
            </summary>
            <lastupdated>5/27/2003 2:06:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod">
            <summary>
            Specifies the method used to determine the high and low state levels of the signal.
            </summary>
            <lastupdated>3/25/2008 12:29:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod.Histogram">
            <summary>Returns the levels of the histogram bins with the maximum number of hits in the upper and lower regions of the waveform. The upper and lower regions of the waveform include the upper and lower 40%, respectively, of the peak-to-peak range of the waveform. </summary>
            <lastupdated>3/26/2008 4:20:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod.Peak">
            <summary>Searches the entire waveform for maximum and minimum levels of the waveform.</summary>
            <lastupdated>3/26/2008 4:20:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod.AutoSelect">
            <summary>Determines whether the histogram bins that correspond to the high and low state levels each have over 5% of the total hits. Otherwise, the Peak <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/> is used. This ensures a reasonable answer for either a square wave, ignoring the overshoot and preshoot, or a triangle wave, where a histogram fails.</summary>
            <lastupdated>3/25/2008 12:28:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity">
            <summary>
            The type of a selected pulse.
            </summary>
            <lastupdated>3/25/2008 12:30:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity.Low">
            <summary>Low pulse.</summary>
            <lastupdated>3/25/2008 12:30:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity.High">
            <summary>High pulse.</summary>
            <lastupdated>3/25/2008 12:30:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.Measurements">
            <summary>
            Provides a set of methods for performing  measurements on input data.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This class has methods that perform various measurements on input data, such as determining harmonic distortion.
            </remarks>
            <seealso example="Analysis/Enterprise/PowerFrequencyEstimator" launch="false">Power Frequency Estimator</seealso>
            <lastupdated>1/31/2013 11:42:43 AM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.#ctor">
            <exclude/>
            <lastupdated>10/3/2002 3:41:13 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.#cctor">
            <exclude/>
            <lastupdated>10/3/2002 3:41:18 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.ACDCEstimator(System.Double[],System.Double@,System.Double@)">
            <summary>
            Calculates an estimate of the AC and DC levels of the input signal.
            </summary>
            <param name="signal">
            The input, time-domain signal, usually in volts. At least three cycles of the signal must be contained in the time-domain record for a valid estimate. 
            </param>
            <paramref name="signal"/>
            <param name="acEstimate">
            The estimate of the input signal AC level. This value is in volts rms if the input signal is in volts. 
            </param>
            <param name="dcEstimate">
            The estimate of the input signal DC level. This value is in volts if the input signal is in volts. 
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="signal"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            You must measure the AC and DC content of signals you digitize. If you have a periodic signal but do not have an integral number of periods in the acquisition, you get spectral spreading, whether or not you are doing an FFT later. This routine performs spectral analysis to the extent that it separates DC (bin 0) from AC (the rms sum of the rest of the bins). It applies the Hanning window. This window is sufficient for separating most of the AC energy from the DC bin. 
            <para>
            The efficient mean and variance computations are used in place of Fourier analysis because the desired results are the total AC energy and the true DC, not information in each individual frequency bin.
            </para>
                <para>
            The coherent gain and equivalent noise bandwidth constants for the Hanning window are needed to compensate for the windowing effects on gain and bandwidth. 
            </para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example generates a uniform noise signal and then estimates the AC and DC levels of that signal.
            <code lang="VB.NET">
            Dim waveform() As Double
            Dim acEstimate, dcEstimate As Double
            Dim noiseSignal As New UniformNoiseSignal()
             
            ' Generate a uniform noise signal that represents waveform
            waveform = noiseSignal.Generate(1000.0, 1000)
             
            ' Calculate an estimation of the AC and DC levels of the waveform input signal 
            Measurements.ACDCEstimator(waveform, acEstimate, dcEstimate)
             
            </code>
            </example>
            <example>
                <code lang="C#">
            double[] waveform;
            double acEstimate, dcEstimate;
            UniformNoiseSignal noiseSignal = new UniformNoiseSignal();
             
            // Generate a uniform noise signal that represents waveform
            waveform = noiseSignal.Generate(1000.0, 1000);
             
            // Calculate an estimation of the AC and DC levels of the waveform input signal 
            Measurements.ACDCEstimator(waveform, out acEstimate, out dcEstimate);
             
            </code>
            </example>
            <lastupdated>7/31/2007 11:08:33 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.AmplitudePhaseSpectrum(System.Double[],System.Boolean,System.Double,System.Double[]@,System.Double[]@,System.Double@)">
            <summary> Calculates the single-sided, scaled amplitude spectrum magnitude and amplitude spectrum phase of a 
            real, time-domain signal.
            </summary>
            <param name="signal">
            The input, time-domain signal, usually in volts. At least three cycles of the signal must be contained 
            in the time-domain record for analysis and estimates based on this spectrum to be valid. 
            </param>
            <param name="unWrap">
            The input that decides if the phase is unwrapped. If set to <see langword="true"/>, it enables phase 
            unwrapping on the output phase, <paramref name="phaseSpectrum"/>. If set to 
            <see langword="false"/>, the method does not unwrap the output phase.
            </param>
            <param name="dt">The sample period of the time-domain signal, usually in seconds. <paramref name="dt"/> is also <image src="AmpPhaseSpectrum1.gif"/> where <format type="italics">f<format type="subscript">s</format></format> is the sampling frequency of the time-domain signal. 
            </param>
            <param name="amplitudeSpectrum">
            The single-sided amplitude spectrum magnitude. If the input 
            signal is in volts, this value is in volts rms. 
            </param>
            <param name="phaseSpectrum">The single-sided amplitude spectrum phase in radians. 
            </param>
            <param name="df">The line frequency interval of the power spectrum. If <paramref name="dt"/> is in seconds, 
            this value is in hertz. 
            </param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException"> 
                    The number of samples in <paramref name="signal"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The method computes <paramref name="amplitudeSpectrum"/> as
            <para indent="true">
                    <image src="AmpPhaseSpectrum2.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">N</format> represents the number of points in the signal array. 
            </description>
                    </item>
                </list>
            The method then converts <paramref name="amplitudeSpectrum"/> to single-sided rms magnitude and phase spectra. 
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example generates a sine signal and then calculates the single-sided, scaled amplitude spectrum magnitude and amplitude spectrum phase of the signal.
            <code lang="VB.NET">
            Dim signal() As Double
            Dim amplitudeSpectrum() As Double = Nothing, phaseSpectrum() As Double = Nothing
            Dim dt, df As Double
            Dim unWrap As Boolean
            Dim sineData As New SineSignal(5.0, 1.0, 0.0)
             
            ' Generate a sine signal that represents signal
            signal = sineData.Generate(1000.0, 512)
             
            ' Enable phase unwrapping on the output phase
            unWrap = True
             
            ' Set the sample period
            dt = 1.0 / 512
             
            ' Calculate the single-sided, scaled amplitude and phase spectra of signal
            Measurements.AmplitudePhaseSpectrum(signal, unWrap, dt, amplitudeSpectrum, phaseSpectrum, df)
            </code>
            </example>
            <example>
                <code lang="C#">
            double[] signal;
            double[] amplitudeSpectrum, phaseSpectrum;
            double dt, df;
            bool unWrap;
            SineSignal sineSignal = new SineSignal(5.0, 1.0, 0.0);
             
            // Generate a sine signal that represents signal
            signal = sineSignal.Generate(1000.0, 512);
             
            // Enable phase unwrapping on the output phase
            unWrap = true;
             
            // Set the sample period
            dt = 1.0 / 512;
             
            // Calculate the single-sided, scaled amplitude and phase spectra of signal
            Measurements.AmplitudePhaseSpectrum(signal, unWrap, dt, out amplitudeSpectrum, out phaseSpectrum, out df);
            </code>
            </example>
            <lastupdated>7/31/2007 11:08:12 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.AutoPowerSpectrum(System.Double[],System.Double,System.Double@)">
            <summary>Calculates the single-sided, scaled, auto power spectrum of a time-domain signal. 
            </summary>
            <param name="signal">The input, time-domain signal, usually in volts. At least three cycles of the 
            signal must be contained in the time-domain record for analysis and estimates based on this spectrum to be 
            valid. 
            </param>
            <param name="dt">The sample period of the time-domain signal, usually in seconds. <paramref name="dt"/> is also <image src="AmpPhaseSpectrum1.gif"/> where <format type="italics">f<format type="subscript">s</format></format> is the sampling frequency of the time-domain signal. 
            </param>
            <param name="df">The line frequency interval of the power spectrum. If <paramref name="dt"/> is in seconds, 
            this value is in hertz. 
            </param>
            <returns>
            The single-sided power spectrum. If the input signal 
            is in volts, this value is in volts rms squared. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="signal"/> is equal to zero.
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method computes the power spectrum as
            <para indent="true">
                    <image src="AutoPowerSpectrum.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">N</format> represents the number of points in the signal array, and
            </description>
                    </item>
                    <item>
                        <term>
                        </term>
                        <description>
            * represents a complex conjugate.
            </description>
                    </item>
                </list>
            The method then converts the power spectrum into a single-sided power spectrum result. 
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example generates a sine signal and then computes the single-sided, scaled auto power spectrum of a time-domain signal. 
            <code lang="VB.NET">
            Dim signal() As Double
            Dim autoPowerSpectrum() As Double
            Dim dt, df As Double
            Dim sineSignal As New SineSignal(5.0, 1.0, 0.0)
             
            '' Generate a 5 Hz sine wave with 512 samples that represents signal
            signal = sineSignal.Generate(1000.0, 512)
             
            ' Set the sample period
            dt = 1.0 / 512
             
            ' Calculate the single-sided, scaled auto power spectrum of signal
            autoPowerSpectrum = Measurements.AutoPowerSpectrum(signal, dt, df)
            </code>
            </example>
            <example>
                <code lang="C#">
            double[] signal;
            double[] autoPowerSpectrum;
            double dt, df;
            SineSignal sineSignal = new SineSignal(5, 1.0, 0.0);
             
            // Generate a 5 Hz sine wave with 512 samples that represents signal
            signal = sineSignal.Generate(1000.0, 512);
             
            // Set the sample period
            dt = 1.0 / 512;
             
            // Calculate the single-sided, scaled auto power spectrum of signal
            autoPowerSpectrum = Measurements.AutoPowerSpectrum(signal, dt, out df);
             
            </code>
            </example>
            <lastupdated>7/31/2007 11:11:26 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.CrossPowerSpectrum(System.Double[],System.Double[],System.Double,System.Double[]@,System.Double[]@,System.Double@)">
            <summary>
            The single-sided, scaled, cross power spectrum of two real-time signals.
            </summary>
            <param name="signalX">
            The input, time-domain signal, usually in volts. At least three cycles of the signal must be contained in the time-domain record for a valid estimate. 
            </param>
            <param name="signalY">
            The input, time-domain signal, usually in volts. At least three cycles of the signal must be contained in the time-domain record for a valid estimate. 
            </param>
            <param name="dt">The sample period of the time-domain signal, usually in seconds. <paramref name="dt"/> is also <image src="AmpPhaseSpectrum1.gif"/> where <format type="italics">f<format type="subscript">s</format></format> is the sampling frequency of the time-domain signal. 
            </param>
            <param name="magnitudeSxy">
            The single-sided, cross power spectrum between <paramref name="signalX"/> and <paramref name="signalY"/>.  
            If the input signals are in volts, this value is in volts rms squared.  
            </param>
            <param name="phaseSxy">
            The phase spectrum in radians showing the difference between the phases of <paramref name="signalY"/> and <paramref name="signalX"/>. 
            </param>
            <param name="df">The line frequency interval of the power spectrum. If <paramref name="dt"/> is in seconds, 
            this value is in hertz. 
            </param>
            <exception cref="T:System.ArgumentException">
                <para>
                    The number of samples in <paramref name="signalX"/> is equal to zero.
            </para>
                <para>
            -or-
            </para>
                <para>
                    The number of samples in <paramref name="signalY"/> is equal to zero.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            The cross power spectrum gives the product of the amplitude of <paramref name="signalX"/> and <paramref name="signalY"/> and the difference between their phases, phase of <format type="italics">Y</format> minus phase of <format type="italics">X</format>.
            <para>
            The <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.CrossPowerSpectrum(System.Double[],System.Double[],System.Double,System.Double[]@,System.Double[]@,System.Double@)"/> method computes the cross power spectrum as 
            </para>
                <para indent="true">
                    <image src="CrossPowerSpectrum.gif"/>
                </para>
                <list type="table" bordered="false">
                    <listheader><term></term><description></description></listheader>
                    <item>
                        <term>
            where
            </term>
                        <description>
                            <format type="italics">N</format> represents the number of points in <paramref name="signalX"/> or <paramref name="signalY"/>.
            </description>
                    </item>
                </list>
            The <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.CrossPowerSpectrum(System.Double[],System.Double[],System.Double,System.Double[]@,System.Double[]@,System.Double@)"/> method then converts the cross power spectrum to single-sided magnitude and phase spectra. 
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example generates a sine signal and then computes the single-sided, scaled cross power spectrum of two time-domain signals.
                <code lang="VB.NET">
            Dim signalX() As Double
            Dim signalY() As Double
            Dim magnitudeSxy() As Double = Nothing, phaseSxy() As Double = Nothing
            Dim dt, df As Double
            Dim sineSignal As New SineSignal(5.0, 1.0, 0.0)
            Dim gaussNoiseSignal As New GaussianNoiseSignal(1.0, 0)
             
            ' Generate a sine signal representing signalX and a Gaussian noise signal representing signalY
            signalX = sineSignal.Generate(1000.0, 1024)
            signalY = gaussNoiseSignal.Generate(1000.0, 1024)
             
            ' Set the sample period
            dt = 1.0 / 1000.0
             
            ' Calculate the single-sided, scaled cross power spectrum of signalX and signalY
            Measurements.CrossPowerSpectrum(signalX, signalY, dt, magnitudeSxy, phaseSxy, df)
            </code>
            </example>
            <example>
                <code lang="C#">
            double[] signalX;
            double[] signalY;
            double[] magnitudeSxy, phaseSxy;
            double dt, df;
            SineSignal sineSignal = new SineSignal(5.0, 1.0, 0.0);
            GaussianNoiseSignal gaussNoiseSignal = new GaussianNoiseSignal(1.0, 0);
             
            // Generate a sine signal representing signalX and a Gaussian noise signal representing signalY
            signalX = sineSignal.Generate(1000.0, 1024);
            signalY = gaussNoiseSignal.Generate(1000.0, 1024);
             
            // Set the sample period
            dt = 1.0 / 1000.0;
             
            // Calculate the single-sided, scaled cross power spectrum of signalX and signalY
            Measurements.CrossPowerSpectrum(signalX, signalY, dt, out magnitudeSxy, out phaseSxy, out df);
             
            </code>
            </example>
            <lastupdated>9/11/2007 5:53:43 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.PowerFrequencyEstimate(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double@,System.Double@)">
            <summary>Calculates the estimated power and frequency around a peak in the power spectrum of a time-domain signal. 
            </summary>
            <param name="autoSpectrum">
            The power spectrum of a time-domain signal.
            </param>
            <param name="searchFrequency">
            The frequency (usually in hertz) of the frequency peak around which to estimate the frequency and power.
            </param>
            <param name="equivalentNoiseBandWidth">
            The equivalent noise bandwidth (ENBW) of the selected window. Use this to divide a sum of individual power spectra of 
            the power spectrum or to compute the power in a given frequency span. The ENBW is usually obtained using the <see cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/> class.
            </param>
            <param name="coherentGain">
            The inverse of the scaling factor that was applied to the window. The coherent gain is usually obtained using the <see cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/> class.
            </param>
            <param name="df">
            The line frequency interval of the input spectrum. 
            </param>
            <param name="span">
            The number of frequency lines (bins) around the peak to be included in the peak frequency and power estimation. 
            </param>
            <param name="frequencyPeak">
            The estimated frequency of the peak in the input <paramref name="autoSpectrum"/>.
            </param>
            <param name="powerPeak">
            The estimated power of the peak in the input <paramref name="autoSpectrum"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="autoSpectrum"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                    The number of samples in <paramref name="autoSpectrum"/> is equal to zero.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            This method can be used to achieve good frequency estimates for measured frequencies that lie between frequency lines 
            on the spectrum. The method makes corrections for the window function used. 
            <para>
            		<paramref name="df"/> is needed only if the spectral density output formats are needed, 
            these being the last four of the <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits"/>.
                </para>
            	<para>
            		<paramref name="span"/> can have a typical value of 7, which means that the power in three frequency lines before the peak 
            frequency line, the peak frequency line itself, and three frequency lines after the peak are included in the estimation. 
            This is adequate for most windows. 
            </para>
            	<para>
            If <paramref name="searchFrequency"/> is less than zero or is not a valid frequency, then this function automatically searches for the maximum peak in the <paramref name="autoSpectrum"/> array and estimates the frequency and power around the maximum peak.
            </para>
            	<para>
            		<paramref name="frequencyPeak"/>
            is computed as
            <para indent="true">
            			<image src="PowerFrequencyEstimate1.gif"/>
            		</para>
            		<list type="table" bordered="false">
            			<listheader><term></term><description></description></listheader>
            			<item>
            				<term>
            where
            </term>
            				<description>
            					<format type="italics">j</format> = <format type="italics">i</format>
            					<entity value="ndash"/>
            					<image src="PowerFrequencyEstimate3.gif"/>,..., <format type="italics">i</format> + <image src="PowerFrequencyEstimate3.gif"/>,
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">i</format> = peak index,
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<paramref name="autoSpectrum"/>(<format type="italics">j</format>) = power in bin <format type="italics">j</format>, and
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<paramref name="df"/> = frequency bin width.
            </description>
            			</item>
            		</list>
            	</para>
            	<para>
            		<paramref name="powerPeak"/> is computed as
            </para>
            	<para indent="true">
            		<image src="PowerFrequencyEstimate2.gif"/>
            	</para>
            	<list type="table" bordered="false">
            		<listheader><term></term><description></description></listheader>
            		<item>
            			<term>
            where
            </term>
            			<description>
            				<format type="italics">j</format> = <format type="italics">i</format>
            				<entity value="ndash"/>
            				<image src="PowerFrequencyEstimate3.gif"/>,..., <format type="italics">i</format> + <image src="PowerFrequencyEstimate3.gif"/>,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<format type="italics">i</format> = peak index,
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            				<paramref name="autoSpectrum"/> (<format type="italics">j</format>) = power in bin <format type="italics">j</format>, and
            </description>
            		</item>
            		<item>
            			<term>
            			</term>
            			<description>
            ENBW = <paramref name="equivalentNoiseBandWidth"/> of the window.
            </description>
            		</item>
            	</list>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the estimated power and frequency around a peak in the power spectrum of a time-domain signal.
            <code lang="VB.NET">
            Dim spectrum() As Double
            Dim autoPowerSpectrum() As Double
            Dim gaussNoiseData() As Double
            Dim dt, df, equivalentNoiseBandwidth, coherentGain, searchFrequency As Double
            Dim frequencyPeak, powerPeak As Double
            Dim numSamples, span As Integer
            Dim sineSignal As New SineSignal()
            Dim gaussNoiseSignal As New GaussianNoiseSignal(1.0, 0)
            Dim scaleWindow As ScaledWindow
             
            numSamples = 1024
             
            ' Generate a sine signal representing spectrum and a Gaussian noise signal representing gaussNoiseData
            spectrum = SineSignal.Generate(1000.0, numSamples)
            gaussNoiseData = gaussNoiseSignal.Generate(1000.0, numSamples)
             
            ' Cause system distortion
            For i As Integer = 0 To numSamples - 1
                spectrum(i) = 0.5 * gaussNoiseData(i) + spectrum(i) * spectrum(i) * 0.05 + spectrum(i)
            Next i
             
            ' Set the sample period
            dt = 1.0 / 1000.0
             
            ' Create a Blackman window 
            scaleWindow = ScaledWindow.CreateBlackmanWindow()
             
            ' Apply window on the spectrum
            scaleWindow.Apply(spectrum, equivalentNoiseBandwidth, coherentGain)
             
            ' Calculate the single-sided, scaled auto power spectrum of signal
            autoPowerSpectrum = Measurements.AutoPowerSpectrum(spectrum, dt, df)
             
            span = 7
            searchFrequency = 20.0
             
            ' Calculate the estimated power and frequency around a peak in the power spectrum of autoPowerSpectrum
            Measurements.PowerFrequencyEstimate(autoPowerSpectrum, searchFrequency, equivalentNoiseBandwidth, coherentGain, df, span, frequencyPeak, powerPeak)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] spectrum;
            double[] autoPowerSpectrum;
            double[] gaussNoiseData;
            double dt, df, equivalentNoiseBandwidth, coherentGain, searchFrequency;
            double frequencyPeak, powerPeak;
            int numSamples, span;
            SineSignal sineSignal = new SineSignal();
            GaussianNoiseSignal gaussNoiseSignal = new GaussianNoiseSignal(1.0, 0);
            ScaledWindow scaleWindow;
             
            numSamples = 1024;
             
            // Generate a sine signal representing spectrum and a Gaussian noise signal representing gaussNoiseData
            spectrum = sineSignal.Generate(1000.0, numSamples);
            gaussNoiseData = gaussNoiseSignal.Generate(1000.0, numSamples);
             
            // Cause system distortion
            for (int i = 0; i &lt; numSamples; i++)
                spectrum[i] = 0.5 * gaussNoiseData[i] + spectrum[i] * spectrum[i] * 0.05 + spectrum[i];
             
            // Set the sample period
            dt = 1.0 / 1000.0;
             
            // Create a Blackman window 
            scaleWindow = ScaledWindow.CreateBlackmanWindow();
             
            // Apply window on the spectrum
            scaleWindow.Apply(spectrum, out equivalentNoiseBandwidth, out coherentGain);
             
            // Calculate the single-sided, scaled auto power spectrum of signal
            autoPowerSpectrum = Measurements.AutoPowerSpectrum(spectrum, dt, out df);
             
            span = 7;
            searchFrequency = 20.0;
             
            // Calculate the estimated power and frequency around a peak in the power spectrum of autoPowerSpectrum
            Measurements.PowerFrequencyEstimate(autoPowerSpectrum, searchFrequency, equivalentNoiseBandwidth, coherentGain, df, span, out frequencyPeak, out powerPeak);
             
            </code>
            </example>
            <lastupdated>11/4/2008 1:24:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.SpectrumUnitConversion(System.Double[],NationalInstruments.Analysis.SpectralMeasurements.SpectrumType,NationalInstruments.Analysis.SpectralMeasurements.ScalingMode,NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits,System.Double,System.Double,System.Double,System.Text.StringBuilder)">
            <summary>
            Converts either the power, amplitude, or gain (amplitude ratio) spectrum to alternate formats including 
            Log (decibel and dBm) and spectral density.
            </summary>
            <param name="spectrum">
            The spectrum of a time-domain signal.
            </param>
            <param name="spectrumType">
            The spectrum type; a value from the <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType"/> enumeration.
            </param>
            <param name="scalingMode">
            The type of scaling used; a value from the <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode"/> enumeration.
            </param>
            <param name="displayUnit">
            The output unit for the <paramref name="spectrum"/>; a value from the <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits"/> enumeration.
            </param>
            <param name="df">The line frequency interval of the input <paramref name="spectrum"/>. 
            </param>
            <param name="equivalentNoiseBandWidth">
            The equivalent noise bandwidth (ENBW) of the selected window. Use this to divide a sum of individual power spectra of the power 
            spectrum or to compute the power in a given frequency span. The ENBW is usually obtained using the <see cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/> class.
            </param>
            <param name="coherentGain">
            The inverse of the scaling factor that was applied to the window. The coherent gain is usually obtained using the <see cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/> class.
            </param>
            <param name="unit">
            The string that contains, on input, the base unit of the analyzed signal ("V" for for a voltage signal).
            On output, it contains the unit of the output converted spectrum.
            </param>
            <returns>
            The spectrum in the requested format.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="spectrum"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="spectrum"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    Invalid <paramref name="spectrumType"/> specified.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    Invalid <paramref name="scalingMode"/> specified.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    Invalid <paramref name="displayUnit"/> specified.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<paramref name="df"/> is needed only if the spectral density output formats are needed, 
            these being the last four of the  <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.DisplayUnits"/>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            Converts the input spectrum, which is the power, amplitude, or gain, to alternate formats such as log, decibels or dBm, and spectral density.
            <code lang="VB.NET">
            Dim spectrum() As Double
            Dim spectrumUnitConversion(), autoPowerSpectrum() As Double
            Dim gaussNoiseData() As Double
            Dim dt, df, equivalentNoiseBandwidth, coherentGain As Double
            Dim numSamples As Integer
            Dim sineSignal As New SineSignal()
            Dim gaussNoiseSignal As New GaussianNoiseSignal(1.0, 0)
            Dim scaleWindow As ScaledWindow
            Dim unit As New System.Text.StringBuilder("V", 256)
             
            numSamples = 1024
             
            ' Generate a sine signal representing spectrum and a Gaussian noise signal representing gaussNoiseData
            spectrum = SineSignal.Generate(1000.0, numSamples)
            gaussNoiseData = gaussNoiseSignal.Generate(1000.0, numSamples)
             
            ' Cause system distortion
            For i As Integer = 0 To numSamples - 1
                spectrum(i) = 0.5 * gaussNoiseData(i) + spectrum(i) * spectrum(i) * 0.05 + spectrum(i)
            Next i
             
            ' Set the sample period
            dt = 1.0 / 1000.0
             
            ' Create a Blackman window 
            scaleWindow = ScaledWindow.CreateBlackmanWindow()
             
            ' Apply window on the spectrum
            scaleWindow.Apply(spectrum, equivalentNoiseBandwidth, coherentGain)
             
            ' Calculate the single-sided, scaled auto power spectrum of signal
            autoPowerSpectrum = Measurements.AutoPowerSpectrum(spectrum, dt, df)
             
            ' Convert the input power spectrum signal to an alternate format.
            spectrumUnitConversion = Measurements.SpectrumUnitConversion(autoPowerSpectrum, SpectrumType.Power, ScalingMode.Linear, DisplayUnits.VoltsRms, df, equivalentNoiseBandwidth, coherentGain, unit)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] spectrum;
            double[] spectrumUnitConversion, autoPowerSpectrum;
            double[] gaussNoiseData;
            double dt, df, equivalentNoiseBandwidth, coherentGain;
            int numSamples;
            SineSignal sineSignal = new SineSignal();
            GaussianNoiseSignal gaussNoiseSignal = new GaussianNoiseSignal(1.0, 0);
            ScaledWindow scaleWindow;
            StringBuilder unit = new System.Text.StringBuilder("V", 256);
             
            numSamples = 1024;
             
            // Generate a sine signal representing spectrum and a Gaussian noise signal representing gaussNoiseData
            spectrum = sineSignal.Generate(1000.0, numSamples);
            gaussNoiseData = gaussNoiseSignal.Generate(1000.0, numSamples);
             
            // Cause system distortion
            for (int i = 0; i &lt; numSamples; i++)
                spectrum[i] = 0.5 * gaussNoiseData[i] + spectrum[i] * spectrum[i] * 0.05 + spectrum[i];
             
            // Set the sample period
            dt = 1.0 / 1000.0;
             
            // Create a Blackman window 
            scaleWindow = ScaledWindow.CreateBlackmanWindow();
             
            // Apply window on the spectrum
            scaleWindow.Apply(spectrum, out equivalentNoiseBandwidth, out coherentGain);
             
            // Calculate the single-sided, scaled auto power spectrum of signal
            autoPowerSpectrum = Measurements.AutoPowerSpectrum(spectrum, dt, out df);
             
            // Convert the input power spectrum signal to an alternate format. 
            spectrumUnitConversion = Measurements.SpectrumUnitConversion(autoPowerSpectrum, SpectrumType.Power, ScalingMode.Linear, DisplayUnits.VoltsRms, df, equivalentNoiseBandwidth, coherentGain, unit);
             
            </code>
            </example>
            <lastupdated>11/4/2008 1:33:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.HarmonicAnalyzer(System.Double[],System.Int32,System.Int32,NationalInstruments.Analysis.SpectralMeasurements.WindowType,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@)">
            <summary>Calculates the amplitude levels and frequency tones of the fundamental and harmonic components and computes the percent of total harmonic distortion, <format type="italics">&gt;%THD</format>, and the total harmonic distortion plus noise, <format type="italics">%THD + Noise</format>.  
            </summary>
            <param name="autoPowerSpectrum">
            The single-sided, auto power spectrum of the windowed signal. This array can be the output of a frequency-domain averaging process for improved harmonic estimation. 
            </param>
            <param name="frameSize">
            The number of samples in the time-domain signal array before it was passed to the <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.AutoPowerSpectrum(System.Double[],System.Double,System.Double@)"/>.
            This is typically the number of samples in one block of data from a data acquisition operation. If set to zero, the frame size used is set to twice the size of the <paramref name="autoPowerSpectrum"/> array. 
            </param>
            <param name="numberOfHarmonics">The number of harmonic components to approximate and use in the THD measurement. 
            </param>
            <param name="windowType">The window selection used for the <see cref="T:NationalInstruments.Analysis.Dsp.ScaledWindow"/>. 
            </param>
            <param name="samplingRate">
            The input sampling rate, in hertz.
            </param>
            <param name="fundamentalFrequency">
            An estimate of the fundamental frequency to use in the harmonic search and in the THD computation. If set to zero, 
            the frequency of the largest non-DC component found in <paramref name="autoPowerSpectrum"/> is used as the fundamental frequency. 
            </param>
            <param name="harmonicAmplitudes">
            The array of amplitudes of the fundamental component and its harmonics. These values are always positive 
            and are in units of volts rms if the input auto power spectrum values are given in volts rms squared.
            </param>
            <param name="harmonicFrequencies">
            The array of frequencies of the fundamental component and its harmonics. These values are in units of hertz if the input sampling rate is given in hertz. 
            </param>
            <param name="thdNoise">
            Upon return, contains the percent total harmonic distortion plus noise present in <paramref name="autoPowerSpectrum"/>. 
            </param>
            <returns>
            The percent total harmonic distortion present in <paramref name="autoPowerSpectrum"/>. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="autoPowerSpectrum"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
                    The number of samples in <paramref name="autoPowerSpectrum"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingRate"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="fundamentalFrequency"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
                    Invalid <paramref name="windowType"/> specified.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            You must pass the windowed autoPowerSpectrum of your signal to the HarmonicAnalyzer method for it to function correctly. Apply a ScaledWindow to the time-domain signalto compute the AutoPowerSpectrum.
            <para>
            		<paramref name="numberOfHarmonics"/> includes the fundamental. Therefore, entering a value of 2 tells the <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.HarmonicAnalyzer(System.Double[],System.Int32,System.Int32,NationalInstruments.Analysis.SpectralMeasurements.WindowType,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@)"/> method 
            to find the fundamental frequency, <format type="italics">f</format><format type="subscript">1</format>, and the second harmonic, <format type="italics">f</format><format type="subscript">2</format>, where <format type="italics">f</format><format type="subscript">2</format> = 2*<format type="italics">f</format><format type="subscript">1</format>. If you enter a value of <format type="italics">N</format> in <paramref name="numberOfHarmonics"/>, the <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.HarmonicAnalyzer(System.Double[],System.Int32,System.Int32,NationalInstruments.Analysis.SpectralMeasurements.WindowType,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@)"/> method finds the fundamental and the corresponding (<format type="italics">N</format><entity value="ndash"/>1) harmonics. 
            </para>
            	<para>
            		<paramref name="thdNoise"/> is computed using the following equation:
            <para indent="true">
            			<image src="HarmonicAnalyzer2.gif"/>
            		</para>
            where sum(APS) is the sum of the auto power spectrum without the power near DC and near the fundamental frequency index. 
            </para>
            	<para>
            The THD computation is made using the following equation:
            <para indent="true">
            			<image src="HarmonicAnalyzer1.gif"/>
            		</para>
            		<list type="table" bordered="false">
            			<listheader><term></term><description></description></listheader>
            			<item>
            				<term>
            where
            </term>
            				<description>
            					<format type="italics">A</format>(<format type="italics">f</format><format type="subscript">1</format>) represents the amplitude of the fundamental component,
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">A</format>(<format type="italics">f</format><format type="subscript">n</format>) represents the amplitude of the <format type="italics">nth</format> harmonic, and 
            </description>
            			</item>
            			<item>
            				<term>
            				</term>
            				<description>
            					<format type="italics">N</format> is <paramref name="numberOfHarmonics"/>. 
            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <security condition="unmanagedcode"/>
            <example>
            The following example calculates the amplitude and frequency of the fundamental and harmonic components present in the auto power spectrum. This example also calculates the percent of the total harmonic distortion and the total harmonic distortion, plus noise.
            <code lang="VB.NET">
            Dim autoPowerSpectrum() As Double
            Dim waveformData(), gaussNoiseData() As Double
            Dim harmonicAmplitudes(), harmonicFrequencies() As Double
            Dim dt, df, equivalentNoiseBandwidth, coherentGain As Double
            Dim samplingRate, fundamentalFrequency, thdNoise, percentTHD As Double
            Dim frameSize, numberOfHarmonics, numSamples As Integer
            Dim scaleWindow As ScaledWindow
            Dim gaussNoiseSignal As New GaussianNoiseSignal(1.0, 0)
            Dim sineSignal As New SineSignal()
             
            numSamples = 1024
            samplingRate = 1000.0
            fundamentalFrequency = 1000.0 / samplingRate
             
            ' Generate a sine signal representing waveformData and a Gaussian noise signal representing gaussNoiseData
            waveformData = SineSignal.Generate(1000.0, numSamples)
            gaussNoiseData = gaussNoiseSignal.Generate(1000.0, numSamples)
             
            ' Cause system distortion
            For i As Integer = 0 To numSamples - 1
                waveformData(i) = 0.5 * gaussNoiseData(i) + waveformData(i) * waveformData(i) * 0.05 + waveformData(i)
            Next i
             
            ' Set the sample period
            dt = 1.0 / samplingRate
             
            ' Create a Blackman window 
            scaleWindow = ScaledWindow.CreateBlackmanWindow()
             
            ' Apply window on the waveformData
            scaleWindow.Apply(waveformData, equivalentNoiseBandwidth, coherentGain)
             
            ' Calculate the single-sided, scaled auto power spectrum of signal
            autoPowerSpectrum = Measurements.AutoPowerSpectrum(waveformData, dt, df)
             
            numberOfHarmonics = 2
            frameSize = numSamples
             
            ' Calculate the fundamental and harmonic amplitudes and frequencies present in autoPowerSpectrum 
            ' This method also calculates the percent of total harmonic distortion (percentTHD) and the total harmonic distortion, plus noise (thdNoise)
            percentTHD = Measurements.HarmonicAnalyzer(autoPowerSpectrum, frameSize, numberOfHarmonics, WindowType.Blackman, samplingRate, fundamentalFrequency, harmonicAmplitudes, harmonicFrequencies, thdNoise)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] autoPowerSpectrum;
            double[] waveformData, gaussNoiseData;
            double[] harmonicAmplitudes, harmonicFrequencies;
            double dt, df, equivalentNoiseBandwidth, coherentGain;
            double samplingRate, fundamentalFrequency, thdNoise, percentTHD;
            int frameSize, numberOfHarmonics, numSamples;
            ScaledWindow scaleWindow;
            GaussianNoiseSignal gaussNoiseSignal = new GaussianNoiseSignal(1.0, 0);
            SineSignal sineSignal = new SineSignal();
             
            numSamples = 1024;
            samplingRate = 1000.0;
            fundamentalFrequency = 1000.0 / samplingRate;
             
            // Generate a sine signal representing waveformData and a Gaussian noise signal representing gaussNoiseData
            waveformData = sineSignal.Generate(1000.0, numSamples);
            gaussNoiseData = gaussNoiseSignal.Generate(1000.0, numSamples);
             
            // Cause system distortion
            for (int i = 0; i &lt; numSamples; i++)
                waveformData[i] = 0.5 * gaussNoiseData[i] + waveformData[i] * waveformData[i] * 0.05 + waveformData[i];
            // Set the sample period
            dt = 1.0 / samplingRate;
             
            // Create a Blackman window 
            scaleWindow = ScaledWindow.CreateBlackmanWindow();
             
            // Apply window on the waveformData
            scaleWindow.Apply(waveformData, out equivalentNoiseBandwidth, out coherentGain);
             
            // Calculate the single-sided, scaled auto power spectrum of signal
            autoPowerSpectrum = Measurements.AutoPowerSpectrum(waveformData, dt, out df);
             
            numberOfHarmonics = 2;
            frameSize = numSamples;
             
            // Calculate the fundamental and harmonic amplitudes and frequencies present in autoPowerSpectrum 
            // This method also calculates the percent of total harmonic distortion (percentTHD) and the total harmonic distortion, plus noise (thdNoise)
            percentTHD = Measurements.HarmonicAnalyzer(autoPowerSpectrum, frameSize, numberOfHarmonics, WindowType.Blackman, samplingRate, fundamentalFrequency, out harmonicAmplitudes, out harmonicFrequencies, out thdNoise);
            </code>
            </example>
            <lastupdated>11/4/2008 1:14:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.HarmonicAnalyzer(System.Double[],System.Int32,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@)">
            <summary>Calculates the amplitude levels and frequency tones of the fundamental and harmonic components and computes the percent of total harmonic distortion, <format type="italics">&gt;%THD</format>, and the total harmonic distortion plus noise, <format type="italics">%THD + Noise</format>. 
            </summary>
            <param name="autoPowerSpectrum">
            The single-sided, auto power spectrum of the windowed signal. This array can be the output of a frequency-domain averaging process for improved harmonic estimation. 
            </param>
            <param name="numberOfHarmonics">The number of harmonic components to approximate and use in the THD measurement. 
            </param>
            <param name="samplingRate">
            The input sampling rate, in hertz.
            </param>
            <param name="fundamentalFrequency">
            An estimate of the fundamental frequency to use in the harmonic search and in the THD computation. If set to zero, 
            the frequency of the largest non-DC component found in <paramref name="autoPowerSpectrum"/> is used as the fundamental frequency. 
            </param>
            <param name="harmonicAmplitudes">
            The array of amplitudes of the fundamental component and its harmonics. These values are always positive 
            and are in units of volts rms if the input auto power spectrum values are given in volts rms squared.
            </param>
            <param name="harmonicFrequencies">
            The array of frequencies of the fundamental component and its harmonics. These values are in units of hertz if the input sampling rate is given in hertz. 
            </param>
            <param name="thdNoise">
            Upon return, contains the percent total harmonic distortion plus noise present in <paramref name="autoPowerSpectrum"/>. 
            </param>
            <returns>
            The percent total harmonic distortion present in <paramref name="autoPowerSpectrum"/>. 
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="autoPowerSpectrum"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<para>You must pass the windowed <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType.Power"/> of your signal to the <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.HarmonicAnalyzer(System.Double[],System.Int32,System.Int32,NationalInstruments.Analysis.SpectralMeasurements.WindowType,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@)"/> method for it to function correctly. Apply a ScaledWindow to the time-domain signal to compute the AutoPowerSpectrum.
            </para>
            	<para><paramref name="numberOfHarmonics"/> includes the fundamental. Therefore, entering a value of 2 tells the <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.HarmonicAnalyzer(System.Double[],System.Int32,System.Int32,NationalInstruments.Analysis.SpectralMeasurements.WindowType,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@)"/> method to find the fundamental 
            frequency, <format type="italics">f1</format>, and the second harmonic, <format type="italics">f2</format>, where <format type="italics"> f2 = 2*f1</format>. 
            If you enter a value of  <format type="italics">N</format> in &gt;<paramref name="numberOfHarmonics"/> , the <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.HarmonicAnalyzer(System.Double[],System.Int32,System.Int32,NationalInstruments.Analysis.SpectralMeasurements.WindowType,System.Double,System.Double,System.Double[]@,System.Double[]@,System.Double@)"/> method finds the fundamental and the corresponding <format type="italics">(N-1) </format> harmonics.</para>
            The number of harmonics is limited by <format type="italics">samplingRate/
            (2*fundamentalFrequency) </format>. For example, if the <paramref name="samplingRate"/> is 1,000 Hz and the <paramref name="fundamentalFrequency"/> is 250 Hz, the maximum value of <paramref name="numberOfHarmonics"/> is 1,000 Hz/(2 * 250 Hz) = 2.  If you set <paramref name="numberOfHarmonics"/> equal to 4, the third and fourth elements of the <paramref name="harmonicAmplitudes"/> and <paramref name="harmonicFrequencies"/> array are set to zero.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>3/26/2008 4:20:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.StateLevels(System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>Calculates the high state level, low state level, and amplitude of the input signal using the specified <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/>.</summary>
            <param name="signal">
            The waveform to measure.</param>
            <param name="high">
            Upon return, contains the high state level of the <paramref name="signal"/>.</param>
            <param name="low">
            Upon return, contains the low state level of the <paramref name="signal"/>.</param>
            <param name="amplitude">
            Upon return, contains the amplitude of the <paramref name="signal"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/26/2008 1:42:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.StateLevels(System.Double[],NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>Calculates the high state level, low state level, and amplitude of the input signal using the Peak <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/>.</summary>
            <param name="signal">
            The waveform to measure.</param>
            <param name="high">
            Upon return, contains the high state level of the <paramref name="signal"/> according to the <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/>.</param>
            <param name="low">
            Upon return, contains the low state level of the <paramref name="signal"/> according to the <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/>.</param>
            <param name="amplitude">
            Upon return, contains the amplitude of the <paramref name="signal"/> according to the <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/>.</param>
            <param name="stateLevelsMethod">The <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/> of calculating the high and low state level of the waveform.</param>
            <param name="histogramSize">Specifies the number of bins in the histogram used to determine the high and low state levels of the waveform. This parameter is ignored if you select the Peak <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="stateLevelsMethod"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/26/2008 1:41:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.PulseMeasurements(System.Double[],System.Double,System.Double,System.Double,NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit,NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>Computes the period, pulse duration, and duty cycle of a selected pulse and period using the specified <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/>.</summary>
            <param name="signal">
            The waveform to measure. Each waveform is required to contain at least <paramref name="pulseNumber"/> complete cycles, where a cycle is defined as the interval between two consecutive <paramref name="midReferenceLevel"/> crossings in the same direction. 
            </param>
            <param name="highReferenceLevel">
            Specifies the high reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. After the signal crosses the <paramref name="midReferenceLevel"/> in the rising direction, it must cross the <paramref name="highReferenceLevel"/> before the next falling <paramref name="midReferenceLevel"/> crossing can be counted. 
            </param>
            <param name="midReferenceLevel">
            Specifies the middle reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. The interval between consecutive rising <paramref name="midReferenceLevel"/> crossings defines one cycle, or period, of the waveform. At least one high or low reference level crossing must separate each <paramref name="midReferenceLevel"/> crossing.
            </param>
            <param name="lowReferenceLevel">
            Specifies the low reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. After the signal crosses the <paramref name="midReferenceLevel"/> in the falling direction, it must cross the <paramref name="lowReferenceLevel"/> before the next rising <paramref name="midReferenceLevel"/> crossing can be counted. 
            </param>
            <param name="units">
            Specifies whether the reference level inputs are interpreted as a percentage of the full range of the waveform or as absolute levels.
            </param>
            <param name="pulsePolarity">
            Specifies which pulse of <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/>, high or low, to measure.</param>
            <param name="pulseNumber">
            Specifies the pulse to measure. A <paramref name="pulseNumber"/> of <format type="italics">n</format> with high <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/> selected indicates that the method measures the nth rising pulse it detects in the input waveform. 
            </param>
            <param name="period">
            Upon return, contains the time between adjacent <paramref name="midReferenceLevel"/> crossings in the same direction, in seconds.
            </param>
            <param name="pulseDuration">
            Upon return, contains the time difference, in seconds, between the first two <paramref name="midReferenceLevel"/> crossings of the <paramref name="pulseNumber"/> you specify.
            </param>
            <param name="dutyCycle">
            Upon return, contains a fraction of a <paramref name="period"/>. <paramref name="dutyCycle"/> is also known as duty factor. <paramref name="dutyCycle"/> is calculated by the following equation: <paramref name="dutyCycle"/> = 100*(<paramref name="pulseDuration"/>/<paramref name="period"/>).
            </param>
            <param name="pulseCenter">
            Upon return, contains the time instant of the midpoint of the <paramref name="pulseNumber"/>. <paramref name="pulseCenter"/> for a high <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/> is given by the following equation:
            <para>
            		<image src="Pulsecntr.gif"/>
            	</para>
            </param>
            <param name="highReferenceLevelAbsolute">
            Upon return, contains the <paramref name="highReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="midReferenceLevelAbsolute">
            Upon return, contains the <paramref name="midReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="lowReferenceLevelAbsolute">
            Upon return, contains the <paramref name="lowReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="pulsePolarity"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>11/4/2008 1:25:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.PulseMeasurements(System.Double[],System.Double,System.Double,System.Double,NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit,NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity,System.Int32,NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>Computes the period, pulse duration, and duty cycle of a selected pulse and period.</summary>
            <param name="signal">
            The waveform to measure. Each waveform is required to contain at least <paramref name="pulseNumber"/> complete cycles, where a cycle is defined as the interval between two consecutive <paramref name="midReferenceLevel"/> crossings in the same direction. 
            </param>
            <param name="highReferenceLevel">
            Specifies the high reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. After the signal crosses the <paramref name="midReferenceLevel"/> in the rising direction, it must cross the <paramref name="highReferenceLevel"/> before the next falling <paramref name="midReferenceLevel"/> crossing can be counted. 
            </param>
            <param name="midReferenceLevel">
            Specifies the middle reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. The interval between consecutive rising <paramref name="midReferenceLevel"/> crossings defines one cycle, or period, of the waveform. At least one high or low reference level crossing must separate each <paramref name="midReferenceLevel"/> crossing.
            </param>
            <param name="lowReferenceLevel">
            Specifies the low reference level of the waveform <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. After the signal crosses the <paramref name="midReferenceLevel"/> in the falling direction, it must cross the <paramref name="lowReferenceLevel"/> before the next rising <paramref name="midReferenceLevel"/> crossing can be counted. 
            </param>
            <param name="units">
            Specifies whether the reference level inputs are interpreted as a percentage of the full range of the waveform or as absolute levels.
            </param>
            <param name="pulsePolarity">
            Specifies which pulse of <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/>, high or low, to measure.</param>
            <param name="pulseNumber">
            Specifies the pulse to measure. A <paramref name="pulseNumber"/> of <format type="italics">n</format> with high <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/> selected indicates that the method measures the nth rising pulse it detects in the input waveform. 
            </param>
            &gt;
            <param name="percentageMethod">
            The <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/> of calculating the high and low state level of the waveform.
            </param>
            <param name="histogramSize">
            Specifies the number of bins in the histogram used to determine the high and low state levels of the waveform. <paramref name="histogramSize"/> is ignored if you select the peak <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/>. 
            </param>
            <param name="period">
            Upon return, contains the  time between adjacent <paramref name="midReferenceLevel"/> crossings in the same direction, in seconds.
            </param>
            <param name="pulseDuration">
            Upon return, contains the  time difference, in seconds, between the first two <paramref name="midReferenceLevel"/> crossings of the <paramref name="pulseNumber"/> you specify.
            </param>
            <param name="dutyCycle">
            Upon return, contains a fraction of a <paramref name="period"/>. <paramref name="dutyCycle"/> is also known as duty factor. <paramref name="dutyCycle"/> is calculated by the following equation: <paramref name="dutyCycle"/> = 100*(<paramref name="pulseDuration"/>/<paramref name="period"/>).
            </param>
            <param name="pulseCenter">
            Upon return, contains the time instant of the midpoint of the <paramref name="pulseNumber"/>. <paramref name="pulseCenter"/> for a high <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/> is given by the following equation: 
            <para>
            		<image src="Pulsecntr.gif"/>
            	</para>
            </param>
            <param name="highReferenceLevelAbsolute">
            Upon return, contains the <paramref name="highReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="midReferenceLevelAbsolute">
            Upon return, contains the <paramref name="midReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="lowReferenceLevelAbsolute">
            Upon return, contains the <paramref name="lowReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<para>Specified <paramref name="pulsePolarity"/> is invalid.</para>
            	<para>-or-</para>
            	<para>Specified <paramref name="percentageMethod"/> is invalid.</para></exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>11/4/2008 1:25:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.CycleRmsAverage(System.Double[],System.Double,System.Double,System.Double,NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>Computes the average and RMS levels of a selected cycle of a periodic waveform or an array of periodic waveforms using the Peak value of <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/>.</summary>
            <param name="signal">
            The waveform to measure. Each waveform is required to contain at least <paramref name="cycleNumber"/> complete cycles, where a cycle is defined as the interval between two consecutive rising <paramref name="midReferenceLevel"/> crossings. 
            </param>
            <param name="highReferenceLevel">
            Specifies the high reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. After the signal crosses the <paramref name="midReferenceLevel"/> in the rising direction, it must cross the <paramref name="highReferenceLevel"/> before the next falling <paramref name="midReferenceLevel"/> crossing can be counted. 
            </param>
            <param name="midReferenceLevel">
            Specifies the middle reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. The interval between consecutive rising <paramref name="midReferenceLevel"/> crossings defines one cycle, or period, of the waveform. At least one high or low reference level crossing must separate each <paramref name="midReferenceLevel"/> crossing.
            </param>
            <param name="lowReferenceLevel">
            Specifies the low reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. After the signal crosses the <paramref name="midReferenceLevel"/> in the falling direction, it must cross the <paramref name="lowReferenceLevel"/> before the next rising <paramref name="midReferenceLevel"/> crossing can be counted. 
            </param>
            <param name="units">
            Specifies whether the reference level inputs are interpreted as a percentage of the full range of the waveform or as absolute levels.
            </param>
            <param name="cycleNumber">
            The cycle, or period, of the signal on which to perform the measurement.
            </param>
            <param name="cycleAverage">
            Upon return, contains the mean level of one complete period of a periodic <paramref name="signal"/>.
            </param>
            <param name="cycleRms">
            Upon return, contains the root mean square value of one complete period of a periodic <paramref name="signal"/>.
            </param>
            <param name="startingTime">
            Upon return, contains the time of the rising <paramref name="midReferenceLevel"/> crossing that defines the start of the measurement interval.
            </param>
            <param name="endingTime">
            Upon return, contains the time of the rising <paramref name="midReferenceLevel"/> level crossing that defines the end of the measurement interval.
            </param>
            <param name="highReferenceLevelAbsolute">
            Upon return, contains the <paramref name="highReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="midReferenceLevelAbsolute">
            Upon return, contains the <paramref name="midReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="lowReferenceLevelAbsolute">
            Upon return, contains the <paramref name="lowReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Specified <paramref name="units"/> is invalid.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/26/2008 1:56:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.CycleRmsAverage(System.Double[],System.Double,System.Double,System.Double,NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit,System.Int32,NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>Computes the average and RMS levels of a selected cycle of a periodic waveform or an array of periodic waveforms.</summary>
            <param name="signal">
            The waveform to measure. Each waveform is required to contain at least <paramref name="cycleNumber"/> complete cycles, where a cycle is defined as the interval between two consecutive rising <paramref name="midReferenceLevel"/> crossings. 
            </param>
            <param name="highReferenceLevel">
            Specifies the high reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. After the signal crosses the <paramref name="midReferenceLevel"/> in the rising direction, it must cross the <paramref name="highReferenceLevel"/> before the next falling <paramref name="midReferenceLevel"/> crossing can be counted. 
            </param>
            <param name="midReferenceLevel">
            Specifies the middle reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. The interval between consecutive rising <paramref name="midReferenceLevel"/> crossings defines one cycle, or period, of the waveform. At least one high or low reference level crossing must separate each <paramref name="midReferenceLevel"/> crossing.
            </param>
            <param name="lowReferenceLevel">
            Specifies the low reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. After the signal crosses the <paramref name="midReferenceLevel"/> in the falling direction, it must cross the <paramref name="lowReferenceLevel"/> before the next rising <paramref name="midReferenceLevel"/> crossing can be counted. 
            </param>
            <param name="units">
            Specifies whether the reference level inputs are interpreted as a percentage of the full range of the waveform or as absolute levels.
            </param>
            <param name="cycleNumber">
            The cycle, or period, of the signal on which to perform the measurement.
            </param>
            <param name="percentageMethod">
            The <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/> of calculating the high and low state level of the waveform.
            </param>
            <param name="histogramSize">
            Specifies the number of bins in the histogram used to determine the high and low state levels of the waveform. <paramref name="histogramSize"/> is ignored if you select the peak <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/>. 
            </param>
            <param name="cycleAverage">
            The mean level of one complete period of a periodic <paramref name="signal"/>.
            </param>
            <param name="cycleRms">
            Upon return, contains the root mean square value of one complete period of a periodic <paramref name="signal"/>.
            </param>
            <param name="startingTime">
            Upon return, contains the time of the rising <paramref name="midReferenceLevel"/> crossing that defines the start of the measurement interval.
            </param>
            <param name="endingTime">
            Upon return, contains the time of the rising <paramref name="midReferenceLevel"/> level crossing that defines the end of the measurement interval.
            </param>
            <param name="highReferenceLevelAbsolute">
            Upon return, contains the <paramref name="highReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="midReferenceLevelAbsolute">
            Upon return, contains the <paramref name="midReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="lowReferenceLevelAbsolute">
            Upon return, contains the <paramref name="lowReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<para>Specified <paramref name="units"/> is invalid.</para>
            	<para>-or-</para>
            	<para>Specified <paramref name="percentageMethod"/> is invalid.</para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/26/2008 4:20:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.TransitionMeasurements(System.Double[],System.Double,System.Double,System.Double,NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit,NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>Computes the slope, transition duration, undershoot, and overshoot of a selected pre-transition and post-transition region in each waveform using the peak <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/> and the default histogram size of 256.</summary>
            <param name="signal">
            The waveform to measure. Each waveform is required to contain at least <paramref name="edgeNumber"/> transitions in the direction of the <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/>. A rising transition is the interval between adjacent rising <paramref name="lowReferenceLevel"/> and <paramref name="highReferenceLevel"/> crossings. A falling transition is the interval between adjacent falling <paramref name="highReferenceLevel"/> and <paramref name="lowReferenceLevel"/> crossings. 
            </param>
            <param name="highReferenceLevel">
            Specifies the high reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. After the signal crosses the <paramref name="midReferenceLevel"/> in the rising direction, it must cross the <paramref name="highReferenceLevel"/> before the next falling <paramref name="midReferenceLevel"/> crossing can be counted. 
            </param>
            <param name="midReferenceLevel">
            Specifies the middle reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. The interval between consecutive rising <paramref name="midReferenceLevel"/> crossings defines one cycle, or period, of the waveform. At least one high or low reference level crossing must separate each <paramref name="midReferenceLevel"/> crossing.
            </param>
            <param name="lowReferenceLevel">
            Specifies the low reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. After the signal crosses the <paramref name="midReferenceLevel"/> in the falling direction, it must cross the <paramref name="lowReferenceLevel"/> before the next rising <paramref name="midReferenceLevel"/> crossing can be counted. 
            </param>
            <param name="units">
            Specifies whether the reference level inputs are interpreted as a percentage of the full range of the waveform or as absolute levels.
            </param>
            <param name="transitionPolarity">
            Specifies which pulse of <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/>, high or low, to measure.</param>
            <param name="edgeNumber">
            Specifies the transition to measure. An <paramref name="edgeNumber"/> of <format type="italics">n</format> with high <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/> selected indicates that the method measures the <format type="italics">nth</format> rising transition it detects in the input waveform. 
            </param>
            <param name="slope">
            Upon return, contains a measure of the rate of change of the signal in a transition region between <paramref name="highReferenceLevel"/> and <paramref name="lowReferenceLevel"/>.
            </param>
            <param name="transitionDuration">
            Upon return, contains the time span, in seconds, from when the waveform crosses the <paramref name="lowReferenceLevel"/> until it crosses the <paramref name="highReferenceLevel"/> for a high <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/>, or from when the waveform crosses the highReferenceLevel until it crosses the lowReferenceLevel for a low <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/>.
            </param>
            <param name="startingTime">
            Upon return, contains the time of the rising <paramref name="midReferenceLevel"/> crossing that defines the start of the measurement interval.
            </param>
            <param name="endingTime">
            Upon return, contains the time of the rising <paramref name="midReferenceLevel"/> crossing that defines the end of the measurement interval.
            </param>
            <param name="highReferenceLevelAbsolute">
            Upon return, contains the <paramref name="highReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="midReferenceLevelAbsolute">
            Upon return, contains the <paramref name="midReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="lowReferenceLevelAbsolute">
            Upon return, contains the <paramref name="lowReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="preUndershoot">
            Upon return, contains the undershoot in the pre-transition aberration region of the waveform in <paramref name="signal"/>.</param>
            <param name="preOvershoot">
            Upon return, contains the overshoot in the pre-transition aberration region of the waveform in <paramref name="signal"/>.</param>
            <param name="postUndershoot">
            Upon return, contains the  undershoot in the post-transition aberration region of the waveform in <paramref name="signal"/>.</param>
            <param name="postOvershoot">
            Upon return, contains the  overshoot in the post-transition aberration region of the waveform in <paramref name="signal"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<para>Specified <paramref name="units"/> is invalid.</para>
            	<para>-or-</para>
            	<para>Specified <paramref name="transitionPolarity"/> is invalid.</para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>11/4/2008 1:28:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.Measurements.TransitionMeasurements(System.Double[],System.Double,System.Double,System.Double,NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit,NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity,System.Int32,NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>Computes the slope, transition duration, undershoot, and overshoot of a selected pre-transition and post-transition region in each waveform using the specified <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/>.</summary>
            <param name="signal">
            The waveform to measure. Each waveform is required to contain at least <paramref name="edgeNumber"/> transitions in the direction of the <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/>. A rising transition is the interval between adjacent rising <paramref name="lowReferenceLevel"/> and <paramref name="highReferenceLevel"/> crossings. A falling transition is the interval between adjacent falling <paramref name="highReferenceLevel"/> and <paramref name="lowReferenceLevel"/> crossings. 
            </param>
            <param name="highReferenceLevel">
            Specifies the high reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. After the signal crosses the <paramref name="midReferenceLevel"/> in the rising direction, it must cross the <paramref name="highReferenceLevel"/> before the next falling <paramref name="midReferenceLevel"/> crossing can be counted. 
            </param>
            <param name="midReferenceLevel">
            Specifies the middle reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. The interval between consecutive rising <paramref name="midReferenceLevel"/> crossings defines one cycle, or period, of the waveform. At least one high/low reference level crossing must separate each <paramref name="midReferenceLevel"/> crossing.
            </param>
            <param name="lowReferenceLevel">
            Specifies the low reference level of the waveform in <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>. After the signal crosses the <paramref name="midReferenceLevel"/> in the falling direction, it must cross the <paramref name="lowReferenceLevel"/> before the next rising <paramref name="midReferenceLevel"/> crossing can be counted. 
            </param>
            <param name="units">
            Specifies whether the reference level inputs are interpreted as a percentage of the full range of the waveform or as absolute levels.
            </param>
            <param name="transitionPolarity">
            Specifies which pulse of <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/>, high or low, to measure.</param>
            <param name="edgeNumber">
            Specifies the transition to measure. An <paramref name="edgeNumber"/> of <format type="italics">n</format> with high <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/> selected indicates that the method measures the <format type="italics">nth</format> rising transition it detects in the input waveform. 
            </param>
            <param name="percentageMethod">
            The <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/> of calculating the high and low state level of the waveform.
            </param>
            <param name="histogramSize">
            Specifies the number of bins in the histogram used to determine the high and low state levels of the waveform. <paramref name="histogramSize"/> is ignored if you select the peak <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementMethod"/>. 
            </param>
            <param name="slope">
            Upon return, contains a measure of the rate of change of the signal in a transition region between <paramref name="highReferenceLevel"/> and <paramref name="lowReferenceLevel"/>.
            </param>
            <param name="transitionDuration">
            Upon return, contains the time span, in seconds, from when the waveform crosses the <paramref name="lowReferenceLevel"/> until it crosses the <paramref name="highReferenceLevel"/> for a high <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/>, or from when the waveform crosses the highReferenceLevel until it crosses the lowReferenceLevel for a low <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MeasurementPolarity"/>.
            </param>
            <param name="startingTime">
            Upon return, contains the time of the rising <paramref name="midReferenceLevel"/> crossing that defines the start of the measurement interval.
            </param>
            <param name="endingTime">
            Upon return, contains the time of the rising <paramref name="midReferenceLevel"/> crossing that defines the end of the measurement interval.
            </param>
            <param name="highReferenceLevelAbsolute">
            Upon return, contains the <paramref name="highReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="midReferenceLevelAbsolute">
            Upon return, contains the <paramref name="midReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="lowReferenceLevelAbsolute">
            Upon return, contains the <paramref name="lowReferenceLevel"/> of the <paramref name="signal"/> in Absolute <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit"/>.
            </param>
            <param name="preUndershoot">
            Upon return, contains the undershoot in the pre-transition aberration region of the waveform in <paramref name="signal"/>.</param>
            <param name="preOvershoot">
            Upon return, contains the overshoot in the pre-transition aberration region of the waveform in <paramref name="signal"/>.</param>
            <param name="postUndershoot">
            Upon return, contains the undershoot in the post-transition aberration region of the waveform in <paramref name="signal"/>.</param>
            <param name="postOvershoot">
            Upon return, contains the overshoot in the post-transition aberration region of the waveform in <paramref name="signal"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<para>Specified <paramref name="units"/> is invalid.</para>
            	<para>-or-</para>
            	<para>Specified <paramref name="transitionPolarity"/> is invalid.</para>
            	<para>-or-</para>
            	<para>Specified <paramref name="percentageMethod"/> is invalid.</para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>3/26/2008 10:03:10 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex">
            <summary>
            Finds the frequency, amplitude, and phase for each complex signal tone whose amplitude exceeds a specified threshold. This class also provides methods to get additional signal and magnitude spectrum information.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This class includes methods that find the signal tones with amplitude exceeding a specified threshold, search 
            a specified frequency range in the signal, and compute each signal tone, 
            frequency, amplitude, and phase present in the input signal. This class also provides methods to get additional signal and magnitude spectrum information. 
            <para>A complex multiple tone signal can be expressed as shown in the following equation:</para>
            	<para><image src="CxMultiToneSignalInfo.gif"/></para>
            	<para>where <format type="italics">A<format type="subscript">i</format></format>, 
            <format type="italics">f<format type="subscript">i</format></format>, 
            and  <image src="phi.gif"/><format type="subscript">i</format> are the amplitude, frequency, and phase, respectively, of the 
            <format type="bold">i<format type="superscript">th</format>
            		</format> tone of a multiple tone signal with 
            <format type="bold">N</format> tones and <format type="italics">F<format type="subscript">s</format></format>, 
            is the sample rate in samples per second of the input waveform signal.</para>
            	<para>For a complex signal, the frequency range is (min frequency, max frequency) = (<entity value="ndash"/><format type="italics">F<format type="subscript">s</format>/2, F<format type="subscript">s</format>/2)</format>.</para>
            </remarks>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <lastupdated>10/29/2010 3:55:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.#ctor(NationalInstruments.ComplexDouble[],System.Double,System.Double,System.Int32,NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder)">
            <summary>
            Constructs a new <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex"/> object and computes the frequency, amplitude, and phases of each signal tone present in the provided signal, which is above the specified threshold.
            </summary>
            <param name="signal">A time-domain signal to measure.</param>
            <param name="samplingFrequency">The rate, in hertz, at which the points in the
            input signal are acquired or generated.</param>
            <param name="threshold">The minimum amplitude, in Vp, which each tone must exceed. Signal tones present in the <paramref name="signal"/>, which are below the threshold, will not be found.</param>
            <param name="maximumToneCount">Specifies the maximum number of tones to find in the <paramref name="signal"/>. This value must be greater than 0. To find out exactly how many signal tones were found, you can use the <see cref="P:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.DetectedToneCount" crefType="Unqualified"/> property.</param>
            <param name="sortingOrder">Specifies the sorting order of the detected tones based on the specified value set by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                   The input signal frequency is very close to the Nyquist frequency.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
                      The number of samples in <paramref name="signal"/> is less than six.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="maximumToneCount"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Invalid <paramref name="sortingOrder"/> specified.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/10/2010 6:53:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.#ctor(NationalInstruments.ComplexDouble[],System.Double,System.Double,System.Int32)">
            <summary>
            Constructs a new <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex"/> object and computes the frequency, amplitude, and phases of each signal tone present in the provided signal, which is above the specified threshold.
            </summary>
            <param name="signal">A time-domain signal to measure.</param>
            <param name="samplingFrequency">The rate, in hertz, at which the points in the
            input signal are acquired or generated.</param>
            <param name="threshold">The minimum amplitude, in Vp, which each tone must exceed. Signal tones present in the <paramref name="signal"/>, which are below the threshold, will not be found.</param>
            <param name="maximumToneCount">Specifies the maximum number of tones to find in the <paramref name="signal"/>. This value must be greater than 0. To find out exactly how many signal tones were found, you can use the <see cref="P:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation.DetectedToneCount" crefType="Unqualified"/> property.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                   The input signal frequency is very close to the Nyquist frequency.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
                      The number of samples in <paramref name="signal"/> is less than six.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="maximumToneCount"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            	The order of the values returned by <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetFrequencies" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetAmplitudes" crefType="Unqualified"/>, and <see cref="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetPhases" crefType="Unqualified"/> depends on the value specified by <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder.IncreasingFrequency" crefType="Unqualified"/>.
            </remarks>
            <lastupdated>10/29/2010 6:16:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetAmplitudes">
            <summary>
            Gets a copy of the amplitudes, in Vp, of the detected tones. The order of the amplitudes returned depends on the value specified by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>, which is passed through the constructor.
            </summary>
            <returns>
            A copy of the amplitudes, in Vp, of the detected tones. The order of the amplitudes returned depends on the value specified by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>, which is passed through the constructor.
            </returns>
            <lastupdated>10/10/2010 6:33:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetFrequencies">
            <summary>
            Gets a copy of the frequencies, in hertz, of the detected tones. The order of the frequencies returned depends on the value specified by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>, which is passed through the constructor.
            </summary>
            <returns>
            A copy of the frequencies, in hertz, of the detected tones. The order of the frequencies returned depends on the value specified by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>, which is passed through the constructor.
            </returns>
            <lastupdated>10/10/2010 6:51:55 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetPhases">
            <summary>
            Gets a copy of the phases, in degrees, of the detected tones. The order of the phases returned depends on the value specified by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>, which is passed through the constructor.
            </summary>
            <returns>
            A copy of the phases, in degree, of the detected tones. The order of the phases returned depends on the value specified by <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder" crefType="Unqualified"/>, which is passed through the constructor.
            </returns>
            <lastupdated>10/10/2010 6:52:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetInputSignal">
            <summary>
            Gets a copy of the input signal, which is passed through the constructor.
            </summary>
            <returns>A copy of the input signal, which is passed through the constructor.
            The length of the signal returned is  <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:30 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetInputSignal(System.Double@)">
            <summary>
            Gets a copy of the input signal, which is passed through the constructor.
            </summary>
            <param name="timePeriod">
            Upon return, contains the time period, in seconds, of the input signal passed through the constructor.</param>
            <returns>A copy of the input signal, which is passed through the constructor.
            The length of the signal returned is  <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:30 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetInputSignalSpectrum">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels.
            </summary>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels.
            The length of the spectrum returned is <format type="italics">(length of input signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetInputSignalSpectrum(System.Double@,System.Double@)">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels.
            </summary>
            <param name="startFrequency">
            Upon return, contains the start frequency, in hertz, of the magnitude spectrum.</param>
            <param name="frequencyResolution">
            Upon return, contains the frequency resolution, in hertz, of the magnitude specturm.</param>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels. The length of the spectrum returned is <format type="italics">(length of input signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetDetectedSignal">
            <summary>
            Gets a copy of the multiple tone signal detected in the input signal.
            </summary>
            <returns>A copy of the multiple tone signal detected in the input signal.
            The length of the signal returned is (length of input  signal).
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:57:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetDetectedSignal(System.Double@)">
            <summary>
            Gets a copy of the multiple tone signal detected in the input signal.
            </summary>
            <param name="timePeriod">
            Upon return, contains the time period, in seconds, of the detected multiple tone signal.</param>
            <returns>A copy of the multiple tone detected in the input signal.
            The length of the signal returned is (length of input  signal).
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetDetectedSignalSpectrum">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed detected multiple tone signal, in decibels.
            </summary>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed detected multiple tone signal, in decibels.
            The length of the spectrum returned is <format type="italics">(length of detected multiple tone signal
            + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetDetectedSignalSpectrum(System.Double@,System.Double@)">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed detected multiple tone signal, in decibels.
            </summary>
            <param name="startFrequency">
            Upon return, contains the start frequency, in hertz, of the magnitude spectrum.</param>
            <param name="frequencyResolution">
            Upon return, contains the frequency resolution, in hertz, of the magnitude spectrum.</param>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed detected multiple tone signal, in decibels.
            The length of the spectrum returned is <format type="italics">(length of detected multiple tone signal
            + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetResidualSignal">
            <summary>
            Gets a copy of the difference between the input signal and detected multiple tone signal.
            </summary>
            <returns>A copy of the difference between the input signal and detected multiple tone signal.
            The length of the signal returned is  <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetResidualSignal(System.Double@)">
            <summary>
            Gets a copy of the difference between the input signal and detected multiple tone signal.
            </summary>
            <param name="timePeriod">
            Upon return, contains the time period, in seconds, of the residual multiple tone signal.</param>
            <returns>A copy of the difference between the input signal and detected multiple tone signal.
            The length of the signal returned is  <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetResidualSignalSpectrum">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels.
            </summary>
            <returns>A copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels.
            The length of the spectrum returned is <format type="italics">(length of residual signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The residual signal is the difference between the input signal and the detected multiple tone signal.
            </remarks>
            <lastupdated>10/29/2010 6:16:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.GetResidualSignalSpectrum(System.Double@,System.Double@)">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels.</summary>
            <param name="startFrequency">
            Upon return, contains the start frequency, in hertz, of the magnitude spectrum.</param>
            <param name="frequencyResolution">
            Upon return, contains the frequency resolution, in hertz, of the magnitude specturm.</param>
            <returns>A copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels.
            The length of the spectrum returned is <format type="italics">(length of residual signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The residual signal, is the difference between the input signal and the detected multiple tone signal.
            </remarks>
            <lastupdated>10/29/2010 6:16:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.SpectrumFrequencyIncrement">
            <summary>
            Gets the size of the frequency bins in the output Fourier transforms.
            </summary>
            <value>
            The size of the frequency bins in the output Fourier transforms.
            </value>
            <lastupdated>10/15/2006 4:56:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.SignalTimeIncrement">
            <summary>
            Gets the time elapsed between points in the time-domain signal in seconds.
            </summary>
            <value>
            The elapsed time between points in the time-domain signals in seconds.
            </value>
            <lastupdated>10/23/2006 4:51:09 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex.DetectedToneCount">
            <summary>
            Gets the number of detected tones in the input signal. This value is less than or equal to the maximum tone count, which is passed through the constructor.
            </summary>
            <value>
            The number of detected tones in the input signal. This value is less than or equal to the maximum tone count, which is passed through the constructor.
            </value>
            <lastupdated>10/10/2010 6:33:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit">
            <summary>
            Specifies whether the  high, mid, and low reference levels are interpreted as a percentage of the full range of the waveform or as absolute levels. 
            </summary>
            <lastupdated>3/25/2008 12:31:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit.Absolute">
            <summary>Reference level inputs interpreted as absolute values.</summary>
            <lastupdated>3/26/2008 4:20:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.ReferenceLevelUnit.Percentage">
            <summary>Reference level inputs interpreted as a percentage.</summary>
            <lastupdated>3/26/2008 4:20:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode">
            <summary>Specifies the <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode"/> for the output spectrum.
            </summary>
            <lastupdated>5/27/2003 2:07:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode.Linear">
            <summary>
            Uses <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode.Linear"/> scaling mode for the output spectrum.
            </summary>
            <lastupdated>5/27/2003 2:07:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode.DB">
            <summary>
            Uses <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode.DB"/> scaling mode for the output spectrum. 
            </summary>
            <lastupdated>5/27/2003 2:07:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode.DBM">
            <summary>
            Uses <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.ScalingMode.DBM"/> scaling mode for the output spectrum.
            </summary>
            <lastupdated>5/27/2003 2:07:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation">
            <summary>
            Finds the single tone with the highest amplitude in a signal, or searches 
            a specified frequency range in the real input signal. This class also provides methods to get additional signal and magnitude spectrum information.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This class includes methods that find the single tone with the highest amplitude in a signal, search 
            a specified frequency range in the signal, and compute the single tone, 
            frequency, amplitude, and phase. This class also provides methods to get additional signal and magnitude spectrum information. 
            A real tone signal can be expressed as shown in the following equation:
            <image src="SingleToneSignalInfo.gif"/>
            where <format type="bold">A</format>, <format type="bold">f</format>, and <image src="phi.gif"/> are the amplitude, frequency, and phase of the tone signal, respectively, and
            F<format type="subscript">s</format> is the sample rate in samples per second of the input waveform signal.
            For a real signal, the frequency range is (min frequency, max frequency) = (0, F<format type="subscript">s</format>/2).
            </remarks>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <lastupdated>10/29/2010 3:57:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.#ctor(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation"/>  object and computes the single tone
            parameters for the provided signal, searching only within the specified 
            frequency range.
            </summary>
            <param name="signal">A time-domain signal.</param>
            <param name="samplingFrequency">The rate, in hertz, at which the points in the
            input signal were acquired or generated.</param>
            <param name="approximateFrequency">The center frequency used in the 
            frequency domain search for the single tone. This value is in the range of 0 and <paramref name="samplingFrequency"/>/2.</param>
            <param name="searchWidthInPercent">The width, as a percentage of the <paramref name="samplingFrequency"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                   The input signal frequency is very close to the Nyquist frequency.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
                      The number of samples in <paramref name="signal"/> is less than six.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 12:49:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.#ctor(System.Double[],System.Double)">
            <summary>
            Constructs a new <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation"/> object and computes the single tone
            parameters of the signal with the highest amplitude in the provided signal.
            </summary>
            <param name="signal">A time-domain signal to measure.</param>
            <param name="samplingFrequency">The rate, in hertz, at which the points in the
            input signal are acquired or generated.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                   The input signal frequency is very close to the Nyquist frequency.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
                      The number of samples in <paramref name="signal"/> is less than six.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/10/2010 4:57:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetInputSignal">
            <summary>
            Gets a copy of the input signal, which is passed through the constructor.
            </summary>
            <returns>A copy of the input signal, which is passed through the constructor.
            The length of the signal returned is 
            <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:57:11 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetInputSignal(System.Double@)">
            <summary>
            Gets a copy of the input signal, which is passed through the constructor.
            </summary>
            <param name="timePeriod">
            Upon return, contains the time period, in seconds, of the input signal passed through the constructor.</param>
            <returns>A copy of the input signal, which is passed through the constructor.
            The length of the signal returned is 
            <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:57:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetInputSignalSpectrum">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels.
            </summary>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels.
            The length of the spectrum returned is <format type="italics">(length of input signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetInputSignalSpectrum(System.Double@,System.Double@)">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels.
            </summary>
            <param name="startFrequency">
            Upon return, contains the start frequency, in hertz, of the magnitude spectrum.</param>
            <param name="frequencyResolution">
            Upon return, contains the frequency resolution, in hertz, of the magnitude spectrum.</param>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels. The length of the spectrum returned is <format type="italics">(length of input signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetDetectedSignal">
            <summary>
            Gets a copy of the single tone detected in the input signal.
            </summary>
            <returns>A copy of the single tone detected in the input signal. The length of the signal returned is 
            <format type="italics">(length of input  signal)</format>.</returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:57:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetDetectedSignal(System.Double@)">
            <summary>
            Gets a copy of the single tone detected in the input signal.
            </summary>
            <param name="timePeriod">
            Upon return, contains the time period, in seconds, of the detected single tone signal.</param>
            <returns>A copy of the single tone detected in the input signal. The length of the signal returned is 
            <format type="italics">(length of input  signal)</format>.</returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:57:10 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetDetectedSignalSpectrum">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed detected single tone signal, in decibels.</summary>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed detected single tone signal, in decibels. 
            The length of the spectrum returned is <format type="italics">(length of detected single tone signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetDetectedSignalSpectrum(System.Double@,System.Double@)">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed detected single tone signal, in decibels.
            </summary>
            <param name="startFrequency">
            Upon return, contains the start frequency, in hertz, of the magnitude spectrum.</param>
            <param name="frequencyResolution">
            Upon return, contains the frequency resolution, in hertz, of the magnitude specturm. </param>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed detected single tone signal, in decibels. The length of the spectrum returned is <format type="italics">(length of detected single tone signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetResidualSignal">
            <summary>
            Gets a copy of the difference between the input signal and detected single tone signal.
            </summary>
            <returns>A copy of the difference between the input signal and detected single tone signal.
            The length of the signal returned is 
            <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:57:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetResidualSignal(System.Double@)">
            <summary>
            Gets a copy of the difference between the input signal and detected single tone signal.
            </summary>
            <param name="timePeriod">
            Upon return, contains the time period, in seconds, of the residual single tone signal.</param>
            <returns>A copy of the difference between the input signal and detected single tone signal.
            The length of the signal returned is 
            <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:57:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetResidualSignalSpectrum">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels.
            </summary>
            <returns>A copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels.
            The length of the spectrum returned is <format type="italics">(length of residual signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The residual signal is the difference between the input signal and the detected single tone signal.
            </remarks>
            <lastupdated>10/29/2010 6:16:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.GetResidualSignalSpectrum(System.Double@,System.Double@)">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels.
            </summary>
            <param name="startFrequency">
            Upon return, contains the start frequency, in hertz, of the magnitude spectrum.</param>
            <param name="frequencyResolution">
            Upon return, contains the frequency resolution, in hertz, of the magnitude spectrum.</param>
            <returns>A copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels.
            The length of the spectrum returned is <format type="italics">(length of residual signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The residual signal is the difference between the input signal and the detected single tone signal.
            </remarks>
            <lastupdated>10/29/2010 6:16:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.Amplitude">
            <summary>
            Gets the amplitude of the single tone detected in the input signal, in Vp.
            </summary>
            <value>
            The amplitude of the single tone detected in the input signal, in Vp.</value>
            <lastupdated>10/10/2010 4:53:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.Frequency">
            <summary>
            Gets the frequency of the single tone detected in the input signal, in hertz.
            </summary>
            <value>
            The frequency of the single tone detected in the input signal, in hertz.</value>
            <lastupdated>10/10/2010 4:53:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.Phase">
            <summary>
            Gets the phase of the single tone detected in the input signal, in degrees.
            </summary>
            <value>
            The phase of the single tone detected in the input signal, in degrees.</value>
            <lastupdated>10/10/2010 4:53:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.SpectrumFrequencyIncrement">
            <summary>
            Gets the size of the frequency bins in the output Fourier transforms.
            </summary>
            <value>
            The size of the frequency bins in the output Fourier transforms.
            </value>
            <lastupdated>10/15/2006 4:56:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformation.SignalTimeIncrement">
            <summary>
            Gets the time elapsed between points in the time-domain signal in seconds.
            </summary>
            <value>
            The elapsed time between points in the time-domain signals in seconds.
            </value>
            <lastupdated>10/23/2006 4:51:09 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex">
            <summary>
            Finds the single tone with the highest amplitude in a signal, or searches 
            a specified frequency range in the complex input signal. This class also provides methods to get additional signal and magnitude spectrum information.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            This class includes methods that find the single tone with the highest amplitude in a signal, search 
            a specified frequency range in the signal, and compute the single tone, 
            frequency, amplitude, and phase. This class also provides methods to get additional signal and magnitude spectrum information. 
            <para>
            A complex tone signal can be expressed as shown in the following equation: 
            </para>
            	<para>
            		<image src="CxSingleToneSignalInfo.gif"/>
            where <format type="bold">A</format>, <format type="bold">f</format>, and <image src="phi.gif"/> are the amplitude, frequency, and phase of the tone signal, respectively, and <format type="italics">F<format type="subscript">s</format>
            		</format> is the sample rate in samples per second of the input waveform signal.
            </para>
            	<para>
            For a complex signal, the frequency range is (min frequency, max frequency) = (<entity value="ndash"/><format type="italics">F<format type="subscript">s</format>/2, F<format type="subscript">s</format>/2)</format>. 
            </para>
            </remarks>
            <seealso keyword="KeyNINETAnalysis" keywordType="mstudio">Key Measurement Studio Analysis .NET Library Concepts</seealso>
            <lastupdated>10/29/2010 4:25:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.#ctor(NationalInstruments.ComplexDouble[],System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex"/>  object and computes the single tone
            parameters for the provided signal, searching only within the specified 
            frequency range.
            </summary>
            <param name="signal">A time-domain signal.</param>
            <param name="samplingFrequency">The rate, in hertz, at which the points in the
            input signal were acquired or generated.</param>
            <param name="approximateFrequency">The center frequency used in the 
            frequency domain search for the single tone. This value is in the range of 0 and <paramref name="samplingFrequency"/>/2.</param>
            <param name="searchWidthInPercent">The width, as a percentage of the <paramref name="samplingFrequency"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                   The input signal frequency is very close to the Nyquist frequency.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
                      The number of samples in <paramref name="signal"/> is less than six.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 3:57:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.#ctor(NationalInstruments.ComplexDouble[],System.Double)">
            <summary>
            Constructs a new <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex"/> object and computes the single tone
            parameters of the signal with the highest amplitude in the provided signal.
            </summary>
            <param name="signal">A time-domain signal to measure.</param>
            <param name="samplingFrequency">The rate, in hertz, at which the points in the
            input signal are acquired or generated.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="signal"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                   The input signal frequency is very close to the Nyquist frequency.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
                      The number of samples in <paramref name="signal"/> is less than six.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="samplingFrequency"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/10/2010 5:18:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.GetInputSignal">
            <summary>
            Gets a copy of the input signal, which is passed through the constructor.
            </summary>
            <returns>A copy of the input signal, which is passed through the constructor.
            The length of the signal returned is 
            <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.GetInputSignal(System.Double@)">
            <summary>
            Gets a copy of the input signal, which is passed through the constructor.
            </summary>
            <param name="timePeriod">
            Upon return, contains the time period, in seconds, of the input signal passed through the constructor.</param>
            <returns>A copy of the input signal, which is passed through the constructor.
            The length of the signal returned is 
            <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.GetInputSignalSpectrum">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels.
            </summary>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels.
            The length of the spectrum returned is <format type="italics">(length of input signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.GetInputSignalSpectrum(System.Double@,System.Double@)">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels.
            </summary>
            <param name="startFrequency">
            Upon return, contains the start frequency, in hertz, of the magnitude spectrum.</param>
            <param name="frequencyResolution">
            Upon return, contains the frequency resolution, in hertz, of the magnitude specturm.</param>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed
             input signal, in decibels. The length of the spectrum returned is <format type="italics">(length of input signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.GetDetectedSignal">
            <summary>
            Gets a copy of the single tone detected in the input signal.
            </summary>
            <returns>A copy of the single tone detected in the input signal.
            The length of the signal returned is 
            <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.GetDetectedSignal(System.Double@)">
            <summary>
            Gets a copy of the single tone detected in the input signal.
            </summary>
            <param name="timePeriod">
            Upon return, contains the time period, in seconds, of the detected single tone signal.</param>
            <returns>A copy of the single tone detected in the input signal.
            The length of the signal returned is 
            <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.GetDetectedSignalSpectrum">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed detected single tone signal, in decibels.
            </summary>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed detected single tone signal, in decibels.
            The length of the spectrum returned is <format type="italics">(length of detected single tone signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.GetDetectedSignalSpectrum(System.Double@,System.Double@)">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed detected single tone signal, in decibels.
            </summary>
            <param name="startFrequency">
            Upon return, contains the start frequency, in hertz, of the magnitude spectrum.</param>
            <param name="frequencyResolution">
            Upon return, contains the frequency resolution, in hertz, of the magnitude spectrum.</param>
            <returns>
            A copy of the magnitude spectrum of the Hanning-windowed detected single tone signal, in decibels. The length of the spectrum returned is <format type="italics">(length of detected single tone signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.GetResidualSignal">
            <summary>
            Gets a copy of the difference between the input signal and detected single tone signal.
            </summary>
            <returns>A copy of the difference between the input signal and detected single tone signal. The length of the signal returned is 
            <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.GetResidualSignal(System.Double@)">
            <summary>
            Gets a copy of the difference between the input signal and detected single tone signal.
            </summary>
            <param name="timePeriod">
            Upon return, contains the time period, in seconds, of the residual single tone signal.</param>
            <returns>A copy of the difference between the input signal and detected single tone signal. The length of the signal returned is 
            <format type="italics">(length of input  signal)</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <lastupdated>10/29/2010 6:16:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.GetResidualSignalSpectrum">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels.</summary>
            <returns>A copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels. The length of the spectrum returned is <format type="italics">(length of residual signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The residual signal is the difference between the input signal and the detected single tone signal.
            </remarks>
            <lastupdated>10/29/2010 6:16:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.GetResidualSignalSpectrum(System.Double@,System.Double@)">
            <summary>
            Gets a copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels.
            </summary>
            <param name="startFrequency">
            Upon return, contains the start frequency, in hertz, of the magnitude spectrum.</param>
            <param name="frequencyResolution">
            Upon return, contains the frequency resolution, in hertz, of the magnitude specturm.</param>
            <returns>A copy of the magnitude spectrum of the Hanning-windowed residual signal, in decibels. The length of the spectrum returned is <format type="italics">(length of residual signal + 1)/2</format>.
            </returns>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <security condition="unmanagedcode"/>
            <remarks>
            The residual signal is the difference between the input signal and the detected single tone signal.
            </remarks>
            <lastupdated>10/29/2010 6:16:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.Amplitude">
            <summary>
            Gets the amplitude of the single tone detected in the input signal, in Vp.
            </summary>
            <value>
            The amplitude of the single tone detected in the input signal, in Vp.</value>
            <lastupdated>10/10/2010 5:15:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.Frequency">
            <summary>
            Gets the frequency of the single tone detected in the input signal, in hertz.
            </summary>
            <value>
            The frequency of the single tone detected in the input signal, in hertz.</value>
            <lastupdated>10/10/2010 5:15:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.Phase">
            <summary>
            Gets the phase of the single tone detected in the input signal, in degrees.
            </summary>
            <value>
            The phase of the single tone detected in the input signal, in degrees.</value>
            <lastupdated>10/10/2010 5:15:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.SpectrumFrequencyIncrement">
            <summary>
            Gets the size of the frequency bins in the output Fourier transforms.
            </summary>
            <value>
            The size of the frequency bins in the output Fourier transforms.
            </value>
            <lastupdated>10/10/2010 5:15:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.Analysis.SpectralMeasurements.SingleToneInformationComplex.SignalTimeIncrement">
            <summary>
            Gets the time elapsed between points in the time-domain signal in seconds.
            </summary>
            <value>
            The elapsed time between points in the time-domain signals in seconds.
            </value>
            <lastupdated>10/10/2010 5:15:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType">
            <summary>
            Specifies the spectrum type of the input function.
            </summary>
            <lastupdated>5/27/2003 2:07:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType.Power">
            <summary>
            Specifies a <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType.Power"/> (volts rms squared) input spectrum.
            </summary>
            <lastupdated>6/20/2003 4:07:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType.Amplitude">
            <summary>
            Specifies an <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType.Amplitude"/> (volts rms) input spectrum.
            </summary>
            <lastupdated>6/20/2003 4:07:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType.Gain">
            <summary>
            Specifies a <see cref="F:NationalInstruments.Analysis.SpectralMeasurements.SpectrumType.Gain"/> input spectrum.
            </summary>
            <lastupdated>5/27/2003 2:07:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder">
            <summary>
            Specifies the sorting order of frequencies, amplitudes, and phases of the detected tones retuned by the <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformation" crefType="Unqualified"/> and <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.MultipleToneInformationComplex" crefType="Unqualified"/> classes.
            </summary>
            <lastupdated>10/10/2010 5:19:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder.IncreasingFrequency">
            <summary>
            Specifies the sort order as increasing frequencies for the detected tones.
            </summary>
            <lastupdated>10/10/2010 5:21:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.ToneSortingOrder.DecreasingAmplitude">
            <summary>
            Specifies the sort order as decreasing amplitudes for the detected tones.
            </summary>
            <lastupdated>10/10/2010 5:20:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.TransferFunction">
            <summary>
            Provides a method that calculates the single-sided <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.TransferFunction"/> (frequency response) 
            of a network under test.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            The <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.TransferFunction"/> is computed as 
            <para indent="true">
            		<image src="TransferFunction.gif"/>
            	</para>
            The result is then transformed to single-sided magnitude and phase.
            </remarks>
            <lastupdated>5/27/2003 2:06:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.TransferFunction.#ctor">
            <exclude/>
            <lastupdated>10/3/2002 3:43:08 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.TransferFunction.#cctor">
            <exclude/>
            <lastupdated>10/3/2002 3:43:11 PM</lastupdated>
            <updatedby>Nandan Dharwadker</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.Analysis.SpectralMeasurements.TransferFunction.Compute(System.Double[],System.Double[],System.Double,System.Double[]@,System.Double[]@,System.Double@)">
            <summary>Calculates the single-sided <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.TransferFunction"/>.
            </summary>
            <param name="stimulus">
            The time-domain signal, usually the network stimulus.
            </param>
            <param name="response">
            The time-domain signal, usually the network response.
            </param>
            <param name="dt">
            The sample period of the time-domain signals, usually in seconds. <paramref name="dt"/> = <image src="AmpPhaseSpectrum1.gif"/>, where <format type="italics">f<format type="subscript">s</format></format> is the sampling frequency of the time-domain signals.
            </param>
            <param name="magnitudeTransfer">
            The magnitude of the averaged single-sided transfer function between the <paramref name="stimulus"/> and <paramref name="response"/> signals.
            </param>
            <param name="phaseTransfer">
            The phase, in radians, of the averaged single-sided transfer function between the <paramref name="stimulus"/> and <paramref name="response"/> signals.
            </param>
            <param name="df">
            The frequency interval. If <paramref name="dt"/> is in seconds, this value is in hertz.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="stimulus"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="response"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The number of samples in <paramref name="stimulus"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            	The number of samples in <paramref name="response"/> is equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            	The number of samples in <paramref name="stimulus"/> is not equal to the number of samples in <paramref name="response"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
            There is not enough memory to carry out this operation.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The analysis library cannot be found.
            </exception>
            <exception cref="T:System.EntryPointNotFoundException">
            A required operation in the analysis library cannot be found.
            </exception>
            <remarks>
            	<see cref="T:NationalInstruments.Analysis.SpectralMeasurements.TransferFunction"/>, also known as the frequency response, is calculated from the time-domain stimulus signal and the time-domain response signal of a network under test.
            The <see cref="T:NationalInstruments.Analysis.SpectralMeasurements.TransferFunction"/> is computed as 
            <para indent="true">
            		<image src="TransferFunction.gif"/>
            	</para>
            The result is then transformed to single-sided magnitude and phase.
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>6/23/2003 9:56:43 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.Analysis.SpectralMeasurements.WindowType">
            <summary>
            Specifies the window type to be used.
            </summary>
            <lastupdated>5/27/2003 2:07:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.None">
            <summary>
            Applies no window.
            </summary>
            <lastupdated>5/27/2003 2:12:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.Hanning">
            <summary>
            Applies a Hanning window. 
            </summary>
            <lastupdated>6/23/2003 10:10:35 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.Hamming">
            <summary>
            Applies a Hamming window.
            </summary>
            <lastupdated>5/27/2003 2:12:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.BlackmanHarris">
            <summary>
            Applies a Blackman-Harris window.
            </summary>
            <lastupdated>5/27/2003 2:11:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.ExactBlackman">
            <summary>
            Applies an Exact Blackman window.
            </summary>
            <lastupdated>5/27/2003 2:12:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.Blackman">
            <summary>
            Applies a Blackman window.
            </summary>
            <lastupdated>5/27/2003 2:11:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.FlatTop">
            <summary>
            Applies a Flat Top window.
            </summary>
            <lastupdated>5/27/2003 2:12:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.BlackmanHarris4Term">
            <summary>
            Applies a 4-term Blackman-Harris window.
            </summary>
            <lastupdated>5/27/2003 2:11:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.Analysis.SpectralMeasurements.WindowType.BlackmanHarris7Term">
            <summary>
            Applies a 7-term Blackman-Harris window.
            </summary>
            <lastupdated>5/27/2003 2:12:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
    </members>
</doc>
